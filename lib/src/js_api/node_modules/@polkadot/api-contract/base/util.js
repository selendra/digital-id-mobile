// Copyright 2017-2022 @polkadot/api-contract authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { Bytes } from '@polkadot/types';
import { compactAddLength, u8aToU8a } from '@polkadot/util';
import { randomAsU8a } from '@polkadot/util-crypto';
import { extractOptions, isOptions } from "../util.js";
export const EMPTY_SALT = new Uint8Array();
export function withMeta(meta, creator) {
  creator.meta = meta;
  return creator;
}
export function createBluePrintTx(meta, fn) {
  return withMeta(meta, (options, ...params) => isOptions(options) ? fn(options, params) : fn(...extractOptions(options, params)));
}
export function createBluePrintWithId(fn) {
  return (constructorOrId, options, ...params) => isOptions(options) ? fn(constructorOrId, options, params) : fn(constructorOrId, ...extractOptions(options, params));
}
export function encodeSalt(salt = randomAsU8a()) {
  return salt instanceof Bytes ? salt : salt && salt.length ? compactAddLength(u8aToU8a(salt)) : EMPTY_SALT;
}