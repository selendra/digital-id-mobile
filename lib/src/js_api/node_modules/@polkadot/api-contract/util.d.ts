/// <reference types="bn.js" />
import type { SubmittableResult } from '@polkadot/api';
import type { EventRecord } from '@polkadot/types/interfaces';
import type { BN } from '@polkadot/util';
import type { BlueprintOptions, ContractOptions } from './types';
declare type ContractEvents = 'CodeStored' | 'ContractEmitted' | 'ContractExecution' | 'Instantiated';
declare type TOptions = BlueprintOptions | ContractOptions;
export declare function applyOnEvent<T>(result: SubmittableResult, types: ContractEvents[], fn: (records: EventRecord[]) => T): T | undefined;
export declare function isOptions<T>(options: bigint | string | number | BN | T): options is T;
export declare function extractOptions<T extends TOptions>(value: bigint | string | number | BN, params: unknown[]): [T, unknown[]];
export {};
