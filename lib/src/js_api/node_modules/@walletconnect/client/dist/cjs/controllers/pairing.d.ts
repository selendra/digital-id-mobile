/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { PairingTypes, IClient, IPairing, SubscriptionEvent } from "@walletconnect/types";
import { JsonRpcPayload } from "@json-rpc-tools/utils";
import { Subscription } from "./subscription";
import { JsonRpcHistory } from "./history";
export declare class Pairing extends IPairing {
    client: IClient;
    logger: Logger;
    pending: Subscription<PairingTypes.Pending>;
    settled: Subscription<PairingTypes.Settled>;
    history: JsonRpcHistory;
    events: EventEmitter;
    protected context: string;
    constructor(client: IClient, logger: Logger);
    init(): Promise<void>;
    get(topic: string): Promise<PairingTypes.Settled>;
    ping(topic: string): Promise<void>;
    send(topic: string, payload: JsonRpcPayload): Promise<void>;
    get length(): number;
    get topics(): string[];
    get values(): PairingTypes.Settled[];
    create(params?: PairingTypes.CreateParams): Promise<PairingTypes.Settled>;
    respond(params: PairingTypes.RespondParams): Promise<PairingTypes.Pending>;
    update(params: PairingTypes.UpdateParams): Promise<PairingTypes.Settled>;
    request(params: PairingTypes.RequestParams): Promise<any>;
    delete(params: PairingTypes.DeleteParams): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    protected propose(params?: PairingTypes.ProposeParams): Promise<PairingTypes.Pending>;
    protected settle(params: PairingTypes.SettleParams): Promise<PairingTypes.Settled>;
    protected onResponse(payloadEvent: SubscriptionEvent.Payload): Promise<void>;
    protected onAcknowledge(payloadEvent: SubscriptionEvent.Payload): Promise<void>;
    protected onMessage(payloadEvent: SubscriptionEvent.Payload): Promise<void>;
    protected onPayload(payloadEvent: SubscriptionEvent.Payload): Promise<void>;
    protected onUpdate(payloadEvent: SubscriptionEvent.Payload): Promise<void>;
    protected handleUpdate(pairing: PairingTypes.Settled, params: PairingTypes.UpdateParams, participant: {
        publicKey: string;
    }): Promise<PairingTypes.Update>;
    private shouldIgnorePayloadEvent;
    private onPayloadEvent;
    private onPendingPayloadEvent;
    private onPendingStatusEvent;
    private registerEventListeners;
}
//# sourceMappingURL=pairing.d.ts.map