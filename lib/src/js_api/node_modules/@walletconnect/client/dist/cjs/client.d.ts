/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { IKeyValueStorage } from "keyvaluestorage";
import { IClient, ClientOptions, ClientTypes, PairingTypes, SessionTypes } from "@walletconnect/types";
import { JsonRpcPayload } from "@json-rpc-tools/utils";
import { Pairing, Session, Relayer } from "./controllers";
export declare class Client extends IClient {
    readonly protocol = "wc";
    readonly version = 2;
    events: EventEmitter;
    logger: Logger;
    relayer: Relayer;
    storage: IKeyValueStorage;
    pairing: Pairing;
    session: Session;
    context: string;
    static init(opts?: ClientOptions): Promise<Client>;
    constructor(opts?: ClientOptions);
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    connect(params: ClientTypes.ConnectParams): Promise<SessionTypes.Settled>;
    pair(params: ClientTypes.PairParams): Promise<void>;
    approve(params: ClientTypes.ApproveParams): Promise<SessionTypes.Settled>;
    reject(params: ClientTypes.RejectParams): Promise<void>;
    update(params: ClientTypes.UpdateParams): Promise<void>;
    notify(params: ClientTypes.NotifyParams): Promise<void>;
    request(params: ClientTypes.RequestParams): Promise<any>;
    respond(params: ClientTypes.RespondParams): Promise<void>;
    disconnect(params: ClientTypes.DisconnectParams): Promise<void>;
    protected onPairingPayload(payload: JsonRpcPayload): Promise<void>;
    protected onPairingSettled(pairing: PairingTypes.Settled): Promise<void>;
    private initialize;
    private registerEventListeners;
}
//# sourceMappingURL=client.d.ts.map