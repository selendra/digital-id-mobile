"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

const xcmV0 = {
  MultiLocation: 'MultiLocationV0',
  MultiAsset: 'MultiAssetV0',
  Xcm: 'XcmV0',
  XcmOrder: 'XcmOrderV0',
  XcmError: 'XcmErrorV0',
  Response: 'ResponseV0'
};
const xcmV1 = {
  MultiLocation: 'MultiLocationV1',
  MultiAsset: 'MultiAssetV1',
  Xcm: 'XcmV1',
  XcmOrder: 'XcmOrderV1',
  XcmError: 'XcmErrorV1',
  Response: 'ResponseV1'
};
const addressV0 = {
  Address: 'LookupSource',
  LookupSource: 'IndicesLookupSource'
};
const addressV1 = {
  Address: 'GenericMultiAddress',
  LookupSource: 'GenericMultiAddress'
};
const currencyV0 = {
  CurrencyId: {
    _enum: {
      Token: 'TokenSymbol',
      DEXShare: '(TokenSymbol, TokenSymbol)',
      ERC20: 'EvmAddress'
    }
  }
};
const poolIdV0 = {
  PoolId: {
    _enum: {
      Loans: 'CurrencyId',
      DexIncentive: 'CurrencyId',
      DexSaving: 'CurrencyId'
    }
  }
};
const poolIdV1 = {
  PoolId: {
    _enum: {
      LoansIncentive: 'CurrencyId',
      DexIncentive: 'CurrencyId',
      DexSaving: 'CurrencyId'
    }
  },
  // for orml-reward types
  PoolInfo: {
    totalShares: 'Compact<Share>',
    totalRewards: 'Compact<Balance>',
    totalWithdrawnRewards: 'Compact<Balance>'
  }
};
const versioned = [{
  minmax: [600, 699],
  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, xcmV0), poolIdV0), addressV0), {}, {
    TokenSymbol: {
      _enum: ['SEL', 'KUSD', 'LSEL', 'DAI', 'RENBTC', 'KSM', 'DOT']
    }
  })
}, {
  minmax: [700, 719],
  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, xcmV0), poolIdV0), addressV1), {}, {
    TokenSymbol: {
      _enum: ['SEL', 'KUSD', 'LSEL', 'DAI', 'RENBTC', 'KSM', 'DOT']
    }
  })
}, {
  minmax: [720, 722],
  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, addressV1), xcmV0), poolIdV0), currencyV0), {}, {
    TokenSymbol: {
      _enum: {
        SEL: 0,
        KUSD: 1,
        LSEL: 2,
        RENBTC: 20,
        DAI: 21,
        KSM: 130,
        DOT: 131
      }
    }
  })
}, {
  minmax: [723, 729],
  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, addressV1), xcmV0), poolIdV1), currencyV0), {}, {
    TokenSymbol: {
      _enum: {
        SEL: 0,
        KUSD: 1,
        LSEL: 2,
        RENBTC: 20,
        DAI: 21,
        KSM: 130,
        DOT: 131
      }
    }
  })
}, {
  minmax: [730, 1007],
  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, addressV1), xcmV0), poolIdV1), {}, {
    TokenSymbol: {
      _enum: {
        SEL: 0,
        KUSD: 1,
        LSEL: 2,
        RENBTC: 20,
        DAI: 21,
        KSM: 130,
        DOT: 131
      }
    }
  })
}, {
  minmax: [1008, 1008],
  types: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, addressV1), xcmV0), poolIdV1), {}, {
    TokenSymbol: {
      _enum: {
        SEL: 0,
        KUSD: 1,
        LSEL: 2,
        RENBTC: 20,
        DAI: 21,
        KSM: 130,
        DOT: 131
      }
    }
  })
}, {
  minmax: [1008, 1009],
  types: _objectSpread(_objectSpread(_objectSpread({}, addressV1), xcmV0), poolIdV1)
}, {
  minmax: [1010, 1013],
  types: _objectSpread(_objectSpread({}, addressV1), xcmV0)
}, {
  minmax: [1014, 1018],
  types: _objectSpread(_objectSpread({}, addressV1), xcmV1)
}, {
  minmax: [1019, undefined],
  types: _objectSpread({}, addressV1)
}];
var _default = versioned;
exports.default = _default;