declare const _default: {
    /**
     * Lookup3: frame_system::AccountInfo<Index, pallet_balances::AccountData<Balance>>
     **/
    FrameSystemAccountInfo: {
        nonce: string;
        consumers: string;
        providers: string;
        sufficients: string;
        data: string;
    };
    /**
     * Lookup5: pallet_balances::AccountData<Balance>
     **/
    PalletBalancesAccountData: {
        free: string;
        reserved: string;
        miscFrozen: string;
        feeFrozen: string;
    };
    /**
     * Lookup7: frame_support::weights::PerDispatchClass<T>
     **/
    FrameSupportWeightsPerDispatchClassU64: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup11: sp_runtime::generic::digest::Digest
     **/
    SpRuntimeDigest: {
        logs: string;
    };
    /**
     * Lookup13: sp_runtime::generic::digest::DigestItem
     **/
    SpRuntimeDigestDigestItem: {
        _enum: {
            Other: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            Consensus: string;
            Seal: string;
            PreRuntime: string;
            __Unused7: string;
            RuntimeEnvironmentUpdated: string;
        };
    };
    /**
     * Lookup16: frame_system::EventRecord<selendra_runtime::Event, primitive_types::H256>
     **/
    FrameSystemEventRecord: {
        phase: string;
        event: string;
        topics: string;
    };
    /**
     * Lookup18: frame_system::pallet::Event<T>
     **/
    FrameSystemEvent: {
        _enum: {
            ExtrinsicSuccess: {
                dispatchInfo: string;
            };
            ExtrinsicFailed: {
                dispatchError: string;
                dispatchInfo: string;
            };
            CodeUpdated: string;
            NewAccount: {
                account: string;
            };
            KilledAccount: {
                account: string;
            };
            Remarked: {
                _alias: {
                    hash_: string;
                };
                sender: string;
                hash_: string;
            };
        };
    };
    /**
     * Lookup19: frame_support::weights::DispatchInfo
     **/
    FrameSupportWeightsDispatchInfo: {
        weight: string;
        class: string;
        paysFee: string;
    };
    /**
     * Lookup20: frame_support::weights::DispatchClass
     **/
    FrameSupportWeightsDispatchClass: {
        _enum: string[];
    };
    /**
     * Lookup21: frame_support::weights::Pays
     **/
    FrameSupportWeightsPays: {
        _enum: string[];
    };
    /**
     * Lookup22: sp_runtime::DispatchError
     **/
    SpRuntimeDispatchError: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            TooManyConsumers: string;
            Token: string;
            Arithmetic: string;
            Transactional: string;
        };
    };
    /**
     * Lookup23: sp_runtime::ModuleError
     **/
    SpRuntimeModuleError: {
        index: string;
        error: string;
    };
    /**
     * Lookup24: sp_runtime::TokenError
     **/
    SpRuntimeTokenError: {
        _enum: string[];
    };
    /**
     * Lookup25: sp_runtime::ArithmeticError
     **/
    SpRuntimeArithmeticError: {
        _enum: string[];
    };
    /**
     * Lookup26: sp_runtime::TransactionalError
     **/
    SpRuntimeTransactionalError: {
        _enum: string[];
    };
    /**
     * Lookup27: pallet_scheduler::pallet::Event<T>
     **/
    PalletSchedulerEvent: {
        _enum: {
            Scheduled: {
                when: string;
                index: string;
            };
            Canceled: {
                when: string;
                index: string;
            };
            Dispatched: {
                task: string;
                id: string;
                result: string;
            };
            CallLookupFailed: {
                task: string;
                id: string;
                error: string;
            };
        };
    };
    /**
     * Lookup32: frame_support::traits::schedule::LookupError
     **/
    FrameSupportScheduleLookupError: {
        _enum: string[];
    };
    /**
     * Lookup33: module_transaction_pause::module::Event<T>
     **/
    ModuleTransactionPauseModuleEvent: {
        _enum: {
            TransactionPaused: {
                palletNameBytes: string;
                functionNameBytes: string;
            };
            TransactionUnpaused: {
                palletNameBytes: string;
                functionNameBytes: string;
            };
        };
    };
    /**
     * Lookup34: pallet_preimage::pallet::Event<T>
     **/
    PalletPreimageEvent: {
        _enum: {
            Noted: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Requested: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Cleared: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup35: pallet_balances::pallet::Event<T, I>
     **/
    PalletBalancesEvent: {
        _enum: {
            Endowed: {
                account: string;
                freeBalance: string;
            };
            DustLost: {
                account: string;
                amount: string;
            };
            Transfer: {
                from: string;
                to: string;
                amount: string;
            };
            BalanceSet: {
                who: string;
                free: string;
                reserved: string;
            };
            Reserved: {
                who: string;
                amount: string;
            };
            Unreserved: {
                who: string;
                amount: string;
            };
            ReserveRepatriated: {
                from: string;
                to: string;
                amount: string;
                destinationStatus: string;
            };
            Deposit: {
                who: string;
                amount: string;
            };
            Withdraw: {
                who: string;
                amount: string;
            };
            Slashed: {
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup36: frame_support::traits::tokens::misc::BalanceStatus
     **/
    FrameSupportTokensMiscBalanceStatus: {
        _enum: string[];
    };
    /**
     * Lookup37: orml_tokens::module::Event<T>
     **/
    OrmlTokensModuleEvent: {
        _enum: {
            Endowed: {
                currencyId: string;
                who: string;
                amount: string;
            };
            DustLost: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Transfer: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
            };
            Reserved: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Unreserved: {
                currencyId: string;
                who: string;
                amount: string;
            };
            ReserveRepatriated: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
                status: string;
            };
            BalanceSet: {
                currencyId: string;
                who: string;
                free: string;
                reserved: string;
            };
            TotalIssuanceSet: {
                currencyId: string;
                amount: string;
            };
            Withdrawn: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Slashed: {
                currencyId: string;
                who: string;
                freeAmount: string;
                reservedAmount: string;
            };
            Deposited: {
                currencyId: string;
                who: string;
                amount: string;
            };
            LockSet: {
                lockId: string;
                currencyId: string;
                who: string;
                amount: string;
            };
            LockRemoved: {
                lockId: string;
                currencyId: string;
                who: string;
            };
        };
    };
    /**
     * Lookup38: selendra_primitives::currency::CurrencyId
     **/
    SelendraPrimitivesCurrencyCurrencyId: {
        _enum: {
            Token: string;
            DexShare: string;
            Erc20: string;
            StableAssetPoolToken: string;
            ForeignAsset: string;
        };
    };
    /**
     * Lookup39: selendra_primitives::currency::TokenSymbol
     **/
    SelendraPrimitivesCurrencyTokenSymbol: {
        _enum: string[];
    };
    /**
     * Lookup40: selendra_primitives::currency::DexShare
     **/
    SelendraPrimitivesCurrencyDexShare: {
        _enum: {
            Token: string;
            Erc20: string;
            ForeignAsset: string;
            StableAssetPoolToken: string;
        };
    };
    /**
     * Lookup45: module_currencies::module::Event<T>
     **/
    ModuleCurrenciesModuleEvent: {
        _enum: {
            Transferred: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
            };
            Withdrawn: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Deposited: {
                currencyId: string;
                who: string;
                amount: string;
            };
            DustSwept: {
                currencyId: string;
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup46: module_transaction_payment::module::Event<T>
     **/
    ModuleTransactionPaymentModuleEvent: {
        _enum: {
            ChargeFeePoolEnabled: {
                subAccount: string;
                currencyId: string;
                feeSwapPath: string;
                exchangeRate: string;
                poolSize: string;
                swapThreshold: string;
            };
            ChargeFeePoolSwapped: {
                subAccount: string;
                supplyCurrencyId: string;
                oldExchangeRate: string;
                swapExchangeRate: string;
                newExchangeRate: string;
                newPoolSize: string;
            };
            ChargeFeePoolDisabled: {
                currencyId: string;
                foreignAmount: string;
                nativeAmount: string;
            };
            TransactionFeePaid: {
                who: string;
                actualFee: string;
                actualTip: string;
                actualSurplus: string;
            };
        };
    };
    /**
     * Lookup49: pallet_treasury::pallet::Event<T, I>
     **/
    PalletTreasuryEvent: {
        _enum: {
            Proposed: {
                proposalIndex: string;
            };
            Spending: {
                budgetRemaining: string;
            };
            Awarded: {
                proposalIndex: string;
                award: string;
                account: string;
            };
            Rejected: {
                proposalIndex: string;
                slashed: string;
            };
            Burnt: {
                burntFunds: string;
            };
            Rollover: {
                rolloverBalance: string;
            };
            Deposit: {
                value: string;
            };
        };
    };
    /**
     * Lookup50: pallet_bounties::pallet::Event<T>
     **/
    PalletBountiesEvent: {
        _enum: {
            BountyProposed: {
                index: string;
            };
            BountyRejected: {
                index: string;
                bond: string;
            };
            BountyBecameActive: {
                index: string;
            };
            BountyAwarded: {
                index: string;
                beneficiary: string;
            };
            BountyClaimed: {
                index: string;
                payout: string;
                beneficiary: string;
            };
            BountyCanceled: {
                index: string;
            };
            BountyExtended: {
                index: string;
            };
        };
    };
    /**
     * Lookup51: pallet_tips::pallet::Event<T>
     **/
    PalletTipsEvent: {
        _enum: {
            NewTip: {
                tipHash: string;
            };
            TipClosing: {
                tipHash: string;
            };
            TipClosed: {
                tipHash: string;
                who: string;
                payout: string;
            };
            TipRetracted: {
                tipHash: string;
            };
            TipSlashed: {
                tipHash: string;
                finder: string;
                deposit: string;
            };
        };
    };
    /**
     * Lookup52: pallet_utility::pallet::Event
     **/
    PalletUtilityEvent: {
        _enum: {
            BatchInterrupted: {
                index: string;
                error: string;
            };
            BatchCompleted: string;
            BatchCompletedWithErrors: string;
            ItemCompleted: string;
            ItemFailed: {
                error: string;
            };
            DispatchedAs: {
                result: string;
            };
        };
    };
    /**
     * Lookup53: pallet_multisig::pallet::Event<T>
     **/
    PalletMultisigEvent: {
        _enum: {
            NewMultisig: {
                approving: string;
                multisig: string;
                callHash: string;
            };
            MultisigApproval: {
                approving: string;
                timepoint: string;
                multisig: string;
                callHash: string;
            };
            MultisigExecuted: {
                approving: string;
                timepoint: string;
                multisig: string;
                callHash: string;
                result: string;
            };
            MultisigCancelled: {
                cancelling: string;
                timepoint: string;
                multisig: string;
                callHash: string;
            };
        };
    };
    /**
     * Lookup54: pallet_multisig::Timepoint<BlockNumber>
     **/
    PalletMultisigTimepoint: {
        height: string;
        index: string;
    };
    /**
     * Lookup55: pallet_recovery::pallet::Event<T>
     **/
    PalletRecoveryEvent: {
        _enum: {
            RecoveryCreated: {
                account: string;
            };
            RecoveryInitiated: {
                lostAccount: string;
                rescuerAccount: string;
            };
            RecoveryVouched: {
                lostAccount: string;
                rescuerAccount: string;
                sender: string;
            };
            RecoveryClosed: {
                lostAccount: string;
                rescuerAccount: string;
            };
            AccountRecovered: {
                lostAccount: string;
                rescuerAccount: string;
            };
            RecoveryRemoved: {
                lostAccount: string;
            };
        };
    };
    /**
     * Lookup56: pallet_proxy::pallet::Event<T>
     **/
    PalletProxyEvent: {
        _enum: {
            ProxyExecuted: {
                result: string;
            };
            AnonymousCreated: {
                anonymous: string;
                who: string;
                proxyType: string;
                disambiguationIndex: string;
            };
            Announced: {
                real: string;
                proxy: string;
                callHash: string;
            };
            ProxyAdded: {
                delegator: string;
                delegatee: string;
                proxyType: string;
                delay: string;
            };
            ProxyRemoved: {
                delegator: string;
                delegatee: string;
                proxyType: string;
                delay: string;
            };
        };
    };
    /**
     * Lookup57: runtime_common::ProxyType
     **/
    RuntimeCommonProxyType: {
        _enum: string[];
    };
    /**
     * Lookup58: module_idle_scheduler::module::Event<T>
     **/
    ModuleIdleSchedulerModuleEvent: {
        _enum: {
            TaskDispatched: {
                taskId: string;
                result: string;
            };
            TaskAdded: {
                taskId: string;
                task: string;
            };
        };
    };
    /**
     * Lookup59: selendra_runtime::config::utility_config::ScheduledTasks
     **/
    SelendraRuntimeConfigUtilityConfigScheduledTasks: {
        _enum: {
            EvmTask: string;
        };
    };
    /**
     * Lookup60: module_evm::EvmTask<selendra_runtime::Runtime>
     **/
    ModuleEvmEvmTask: {
        _enum: {
            Schedule: {
                from: string;
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
            };
            Remove: {
                caller: string;
                contract: string;
                maintainer: string;
            };
        };
    };
    /**
     * Lookup61: selendra_runtime::Runtime
     **/
    SelendraRuntimeRuntime: string;
    /**
     * Lookup62: pallet_indices::pallet::Event<T>
     **/
    PalletIndicesEvent: {
        _enum: {
            IndexAssigned: {
                who: string;
                index: string;
            };
            IndexFreed: {
                index: string;
            };
            IndexFrozen: {
                index: string;
                who: string;
            };
        };
    };
    /**
     * Lookup63: pallet_identity::pallet::Event<T>
     **/
    PalletIdentityEvent: {
        _enum: {
            IdentitySet: {
                who: string;
            };
            IdentityCleared: {
                who: string;
                deposit: string;
            };
            IdentityKilled: {
                who: string;
                deposit: string;
            };
            JudgementRequested: {
                who: string;
                registrarIndex: string;
            };
            JudgementUnrequested: {
                who: string;
                registrarIndex: string;
            };
            JudgementGiven: {
                target: string;
                registrarIndex: string;
            };
            RegistrarAdded: {
                registrarIndex: string;
            };
            SubIdentityAdded: {
                sub: string;
                main: string;
                deposit: string;
            };
            SubIdentityRemoved: {
                sub: string;
                main: string;
                deposit: string;
            };
            SubIdentityRevoked: {
                sub: string;
                main: string;
                deposit: string;
            };
        };
    };
    /**
     * Lookup64: pallet_staking::pallet::pallet::Event<T>
     **/
    PalletStakingPalletEvent: {
        _enum: {
            EraPaid: string;
            Rewarded: string;
            Slashed: string;
            OldSlashingReportDiscarded: string;
            StakersElected: string;
            Bonded: string;
            Unbonded: string;
            Withdrawn: string;
            Kicked: string;
            StakingElectionFailed: string;
            Chilled: string;
            PayoutStarted: string;
            ValidatorPrefsSet: string;
        };
    };
    /**
     * Lookup65: pallet_staking::ValidatorPrefs
     **/
    PalletStakingValidatorPrefs: {
        commission: string;
        blocked: string;
    };
    /**
     * Lookup69: pallet_offences::pallet::Event
     **/
    PalletOffencesEvent: {
        _enum: {
            Offence: {
                kind: string;
                timeslot: string;
            };
        };
    };
    /**
     * Lookup71: pallet_session::pallet::Event
     **/
    PalletSessionEvent: {
        _enum: {
            NewSession: {
                sessionIndex: string;
            };
        };
    };
    /**
     * Lookup72: pallet_grandpa::pallet::Event
     **/
    PalletGrandpaEvent: {
        _enum: {
            NewAuthorities: {
                authoritySet: string;
            };
            Paused: string;
            Resumed: string;
        };
    };
    /**
     * Lookup75: sp_finality_grandpa::app::Public
     **/
    SpFinalityGrandpaAppPublic: string;
    /**
     * Lookup76: sp_core::ed25519::Public
     **/
    SpCoreEd25519Public: string;
    /**
     * Lookup77: pallet_im_online::pallet::Event<T>
     **/
    PalletImOnlineEvent: {
        _enum: {
            HeartbeatReceived: {
                authorityId: string;
            };
            AllGood: string;
            SomeOffline: {
                offline: string;
            };
        };
    };
    /**
     * Lookup78: pallet_im_online::sr25519::app_sr25519::Public
     **/
    PalletImOnlineSr25519AppSr25519Public: string;
    /**
     * Lookup79: sp_core::sr25519::Public
     **/
    SpCoreSr25519Public: string;
    /**
     * Lookup82: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingExposure: {
        total: string;
        own: string;
        others: string;
    };
    /**
     * Lookup85: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingIndividualExposure: {
        who: string;
        value: string;
    };
    /**
     * Lookup86: pallet_election_provider_multi_phase::pallet::Event<T>
     **/
    PalletElectionProviderMultiPhaseEvent: {
        _enum: {
            SolutionStored: {
                electionCompute: string;
                prevEjected: string;
            };
            ElectionFinalized: {
                electionCompute: string;
            };
            Rewarded: {
                account: string;
                value: string;
            };
            Slashed: {
                account: string;
                value: string;
            };
            SignedPhaseStarted: {
                round: string;
            };
            UnsignedPhaseStarted: {
                round: string;
            };
        };
    };
    /**
     * Lookup87: pallet_election_provider_multi_phase::ElectionCompute
     **/
    PalletElectionProviderMultiPhaseElectionCompute: {
        _enum: string[];
    };
    /**
     * Lookup89: pallet_bags_list::pallet::Event<T, I>
     **/
    PalletBagsListEvent: {
        _enum: {
            Rebagged: {
                who: string;
                from: string;
                to: string;
            };
            ScoreUpdated: {
                who: string;
                newScore: string;
            };
        };
    };
    /**
     * Lookup90: pallet_nomination_pools::pallet::Event<T>
     **/
    PalletNominationPoolsEvent: {
        _enum: {
            Created: {
                depositor: string;
                poolId: string;
            };
            Bonded: {
                member: string;
                poolId: string;
                bonded: string;
                joined: string;
            };
            PaidOut: {
                member: string;
                poolId: string;
                payout: string;
            };
            Unbonded: {
                member: string;
                poolId: string;
                amount: string;
            };
            Withdrawn: {
                member: string;
                poolId: string;
                amount: string;
            };
            Destroyed: {
                poolId: string;
            };
            StateChanged: {
                poolId: string;
                newState: string;
            };
            MemberRemoved: {
                poolId: string;
                member: string;
            };
            RolesUpdated: {
                root: string;
                stateToggler: string;
                nominator: string;
            };
        };
    };
    /**
     * Lookup91: pallet_nomination_pools::PoolState
     **/
    PalletNominationPoolsPoolState: {
        _enum: string[];
    };
    /**
     * Lookup93: orml_authority::module::Event<T>
     **/
    OrmlAuthorityModuleEvent: {
        _enum: {
            Dispatched: {
                result: string;
            };
            Scheduled: {
                origin: string;
                index: string;
            };
            FastTracked: {
                origin: string;
                index: string;
                when: string;
            };
            Delayed: {
                origin: string;
                index: string;
                when: string;
            };
            Cancelled: {
                origin: string;
                index: string;
            };
            AuthorizedCall: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                caller: string;
            };
            RemovedAuthorizedCall: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            TriggeredCallBy: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                caller: string;
            };
        };
    };
    /**
     * Lookup94: selendra_runtime::OriginCaller
     **/
    SelendraRuntimeOriginCaller: {
        _enum: {
            system: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            __Unused4: string;
            Void: string;
            __Unused6: string;
            __Unused7: string;
            __Unused8: string;
            __Unused9: string;
            __Unused10: string;
            __Unused11: string;
            __Unused12: string;
            __Unused13: string;
            __Unused14: string;
            __Unused15: string;
            __Unused16: string;
            __Unused17: string;
            __Unused18: string;
            __Unused19: string;
            __Unused20: string;
            __Unused21: string;
            __Unused22: string;
            __Unused23: string;
            __Unused24: string;
            __Unused25: string;
            __Unused26: string;
            __Unused27: string;
            __Unused28: string;
            __Unused29: string;
            __Unused30: string;
            __Unused31: string;
            __Unused32: string;
            __Unused33: string;
            __Unused34: string;
            __Unused35: string;
            __Unused36: string;
            __Unused37: string;
            __Unused38: string;
            __Unused39: string;
            __Unused40: string;
            __Unused41: string;
            __Unused42: string;
            __Unused43: string;
            __Unused44: string;
            __Unused45: string;
            __Unused46: string;
            __Unused47: string;
            __Unused48: string;
            __Unused49: string;
            __Unused50: string;
            __Unused51: string;
            __Unused52: string;
            __Unused53: string;
            __Unused54: string;
            __Unused55: string;
            __Unused56: string;
            __Unused57: string;
            __Unused58: string;
            __Unused59: string;
            Authority: string;
            Council: string;
            __Unused62: string;
            FinancialCouncil: string;
            __Unused64: string;
            TechnicalCommittee: string;
        };
    };
    /**
     * Lookup95: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
     **/
    FrameSupportDispatchRawOrigin: {
        _enum: {
            Root: string;
            Signed: string;
            None: string;
        };
    };
    /**
     * Lookup96: orml_authority::DelayedOrigin<BlockNumber, selendra_runtime::OriginCaller>
     **/
    OrmlAuthorityDelayedOrigin: {
        delay: string;
        origin: string;
    };
    /**
     * Lookup97: pallet_collective::RawOrigin<sp_core::crypto::AccountId32, I>
     **/
    PalletCollectiveRawOrigin: {
        _enum: {
            Members: string;
            Member: string;
            _Phantom: string;
        };
    };
    /**
     * Lookup100: sp_core::Void
     **/
    SpCoreVoid: string;
    /**
     * Lookup101: pallet_collective::pallet::Event<T, I>
     **/
    PalletCollectiveEvent: {
        _enum: {
            Proposed: {
                account: string;
                proposalIndex: string;
                proposalHash: string;
                threshold: string;
            };
            Voted: {
                account: string;
                proposalHash: string;
                voted: string;
                yes: string;
                no: string;
            };
            Approved: {
                proposalHash: string;
            };
            Disapproved: {
                proposalHash: string;
            };
            Executed: {
                proposalHash: string;
                result: string;
            };
            MemberExecuted: {
                proposalHash: string;
                result: string;
            };
            Closed: {
                proposalHash: string;
                yes: string;
                no: string;
            };
        };
    };
    /**
     * Lookup102: pallet_membership::pallet::Event<T, I>
     **/
    PalletMembershipEvent: {
        _enum: string[];
    };
    /**
     * Lookup107: pallet_elections_phragmen::pallet::Event<T>
     **/
    PalletElectionsPhragmenEvent: {
        _enum: {
            NewTerm: {
                newMembers: string;
            };
            EmptyTerm: string;
            ElectionError: string;
            MemberKicked: {
                member: string;
            };
            Renounced: {
                candidate: string;
            };
            CandidateSlashed: {
                candidate: string;
                amount: string;
            };
            SeatHolderSlashed: {
                seatHolder: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup110: pallet_democracy::pallet::Event<T>
     **/
    PalletDemocracyEvent: {
        _enum: {
            Proposed: {
                proposalIndex: string;
                deposit: string;
            };
            Tabled: {
                proposalIndex: string;
                deposit: string;
                depositors: string;
            };
            ExternalTabled: string;
            Started: {
                refIndex: string;
                threshold: string;
            };
            Passed: {
                refIndex: string;
            };
            NotPassed: {
                refIndex: string;
            };
            Cancelled: {
                refIndex: string;
            };
            Executed: {
                refIndex: string;
                result: string;
            };
            Delegated: {
                who: string;
                target: string;
            };
            Undelegated: {
                account: string;
            };
            Vetoed: {
                who: string;
                proposalHash: string;
                until: string;
            };
            PreimageNoted: {
                proposalHash: string;
                who: string;
                deposit: string;
            };
            PreimageUsed: {
                proposalHash: string;
                provider: string;
                deposit: string;
            };
            PreimageInvalid: {
                proposalHash: string;
                refIndex: string;
            };
            PreimageMissing: {
                proposalHash: string;
                refIndex: string;
            };
            PreimageReaped: {
                proposalHash: string;
                provider: string;
                deposit: string;
                reaper: string;
            };
            Blacklisted: {
                proposalHash: string;
            };
            Voted: {
                voter: string;
                refIndex: string;
                vote: string;
            };
            Seconded: {
                seconder: string;
                propIndex: string;
            };
        };
    };
    /**
     * Lookup112: pallet_democracy::vote_threshold::VoteThreshold
     **/
    PalletDemocracyVoteThreshold: {
        _enum: string[];
    };
    /**
     * Lookup113: pallet_democracy::vote::AccountVote<Balance>
     **/
    PalletDemocracyVoteAccountVote: {
        _enum: {
            Standard: {
                vote: string;
                balance: string;
            };
            Split: {
                aye: string;
                nay: string;
            };
        };
    };
    /**
     * Lookup115: orml_oracle::module::Event<T, I>
     **/
    OrmlOracleModuleEvent: {
        _enum: {
            NewFeedData: {
                sender: string;
                values: string;
            };
        };
    };
    /**
     * Lookup119: orml_auction::module::Event<T>
     **/
    OrmlAuctionModuleEvent: {
        _enum: {
            Bid: {
                auctionId: string;
                bidder: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup120: module_prices::module::Event<T>
     **/
    ModulePricesModuleEvent: {
        _enum: {
            LockPrice: {
                currencyId: string;
                lockedPrice: string;
            };
            UnlockPrice: {
                currencyId: string;
            };
        };
    };
    /**
     * Lookup121: module_dex::module::Event<T>
     **/
    ModuleDexModuleEvent: {
        _enum: {
            AddProvision: {
                who: string;
                currency0: string;
                contribution0: string;
                currency1: string;
                contribution1: string;
            };
            AddLiquidity: {
                who: string;
                currency0: string;
                pool0: string;
                currency1: string;
                pool1: string;
                shareIncrement: string;
            };
            RemoveLiquidity: {
                who: string;
                currency0: string;
                pool0: string;
                currency1: string;
                pool1: string;
                shareDecrement: string;
            };
            Swap: {
                trader: string;
                path: string;
                liquidityChanges: string;
            };
            EnableTradingPair: {
                tradingPair: string;
            };
            ListProvisioning: {
                tradingPair: string;
            };
            DisableTradingPair: {
                tradingPair: string;
            };
            ProvisioningToEnabled: {
                tradingPair: string;
                pool0: string;
                pool1: string;
                shareAmount: string;
            };
            RefundProvision: {
                who: string;
                currency0: string;
                contribution0: string;
                currency1: string;
                contribution1: string;
            };
            ProvisioningAborted: {
                tradingPair: string;
                accumulatedProvision0: string;
                accumulatedProvision1: string;
            };
        };
    };
    /**
     * Lookup123: selendra_primitives::TradingPair
     **/
    SelendraPrimitivesTradingPair: string;
    /**
     * Lookup124: module_auction_manager::module::Event<T>
     **/
    ModuleAuctionManagerModuleEvent: {
        _enum: {
            NewCollateralAuction: {
                auctionId: string;
                collateralType: string;
                collateralAmount: string;
                targetBidPrice: string;
            };
            CancelAuction: {
                auctionId: string;
            };
            CollateralAuctionDealt: {
                auctionId: string;
                collateralType: string;
                collateralAmount: string;
                winner: string;
                paymentAmount: string;
            };
            DEXTakeCollateralAuction: {
                auctionId: string;
                collateralType: string;
                collateralAmount: string;
                supplyCollateralAmount: string;
                targetStableAmount: string;
            };
            CollateralAuctionAborted: {
                auctionId: string;
                collateralType: string;
                collateralAmount: string;
                targetStableAmount: string;
                refundRecipient: string;
            };
        };
    };
    /**
     * Lookup125: module_loans::module::Event<T>
     **/
    ModuleLoansModuleEvent: {
        _enum: {
            PositionUpdated: {
                owner: string;
                collateralType: string;
                collateralAdjustment: string;
                debitAdjustment: string;
            };
            ConfiscateCollateralAndDebit: {
                owner: string;
                collateralType: string;
                confiscatedCollateralAmount: string;
                deductDebitAmount: string;
            };
            TransferLoan: {
                from: string;
                to: string;
                currencyId: string;
            };
        };
    };
    /**
     * Lookup127: module_funan::module::Event<T>
     **/
    ModuleFunanModuleEvent: {
        _enum: {
            Authorization: {
                authorizer: string;
                authorizee: string;
                collateralType: string;
            };
            UnAuthorization: {
                authorizer: string;
                authorizee: string;
                collateralType: string;
            };
            UnAuthorizationAll: {
                authorizer: string;
            };
            TransferDebit: {
                fromCurrency: string;
                toCurrency: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup128: module_cdp_treasury::module::Event<T>
     **/
    ModuleCdpTreasuryModuleEvent: {
        _enum: {
            ExpectedCollateralAuctionSizeUpdated: {
                collateralType: string;
                newSize: string;
            };
        };
    };
    /**
     * Lookup129: module_cdp_engine::module::Event<T>
     **/
    ModuleCdpEngineModuleEvent: {
        _enum: {
            LiquidateUnsafeCDP: {
                collateralType: string;
                owner: string;
                collateralAmount: string;
                badDebtValue: string;
                targetAmount: string;
            };
            SettleCDPInDebit: {
                collateralType: string;
                owner: string;
            };
            CloseCDPInDebitByDEX: {
                collateralType: string;
                owner: string;
                soldCollateralAmount: string;
                refundCollateralAmount: string;
                debitValue: string;
            };
            InterestRatePerSecUpdated: {
                collateralType: string;
                newInterestRatePerSec: string;
            };
            LiquidationRatioUpdated: {
                collateralType: string;
                newLiquidationRatio: string;
            };
            LiquidationPenaltyUpdated: {
                collateralType: string;
                newLiquidationPenalty: string;
            };
            RequiredCollateralRatioUpdated: {
                collateralType: string;
                newRequiredCollateralRatio: string;
            };
            MaximumTotalDebitValueUpdated: {
                collateralType: string;
                newTotalDebitValue: string;
            };
        };
    };
    /**
     * Lookup131: module_emergency_shutdown::module::Event<T>
     **/
    ModuleEmergencyShutdownModuleEvent: {
        _enum: {
            Shutdown: {
                blockNumber: string;
            };
            OpenRefund: {
                blockNumber: string;
            };
            Refund: {
                who: string;
                stableCoinAmount: string;
                refundList: string;
            };
        };
    };
    /**
     * Lookup134: module_incentives::module::Event<T>
     **/
    ModuleIncentivesModuleEvent: {
        _enum: {
            DepositDexShare: {
                who: string;
                dexShareType: string;
                deposit: string;
            };
            WithdrawDexShare: {
                who: string;
                dexShareType: string;
                withdraw: string;
            };
            ClaimRewards: {
                who: string;
                pool: string;
                rewardCurrencyId: string;
                actualAmount: string;
                deductionAmount: string;
            };
            IncentiveRewardAmountUpdated: {
                pool: string;
                rewardCurrencyId: string;
                rewardAmountPerPeriod: string;
            };
            SavingRewardRateUpdated: {
                pool: string;
                rewardRatePerPeriod: string;
            };
            ClaimRewardDeductionRateUpdated: {
                pool: string;
                deductionRate: string;
            };
        };
    };
    /**
     * Lookup135: module_support::incentives::PoolId
     **/
    ModuleSupportIncentivesPoolId: {
        _enum: {
            Loans: string;
            Dex: string;
        };
    };
    /**
     * Lookup136: module_nft::module::Event<T>
     **/
    ModuleNftModuleEvent: {
        _enum: {
            CreatedClass: {
                owner: string;
                classId: string;
            };
            MintedToken: {
                from: string;
                to: string;
                classId: string;
                quantity: string;
            };
            TransferredToken: {
                from: string;
                to: string;
                classId: string;
                tokenId: string;
            };
            BurnedToken: {
                owner: string;
                classId: string;
                tokenId: string;
            };
            BurnedTokenWithRemark: {
                owner: string;
                classId: string;
                tokenId: string;
                remarkHash: string;
            };
            DestroyedClass: {
                owner: string;
                classId: string;
            };
        };
    };
    /**
     * Lookup137: module_asset_registry::module::Event<T>
     **/
    ModuleAssetRegistryModuleEvent: {
        _enum: {
            AssetRegistered: {
                assetId: string;
                metadata: string;
            };
            AssetUpdated: {
                assetId: string;
                metadata: string;
            };
        };
    };
    /**
     * Lookup138: selendra_primitives::currency::AssetIds
     **/
    SelendraPrimitivesCurrencyAssetIds: {
        _enum: {
            Erc20: string;
            StableAssetId: string;
            ForeignAssetId: string;
            NativeAssetId: string;
        };
    };
    /**
     * Lookup139: selendra_primitives::currency::AssetMetadata<Balance>
     **/
    SelendraPrimitivesCurrencyAssetMetadata: {
        name: string;
        symbol: string;
        decimals: string;
        minimalBalance: string;
    };
    /**
     * Lookup140: module_evm::module::Event<T>
     **/
    ModuleEvmModuleEvent: {
        _enum: {
            Created: {
                from: string;
                contract: string;
                logs: string;
                usedGas: string;
                usedStorage: string;
            };
            CreatedFailed: {
                from: string;
                contract: string;
                exitReason: string;
                logs: string;
                usedGas: string;
                usedStorage: string;
            };
            Executed: {
                from: string;
                contract: string;
                logs: string;
                usedGas: string;
                usedStorage: string;
            };
            ExecutedFailed: {
                from: string;
                contract: string;
                exitReason: string;
                output: string;
                logs: string;
                usedGas: string;
                usedStorage: string;
            };
            TransferredMaintainer: {
                contract: string;
                newMaintainer: string;
            };
            ContractDevelopmentEnabled: {
                who: string;
            };
            ContractDevelopmentDisabled: {
                who: string;
            };
            ContractPublished: {
                contract: string;
            };
            ContractSetCode: {
                contract: string;
            };
            ContractSelfdestructed: {
                contract: string;
            };
        };
    };
    /**
     * Lookup142: ethereum::log::Log
     **/
    EthereumLog: {
        address: string;
        topics: string;
        data: string;
    };
    /**
     * Lookup145: evm_core::error::ExitReason
     **/
    EvmCoreErrorExitReason: {
        _enum: {
            Succeed: string;
            Error: string;
            Revert: string;
            Fatal: string;
        };
    };
    /**
     * Lookup146: evm_core::error::ExitSucceed
     **/
    EvmCoreErrorExitSucceed: {
        _enum: string[];
    };
    /**
     * Lookup147: evm_core::error::ExitError
     **/
    EvmCoreErrorExitError: {
        _enum: {
            StackUnderflow: string;
            StackOverflow: string;
            InvalidJump: string;
            InvalidRange: string;
            DesignatedInvalid: string;
            CallTooDeep: string;
            CreateCollision: string;
            CreateContractLimit: string;
            OutOfOffset: string;
            OutOfGas: string;
            OutOfFund: string;
            PCUnderflow: string;
            CreateEmpty: string;
            Other: string;
            InvalidCode: string;
        };
    };
    /**
     * Lookup150: evm_core::error::ExitRevert
     **/
    EvmCoreErrorExitRevert: {
        _enum: string[];
    };
    /**
     * Lookup151: evm_core::error::ExitFatal
     **/
    EvmCoreErrorExitFatal: {
        _enum: {
            NotSupported: string;
            UnhandledInterrupt: string;
            CallErrorAsFatal: string;
            Other: string;
        };
    };
    /**
     * Lookup152: module_evm_accounts::module::Event<T>
     **/
    ModuleEvmAccountsModuleEvent: {
        _enum: {
            ClaimAccount: {
                accountId: string;
                evmAddress: string;
            };
        };
    };
    /**
     * Lookup153: module_stable_asset::pallet::Event<T>
     **/
    ModuleStableAssetEvent: {
        _enum: {
            CreatePool: {
                poolId: string;
                a: string;
                swapId: string;
                palletId: string;
            };
            Minted: {
                minter: string;
                poolId: string;
                a: string;
                inputAmounts: string;
                minOutputAmount: string;
                balances: string;
                totalSupply: string;
                feeAmount: string;
                outputAmount: string;
            };
            TokenSwapped: {
                swapper: string;
                poolId: string;
                a: string;
                inputAsset: string;
                outputAsset: string;
                inputAmount: string;
                minOutputAmount: string;
                balances: string;
                totalSupply: string;
                outputAmount: string;
            };
            RedeemedProportion: {
                redeemer: string;
                poolId: string;
                a: string;
                inputAmount: string;
                minOutputAmounts: string;
                balances: string;
                totalSupply: string;
                feeAmount: string;
                outputAmounts: string;
            };
            RedeemedSingle: {
                redeemer: string;
                poolId: string;
                a: string;
                inputAmount: string;
                outputAsset: string;
                minOutputAmount: string;
                balances: string;
                totalSupply: string;
                feeAmount: string;
                outputAmount: string;
            };
            RedeemedMulti: {
                redeemer: string;
                poolId: string;
                a: string;
                outputAmounts: string;
                maxInputAmount: string;
                balances: string;
                totalSupply: string;
                feeAmount: string;
                inputAmount: string;
            };
            BalanceUpdated: {
                poolId: string;
                oldBalances: string;
                newBalances: string;
            };
            YieldCollected: {
                poolId: string;
                a: string;
                oldTotalSupply: string;
                newTotalSupply: string;
                who: string;
                amount: string;
            };
            FeeCollected: {
                poolId: string;
                a: string;
                oldBalances: string;
                newBalances: string;
                oldTotalSupply: string;
                newTotalSupply: string;
                who: string;
                amount: string;
            };
            AModified: {
                poolId: string;
                value: string;
                time: string;
            };
        };
    };
    /**
     * Lookup154: pallet_sudo::pallet::Event<T>
     **/
    PalletSudoEvent: {
        _enum: {
            Sudid: {
                sudoResult: string;
            };
            KeyChanged: {
                oldSudoer: string;
            };
            SudoAsDone: {
                sudoResult: string;
            };
        };
    };
    /**
     * Lookup155: frame_system::Phase
     **/
    FrameSystemPhase: {
        _enum: {
            ApplyExtrinsic: string;
            Finalization: string;
            Initialization: string;
        };
    };
    /**
     * Lookup157: frame_system::LastRuntimeUpgradeInfo
     **/
    FrameSystemLastRuntimeUpgradeInfo: {
        specVersion: string;
        specName: string;
    };
    /**
     * Lookup159: frame_system::pallet::Call<T>
     **/
    FrameSystemCall: {
        _enum: {
            fill_block: {
                ratio: string;
            };
            remark: {
                remark: string;
            };
            set_heap_pages: {
                pages: string;
            };
            set_code: {
                code: string;
            };
            set_code_without_checks: {
                code: string;
            };
            set_storage: {
                items: string;
            };
            kill_storage: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
            kill_prefix: {
                prefix: string;
                subkeys: string;
            };
            remark_with_event: {
                remark: string;
            };
        };
    };
    /**
     * Lookup163: frame_system::limits::BlockWeights
     **/
    FrameSystemLimitsBlockWeights: {
        baseBlock: string;
        maxBlock: string;
        perClass: string;
    };
    /**
     * Lookup164: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
     **/
    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup165: frame_system::limits::WeightsPerClass
     **/
    FrameSystemLimitsWeightsPerClass: {
        baseExtrinsic: string;
        maxExtrinsic: string;
        maxTotal: string;
        reserved: string;
    };
    /**
     * Lookup167: frame_system::limits::BlockLength
     **/
    FrameSystemLimitsBlockLength: {
        max: string;
    };
    /**
     * Lookup168: frame_support::weights::PerDispatchClass<T>
     **/
    FrameSupportWeightsPerDispatchClassU32: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup169: frame_support::weights::RuntimeDbWeight
     **/
    FrameSupportWeightsRuntimeDbWeight: {
        read: string;
        write: string;
    };
    /**
     * Lookup170: sp_version::RuntimeVersion
     **/
    SpVersionRuntimeVersion: {
        specName: string;
        implName: string;
        authoringVersion: string;
        specVersion: string;
        implVersion: string;
        apis: string;
        transactionVersion: string;
        stateVersion: string;
    };
    /**
     * Lookup174: frame_system::pallet::Error<T>
     **/
    FrameSystemError: {
        _enum: string[];
    };
    /**
     * Lookup175: pallet_timestamp::pallet::Call<T>
     **/
    PalletTimestampCall: {
        _enum: {
            set: {
                now: string;
            };
        };
    };
    /**
     * Lookup179: pallet_scheduler::ScheduledV3<frame_support::traits::schedule::MaybeHashed<selendra_runtime::Call, primitive_types::H256>, BlockNumber, selendra_runtime::OriginCaller, sp_core::crypto::AccountId32>
     **/
    PalletSchedulerScheduledV3: {
        maybeId: string;
        priority: string;
        call: string;
        maybePeriodic: string;
        origin: string;
    };
    /**
     * Lookup180: frame_support::traits::schedule::MaybeHashed<selendra_runtime::Call, primitive_types::H256>
     **/
    FrameSupportScheduleMaybeHashed: {
        _enum: {
            Value: string;
            Hash: string;
        };
    };
    /**
     * Lookup182: pallet_scheduler::pallet::Call<T>
     **/
    PalletSchedulerCall: {
        _enum: {
            schedule: {
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel: {
                when: string;
                index: string;
            };
            schedule_named: {
                id: string;
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel_named: {
                id: string;
            };
            schedule_after: {
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            schedule_named_after: {
                id: string;
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
        };
    };
    /**
     * Lookup184: module_transaction_pause::module::Call<T>
     **/
    ModuleTransactionPauseModuleCall: {
        _enum: {
            pause_transaction: {
                palletName: string;
                functionName: string;
            };
            unpause_transaction: {
                palletName: string;
                functionName: string;
            };
        };
    };
    /**
     * Lookup185: pallet_preimage::pallet::Call<T>
     **/
    PalletPreimageCall: {
        _enum: {
            note_preimage: {
                bytes: string;
            };
            unnote_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            request_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            unrequest_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup186: pallet_balances::pallet::Call<T, I>
     **/
    PalletBalancesCall: {
        _enum: {
            transfer: {
                dest: string;
                value: string;
            };
            set_balance: {
                who: string;
                newFree: string;
                newReserved: string;
            };
            force_transfer: {
                source: string;
                dest: string;
                value: string;
            };
            transfer_keep_alive: {
                dest: string;
                value: string;
            };
            transfer_all: {
                dest: string;
                keepAlive: string;
            };
            force_unreserve: {
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup188: module_currencies::module::Call<T>
     **/
    ModuleCurrenciesModuleCall: {
        _enum: {
            transfer: {
                dest: string;
                currencyId: string;
                amount: string;
            };
            transfer_native_currency: {
                dest: string;
                amount: string;
            };
            update_balance: {
                who: string;
                currencyId: string;
                amount: string;
            };
            sweep_dust: {
                currencyId: string;
                accounts: string;
            };
        };
    };
    /**
     * Lookup189: module_transaction_payment::module::Call<T>
     **/
    ModuleTransactionPaymentModuleCall: {
        _enum: {
            set_alternative_fee_swap_path: {
                feeSwapPath: string;
            };
            enable_charge_fee_pool: {
                currencyId: string;
                swapPath: string;
                poolSize: string;
                swapThreshold: string;
            };
            disable_charge_fee_pool: {
                currencyId: string;
            };
            with_fee_path: {
                feeSwapPath: string;
                call: string;
            };
            with_fee_currency: {
                currencyId: string;
                call: string;
            };
            with_fee_paid_by: {
                call: string;
                payerAddr: string;
                payerSig: string;
            };
        };
    };
    /**
     * Lookup191: sp_runtime::MultiSignature
     **/
    SpRuntimeMultiSignature: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
        };
    };
    /**
     * Lookup192: sp_core::ed25519::Signature
     **/
    SpCoreEd25519Signature: string;
    /**
     * Lookup194: sp_core::sr25519::Signature
     **/
    SpCoreSr25519Signature: string;
    /**
     * Lookup195: sp_core::ecdsa::Signature
     **/
    SpCoreEcdsaSignature: string;
    /**
     * Lookup197: pallet_treasury::pallet::Call<T, I>
     **/
    PalletTreasuryCall: {
        _enum: {
            propose_spend: {
                value: string;
                beneficiary: string;
            };
            reject_proposal: {
                proposalId: string;
            };
            approve_proposal: {
                proposalId: string;
            };
            remove_approval: {
                proposalId: string;
            };
        };
    };
    /**
     * Lookup198: pallet_bounties::pallet::Call<T>
     **/
    PalletBountiesCall: {
        _enum: {
            propose_bounty: {
                value: string;
                description: string;
            };
            approve_bounty: {
                bountyId: string;
            };
            propose_curator: {
                bountyId: string;
                curator: string;
                fee: string;
            };
            unassign_curator: {
                bountyId: string;
            };
            accept_curator: {
                bountyId: string;
            };
            award_bounty: {
                bountyId: string;
                beneficiary: string;
            };
            claim_bounty: {
                bountyId: string;
            };
            close_bounty: {
                bountyId: string;
            };
            extend_bounty_expiry: {
                bountyId: string;
                remark: string;
            };
        };
    };
    /**
     * Lookup199: pallet_tips::pallet::Call<T>
     **/
    PalletTipsCall: {
        _enum: {
            report_awesome: {
                reason: string;
                who: string;
            };
            retract_tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            tip_new: {
                reason: string;
                who: string;
                tipValue: string;
            };
            tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                tipValue: string;
            };
            close_tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            slash_tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup200: pallet_utility::pallet::Call<T>
     **/
    PalletUtilityCall: {
        _enum: {
            batch: {
                calls: string;
            };
            as_derivative: {
                index: string;
                call: string;
            };
            batch_all: {
                calls: string;
            };
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
            force_batch: {
                calls: string;
            };
        };
    };
    /**
     * Lookup202: pallet_multisig::pallet::Call<T>
     **/
    PalletMultisigCall: {
        _enum: {
            as_multi_threshold_1: {
                otherSignatories: string;
                call: string;
            };
            as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                call: string;
                storeCall: string;
                maxWeight: string;
            };
            approve_as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                callHash: string;
                maxWeight: string;
            };
            cancel_as_multi: {
                threshold: string;
                otherSignatories: string;
                timepoint: string;
                callHash: string;
            };
        };
    };
    /**
     * Lookup205: pallet_recovery::pallet::Call<T>
     **/
    PalletRecoveryCall: {
        _enum: {
            as_recovered: {
                account: string;
                call: string;
            };
            set_recovered: {
                lost: string;
                rescuer: string;
            };
            create_recovery: {
                friends: string;
                threshold: string;
                delayPeriod: string;
            };
            initiate_recovery: {
                account: string;
            };
            vouch_recovery: {
                lost: string;
                rescuer: string;
            };
            claim_recovery: {
                account: string;
            };
            close_recovery: {
                rescuer: string;
            };
            remove_recovery: string;
            cancel_recovered: {
                account: string;
            };
        };
    };
    /**
     * Lookup206: pallet_proxy::pallet::Call<T>
     **/
    PalletProxyCall: {
        _enum: {
            proxy: {
                real: string;
                forceProxyType: string;
                call: string;
            };
            add_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxies: string;
            anonymous: {
                proxyType: string;
                delay: string;
                index: string;
            };
            kill_anonymous: {
                spawner: string;
                proxyType: string;
                index: string;
                height: string;
                extIndex: string;
            };
            announce: {
                real: string;
                callHash: string;
            };
            remove_announcement: {
                real: string;
                callHash: string;
            };
            reject_announcement: {
                delegate: string;
                callHash: string;
            };
            proxy_announced: {
                delegate: string;
                real: string;
                forceProxyType: string;
                call: string;
            };
        };
    };
    /**
     * Lookup208: module_idle_scheduler::module::Call<T>
     **/
    ModuleIdleSchedulerModuleCall: {
        _enum: {
            schedule_task: {
                task: string;
            };
        };
    };
    /**
     * Lookup209: pallet_indices::pallet::Call<T>
     **/
    PalletIndicesCall: {
        _enum: {
            claim: {
                index: string;
            };
            transfer: {
                _alias: {
                    new_: string;
                };
                new_: string;
                index: string;
            };
            free: {
                index: string;
            };
            force_transfer: {
                _alias: {
                    new_: string;
                };
                new_: string;
                index: string;
                freeze: string;
            };
            freeze: {
                index: string;
            };
        };
    };
    /**
     * Lookup210: pallet_identity::pallet::Call<T>
     **/
    PalletIdentityCall: {
        _enum: {
            add_registrar: {
                account: string;
            };
            set_identity: {
                info: string;
            };
            set_subs: {
                subs: string;
            };
            clear_identity: string;
            request_judgement: {
                regIndex: string;
                maxFee: string;
            };
            cancel_request: {
                regIndex: string;
            };
            set_fee: {
                index: string;
                fee: string;
            };
            set_account_id: {
                _alias: {
                    new_: string;
                };
                index: string;
                new_: string;
            };
            set_fields: {
                index: string;
                fields: string;
            };
            provide_judgement: {
                regIndex: string;
                target: string;
                judgement: string;
            };
            kill_identity: {
                target: string;
            };
            add_sub: {
                sub: string;
                data: string;
            };
            rename_sub: {
                sub: string;
                data: string;
            };
            remove_sub: {
                sub: string;
            };
            quit_sub: string;
        };
    };
    /**
     * Lookup211: pallet_identity::types::IdentityInfo<FieldLimit>
     **/
    PalletIdentityIdentityInfo: {
        additional: string;
        display: string;
        legal: string;
        web: string;
        riot: string;
        email: string;
        pgpFingerprint: string;
        image: string;
        twitter: string;
    };
    /**
     * Lookup247: pallet_identity::types::BitFlags<pallet_identity::types::IdentityField>
     **/
    PalletIdentityBitFlags: {
        _bitLength: number;
        Display: number;
        Legal: number;
        Web: number;
        Riot: number;
        Email: number;
        PgpFingerprint: number;
        Image: number;
        Twitter: number;
    };
    /**
     * Lookup248: pallet_identity::types::IdentityField
     **/
    PalletIdentityIdentityField: {
        _enum: string[];
    };
    /**
     * Lookup249: pallet_identity::types::Judgement<Balance>
     **/
    PalletIdentityJudgement: {
        _enum: {
            Unknown: string;
            FeePaid: string;
            Reasonable: string;
            KnownGood: string;
            OutOfDate: string;
            LowQuality: string;
            Erroneous: string;
        };
    };
    /**
     * Lookup250: pallet_authorship::pallet::Call<T>
     **/
    PalletAuthorshipCall: {
        _enum: {
            set_uncles: {
                newUncles: string;
            };
        };
    };
    /**
     * Lookup252: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
     **/
    SpRuntimeHeader: {
        parentHash: string;
        number: string;
        stateRoot: string;
        extrinsicsRoot: string;
        digest: string;
    };
    /**
     * Lookup253: sp_runtime::traits::BlakeTwo256
     **/
    SpRuntimeBlakeTwo256: string;
    /**
     * Lookup254: pallet_babe::pallet::Call<T>
     **/
    PalletBabeCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            plan_config_change: {
                config: string;
            };
        };
    };
    /**
     * Lookup255: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
     **/
    SpConsensusSlotsEquivocationProof: {
        offender: string;
        slot: string;
        firstHeader: string;
        secondHeader: string;
    };
    /**
     * Lookup256: sp_consensus_babe::app::Public
     **/
    SpConsensusBabeAppPublic: string;
    /**
     * Lookup258: sp_session::MembershipProof
     **/
    SpSessionMembershipProof: {
        session: string;
        trieNodes: string;
        validatorCount: string;
    };
    /**
     * Lookup259: sp_consensus_babe::digests::NextConfigDescriptor
     **/
    SpConsensusBabeDigestsNextConfigDescriptor: {
        _enum: {
            __Unused0: string;
            V1: {
                c: string;
                allowedSlots: string;
            };
        };
    };
    /**
     * Lookup261: sp_consensus_babe::AllowedSlots
     **/
    SpConsensusBabeAllowedSlots: {
        _enum: string[];
    };
    /**
     * Lookup262: pallet_staking::pallet::pallet::Call<T>
     **/
    PalletStakingPalletCall: {
        _enum: {
            bond: {
                controller: string;
                value: string;
                payee: string;
            };
            bond_extra: {
                maxAdditional: string;
            };
            unbond: {
                value: string;
            };
            withdraw_unbonded: {
                numSlashingSpans: string;
            };
            validate: {
                prefs: string;
            };
            nominate: {
                targets: string;
            };
            chill: string;
            set_payee: {
                payee: string;
            };
            set_controller: {
                controller: string;
            };
            set_validator_count: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            increase_validator_count: {
                additional: string;
            };
            scale_validator_count: {
                factor: string;
            };
            force_no_eras: string;
            force_new_era: string;
            set_invulnerables: {
                invulnerables: string;
            };
            force_unstake: {
                stash: string;
                numSlashingSpans: string;
            };
            force_new_era_always: string;
            cancel_deferred_slash: {
                era: string;
                slashIndices: string;
            };
            payout_stakers: {
                validatorStash: string;
                era: string;
            };
            rebond: {
                value: string;
            };
            set_history_depth: {
                newHistoryDepth: string;
                eraItemsDeleted: string;
            };
            reap_stash: {
                stash: string;
                numSlashingSpans: string;
            };
            kick: {
                who: string;
            };
            set_staking_configs: {
                minNominatorBond: string;
                minValidatorBond: string;
                maxNominatorCount: string;
                maxValidatorCount: string;
                chillThreshold: string;
                minCommission: string;
            };
            chill_other: {
                controller: string;
            };
            force_apply_min_commission: {
                validatorStash: string;
            };
        };
    };
    /**
     * Lookup263: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
     **/
    PalletStakingRewardDestination: {
        _enum: {
            Staked: string;
            Stash: string;
            Controller: string;
            Account: string;
            None: string;
        };
    };
    /**
     * Lookup267: pallet_staking::pallet::pallet::ConfigOp<T>
     **/
    PalletStakingPalletConfigOpU128: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup268: pallet_staking::pallet::pallet::ConfigOp<T>
     **/
    PalletStakingPalletConfigOpU32: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup269: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
     **/
    PalletStakingPalletConfigOpPercent: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup270: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
     **/
    PalletStakingPalletConfigOpPerbill: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup271: pallet_session::pallet::Call<T>
     **/
    PalletSessionCall: {
        _enum: {
            set_keys: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
                proof: string;
            };
            purge_keys: string;
        };
    };
    /**
     * Lookup272: selendra_runtime::SessionKeys
     **/
    SelendraRuntimeSessionKeys: {
        babe: string;
        grandpa: string;
        imOnline: string;
        authorityDiscovery: string;
    };
    /**
     * Lookup273: sp_authority_discovery::app::Public
     **/
    SpAuthorityDiscoveryAppPublic: string;
    /**
     * Lookup274: pallet_grandpa::pallet::Call<T>
     **/
    PalletGrandpaCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            note_stalled: {
                delay: string;
                bestFinalizedBlockNumber: string;
            };
        };
    };
    /**
     * Lookup275: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
     **/
    SpFinalityGrandpaEquivocationProof: {
        setId: string;
        equivocation: string;
    };
    /**
     * Lookup276: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
     **/
    SpFinalityGrandpaEquivocation: {
        _enum: {
            Prevote: string;
            Precommit: string;
        };
    };
    /**
     * Lookup277: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrevote: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup278: finality_grandpa::Prevote<primitive_types::H256, N>
     **/
    FinalityGrandpaPrevote: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup279: sp_finality_grandpa::app::Signature
     **/
    SpFinalityGrandpaAppSignature: string;
    /**
     * Lookup281: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrecommit: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup282: finality_grandpa::Precommit<primitive_types::H256, N>
     **/
    FinalityGrandpaPrecommit: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup284: pallet_im_online::pallet::Call<T>
     **/
    PalletImOnlineCall: {
        _enum: {
            heartbeat: {
                heartbeat: string;
                signature: string;
            };
        };
    };
    /**
     * Lookup285: pallet_im_online::Heartbeat<BlockNumber>
     **/
    PalletImOnlineHeartbeat: {
        blockNumber: string;
        networkState: string;
        sessionIndex: string;
        authorityIndex: string;
        validatorsLen: string;
    };
    /**
     * Lookup286: sp_core::offchain::OpaqueNetworkState
     **/
    SpCoreOffchainOpaqueNetworkState: {
        peerId: string;
        externalAddresses: string;
    };
    /**
     * Lookup290: pallet_im_online::sr25519::app_sr25519::Signature
     **/
    PalletImOnlineSr25519AppSr25519Signature: string;
    /**
     * Lookup291: pallet_election_provider_multi_phase::pallet::Call<T>
     **/
    PalletElectionProviderMultiPhaseCall: {
        _enum: {
            submit_unsigned: {
                rawSolution: string;
                witness: string;
            };
            set_minimum_untrusted_score: {
                maybeNextScore: string;
            };
            set_emergency_election_result: {
                supports: string;
            };
            submit: {
                rawSolution: string;
            };
            governance_fallback: {
                maybeMaxVoters: string;
                maybeMaxTargets: string;
            };
        };
    };
    /**
     * Lookup292: pallet_election_provider_multi_phase::RawSolution<selendra_runtime::config::consensus_config::NposSolution16>
     **/
    PalletElectionProviderMultiPhaseRawSolution: {
        solution: string;
        score: string;
        round: string;
    };
    /**
     * Lookup293: selendra_runtime::config::consensus_config::NposSolution16
     **/
    SelendraRuntimeConfigConsensusConfigNposSolution16: {
        votes1: string;
        votes2: string;
        votes3: string;
        votes4: string;
        votes5: string;
        votes6: string;
        votes7: string;
        votes8: string;
        votes9: string;
        votes10: string;
        votes11: string;
        votes12: string;
        votes13: string;
        votes14: string;
        votes15: string;
        votes16: string;
    };
    /**
     * Lookup344: sp_npos_elections::ElectionScore
     **/
    SpNposElectionsElectionScore: {
        minimalStake: string;
        sumStake: string;
        sumStakeSquared: string;
    };
    /**
     * Lookup345: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
     **/
    PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
        voters: string;
        targets: string;
    };
    /**
     * Lookup349: sp_npos_elections::Support<sp_core::crypto::AccountId32>
     **/
    SpNposElectionsSupport: {
        total: string;
        voters: string;
    };
    /**
     * Lookup351: pallet_bags_list::pallet::Call<T, I>
     **/
    PalletBagsListCall: {
        _enum: {
            rebag: {
                dislocated: string;
            };
            put_in_front_of: {
                lighter: string;
            };
        };
    };
    /**
     * Lookup352: pallet_nomination_pools::pallet::Call<T>
     **/
    PalletNominationPoolsCall: {
        _enum: {
            join: {
                amount: string;
                poolId: string;
            };
            bond_extra: {
                extra: string;
            };
            claim_payout: string;
            unbond: {
                memberAccount: string;
                unbondingPoints: string;
            };
            pool_withdraw_unbonded: {
                poolId: string;
                numSlashingSpans: string;
            };
            withdraw_unbonded: {
                memberAccount: string;
                numSlashingSpans: string;
            };
            create: {
                amount: string;
                root: string;
                nominator: string;
                stateToggler: string;
            };
            nominate: {
                poolId: string;
                validators: string;
            };
            set_state: {
                poolId: string;
                state: string;
            };
            set_metadata: {
                poolId: string;
                metadata: string;
            };
            set_configs: {
                minJoinBond: string;
                minCreateBond: string;
                maxPools: string;
                maxMembers: string;
                maxMembersPerPool: string;
            };
            update_roles: {
                poolId: string;
                newRoot: string;
                newNominator: string;
                newStateToggler: string;
            };
        };
    };
    /**
     * Lookup353: pallet_nomination_pools::BondExtra<Balance>
     **/
    PalletNominationPoolsBondExtra: {
        _enum: {
            FreeBalance: string;
            Rewards: string;
        };
    };
    /**
     * Lookup354: pallet_nomination_pools::ConfigOp<T>
     **/
    PalletNominationPoolsConfigOpU128: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup355: pallet_nomination_pools::ConfigOp<T>
     **/
    PalletNominationPoolsConfigOpU32: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup356: pallet_nomination_pools::ConfigOp<sp_core::crypto::AccountId32>
     **/
    PalletNominationPoolsConfigOpAccountId32: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup357: orml_authority::module::Call<T>
     **/
    OrmlAuthorityModuleCall: {
        _enum: {
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
            schedule_dispatch: {
                when: string;
                priority: string;
                withDelayedOrigin: string;
                call: string;
            };
            fast_track_scheduled_dispatch: {
                initialOrigin: string;
                taskId: string;
                when: string;
            };
            delay_scheduled_dispatch: {
                initialOrigin: string;
                taskId: string;
                additionalDelay: string;
            };
            cancel_scheduled_dispatch: {
                initialOrigin: string;
                taskId: string;
            };
            authorize_call: {
                call: string;
                caller: string;
            };
            remove_authorized_call: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            trigger_call: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                callWeightBound: string;
            };
        };
    };
    /**
     * Lookup358: selendra_primitives::AuthoritysOriginId
     **/
    SelendraPrimitivesAuthoritysOriginId: {
        _enum: string[];
    };
    /**
     * Lookup359: frame_support::traits::schedule::DispatchTime<BlockNumber>
     **/
    FrameSupportScheduleDispatchTime: {
        _enum: {
            At: string;
            After: string;
        };
    };
    /**
     * Lookup360: pallet_collective::pallet::Call<T, I>
     **/
    PalletCollectiveCall: {
        _enum: {
            set_members: {
                newMembers: string;
                prime: string;
                oldCount: string;
            };
            execute: {
                proposal: string;
                lengthBound: string;
            };
            propose: {
                threshold: string;
                proposal: string;
                lengthBound: string;
            };
            vote: {
                proposal: string;
                index: string;
                approve: string;
            };
            close: {
                proposalHash: string;
                index: string;
                proposalWeightBound: string;
                lengthBound: string;
            };
            disapprove_proposal: {
                proposalHash: string;
            };
        };
    };
    /**
     * Lookup361: pallet_membership::pallet::Call<T, I>
     **/
    PalletMembershipCall: {
        _enum: {
            add_member: {
                who: string;
            };
            remove_member: {
                who: string;
            };
            swap_member: {
                remove: string;
                add: string;
            };
            reset_members: {
                members: string;
            };
            change_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_prime: {
                who: string;
            };
            clear_prime: string;
        };
    };
    /**
     * Lookup366: pallet_elections_phragmen::pallet::Call<T>
     **/
    PalletElectionsPhragmenCall: {
        _enum: {
            vote: {
                votes: string;
                value: string;
            };
            remove_voter: string;
            submit_candidacy: {
                candidateCount: string;
            };
            renounce_candidacy: {
                renouncing: string;
            };
            remove_member: {
                who: string;
                hasReplacement: string;
            };
            clean_defunct_voters: {
                numVoters: string;
                numDefunct: string;
            };
        };
    };
    /**
     * Lookup367: pallet_elections_phragmen::Renouncing
     **/
    PalletElectionsPhragmenRenouncing: {
        _enum: {
            Member: string;
            RunnerUp: string;
            Candidate: string;
        };
    };
    /**
     * Lookup368: pallet_democracy::pallet::Call<T>
     **/
    PalletDemocracyCall: {
        _enum: {
            propose: {
                proposalHash: string;
                value: string;
            };
            second: {
                proposal: string;
                secondsUpperBound: string;
            };
            vote: {
                refIndex: string;
                vote: string;
            };
            emergency_cancel: {
                refIndex: string;
            };
            external_propose: {
                proposalHash: string;
            };
            external_propose_majority: {
                proposalHash: string;
            };
            external_propose_default: {
                proposalHash: string;
            };
            fast_track: {
                proposalHash: string;
                votingPeriod: string;
                delay: string;
            };
            veto_external: {
                proposalHash: string;
            };
            cancel_referendum: {
                refIndex: string;
            };
            cancel_queued: {
                which: string;
            };
            delegate: {
                to: string;
                conviction: string;
                balance: string;
            };
            undelegate: string;
            clear_public_proposals: string;
            note_preimage: {
                encodedProposal: string;
            };
            note_preimage_operational: {
                encodedProposal: string;
            };
            note_imminent_preimage: {
                encodedProposal: string;
            };
            note_imminent_preimage_operational: {
                encodedProposal: string;
            };
            reap_preimage: {
                proposalHash: string;
                proposalLenUpperBound: string;
            };
            unlock: {
                target: string;
            };
            remove_vote: {
                index: string;
            };
            remove_other_vote: {
                target: string;
                index: string;
            };
            enact_proposal: {
                proposalHash: string;
                index: string;
            };
            blacklist: {
                proposalHash: string;
                maybeRefIndex: string;
            };
            cancel_proposal: {
                propIndex: string;
            };
        };
    };
    /**
     * Lookup369: pallet_democracy::conviction::Conviction
     **/
    PalletDemocracyConviction: {
        _enum: string[];
    };
    /**
     * Lookup370: orml_oracle::module::Call<T, I>
     **/
    OrmlOracleModuleCall: {
        _enum: {
            feed_values: {
                values: string;
            };
        };
    };
    /**
     * Lookup372: orml_auction::module::Call<T>
     **/
    OrmlAuctionModuleCall: {
        _enum: {
            bid: {
                id: string;
                value: string;
            };
        };
    };
    /**
     * Lookup373: orml_rewards::module::Call<T>
     **/
    OrmlRewardsModuleCall: string;
    /**
     * Lookup374: module_prices::module::Call<T>
     **/
    ModulePricesModuleCall: {
        _enum: {
            lock_price: {
                currencyId: string;
            };
            unlock_price: {
                currencyId: string;
            };
        };
    };
    /**
     * Lookup375: module_dex::module::Call<T>
     **/
    ModuleDexModuleCall: {
        _enum: {
            swap_with_exact_supply: {
                path: string;
                supplyAmount: string;
                minTargetAmount: string;
            };
            swap_with_exact_target: {
                path: string;
                targetAmount: string;
                maxSupplyAmount: string;
            };
            add_liquidity: {
                currencyIdA: string;
                currencyIdB: string;
                maxAmountA: string;
                maxAmountB: string;
                minShareIncrement: string;
                stakeIncrementShare: string;
            };
            add_provision: {
                currencyIdA: string;
                currencyIdB: string;
                amountA: string;
                amountB: string;
            };
            claim_dex_share: {
                owner: string;
                currencyIdA: string;
                currencyIdB: string;
            };
            remove_liquidity: {
                currencyIdA: string;
                currencyIdB: string;
                removeShare: string;
                minWithdrawnA: string;
                minWithdrawnB: string;
                byUnstake: string;
            };
            list_provisioning: {
                currencyIdA: string;
                currencyIdB: string;
                minContributionA: string;
                minContributionB: string;
                targetProvisionA: string;
                targetProvisionB: string;
                notBefore: string;
            };
            update_provisioning_parameters: {
                currencyIdA: string;
                currencyIdB: string;
                minContributionA: string;
                minContributionB: string;
                targetProvisionA: string;
                targetProvisionB: string;
                notBefore: string;
            };
            end_provisioning: {
                currencyIdA: string;
                currencyIdB: string;
            };
            enable_trading_pair: {
                currencyIdA: string;
                currencyIdB: string;
            };
            disable_trading_pair: {
                currencyIdA: string;
                currencyIdB: string;
            };
            refund_provision: {
                owner: string;
                currencyIdA: string;
                currencyIdB: string;
            };
            abort_provisioning: {
                currencyIdA: string;
                currencyIdB: string;
            };
        };
    };
    /**
     * Lookup376: module_dex_oracle::module::Call<T>
     **/
    ModuleDexOracleModuleCall: {
        _enum: {
            enable_average_price: {
                currencyIdA: string;
                currencyIdB: string;
                interval: string;
            };
            disable_average_price: {
                currencyIdA: string;
                currencyIdB: string;
            };
            update_average_price_interval: {
                currencyIdA: string;
                currencyIdB: string;
                newInterval: string;
            };
        };
    };
    /**
     * Lookup377: module_aggregated_dex::module::Call<T>
     **/
    ModuleAggregatedDexModuleCall: {
        _enum: {
            swap_with_exact_supply: {
                paths: string;
                supplyAmount: string;
                minTargetAmount: string;
            };
            swap_with_exact_target: {
                paths: string;
                targetAmount: string;
                maxSupplyAmount: string;
            };
            update_aggregated_swap_paths: {
                updates: string;
            };
        };
    };
    /**
     * Lookup379: module_aggregated_dex::SwapPath
     **/
    ModuleAggregatedDexSwapPath: {
        _enum: {
            Dex: string;
            Taiga: string;
        };
    };
    /**
     * Lookup384: module_auction_manager::module::Call<T>
     **/
    ModuleAuctionManagerModuleCall: {
        _enum: {
            cancel: {
                id: string;
            };
        };
    };
    /**
     * Lookup385: module_loans::module::Call<T>
     **/
    ModuleLoansModuleCall: string;
    /**
     * Lookup386: module_funan::module::Call<T>
     **/
    ModuleFunanModuleCall: {
        _enum: {
            adjust_loan: {
                currencyId: string;
                collateralAdjustment: string;
                debitAdjustment: string;
            };
            close_loan_has_debit_by_dex: {
                currencyId: string;
                maxCollateralAmount: string;
            };
            transfer_loan_from: {
                currencyId: string;
                from: string;
            };
            authorize: {
                currencyId: string;
                to: string;
            };
            unauthorize: {
                currencyId: string;
                to: string;
            };
            unauthorize_all: string;
            expand_position_collateral: {
                currencyId: string;
                increaseDebitValue: string;
                minIncreaseCollateral: string;
            };
            shrink_position_debit: {
                currencyId: string;
                decreaseCollateral: string;
                minDecreaseDebitValue: string;
            };
            adjust_loan_by_debit_value: {
                currencyId: string;
                collateralAdjustment: string;
                debitValueAdjustment: string;
            };
            transfer_debit: {
                fromCurrency: string;
                toCurrency: string;
                debitTransfer: string;
            };
        };
    };
    /**
     * Lookup387: module_cdp_treasury::module::Call<T>
     **/
    ModuleCdpTreasuryModuleCall: {
        _enum: {
            extract_surplus_to_treasury: {
                amount: string;
            };
            auction_collateral: {
                currencyId: string;
                amount: string;
                target: string;
                splited: string;
            };
            exchange_collateral_to_stable: {
                currencyId: string;
                swapLimit: string;
            };
            set_expected_collateral_auction_size: {
                _alias: {
                    size_: string;
                };
                currencyId: string;
                size_: string;
            };
        };
    };
    /**
     * Lookup388: module_support::dex::SwapLimit<Balance>
     **/
    ModuleSupportDexSwapLimit: {
        _enum: {
            ExactSupply: string;
            ExactTarget: string;
        };
    };
    /**
     * Lookup389: module_cdp_engine::module::Call<T>
     **/
    ModuleCdpEngineModuleCall: {
        _enum: {
            liquidate: {
                currencyId: string;
                who: string;
            };
            settle: {
                currencyId: string;
                who: string;
            };
            set_collateral_params: {
                currencyId: string;
                interestRatePerSec: string;
                liquidationRatio: string;
                liquidationPenalty: string;
                requiredCollateralRatio: string;
                maximumTotalDebitValue: string;
            };
        };
    };
    /**
     * Lookup390: orml_traits::Change<Option<sp_arithmetic::fixed_point::FixedU128>>
     **/
    OrmlTraitsChangeOption: {
        _enum: {
            NoChange: string;
            NewValue: string;
        };
    };
    /**
     * Lookup391: orml_traits::Change<Value>
     **/
    OrmlTraitsChangeU128: {
        _enum: {
            NoChange: string;
            NewValue: string;
        };
    };
    /**
     * Lookup392: module_emergency_shutdown::module::Call<T>
     **/
    ModuleEmergencyShutdownModuleCall: {
        _enum: {
            emergency_shutdown: string;
            open_collateral_refund: string;
            refund_collaterals: {
                amount: string;
            };
        };
    };
    /**
     * Lookup393: module_incentives::module::Call<T>
     **/
    ModuleIncentivesModuleCall: {
        _enum: {
            deposit_dex_share: {
                lpCurrencyId: string;
                amount: string;
            };
            withdraw_dex_share: {
                lpCurrencyId: string;
                amount: string;
            };
            claim_rewards: {
                poolId: string;
            };
            update_incentive_rewards: {
                updates: string;
            };
            update_dex_saving_rewards: {
                updates: string;
            };
            update_claim_reward_deduction_rates: {
                updates: string;
            };
        };
    };
    /**
     * Lookup398: module_nft::module::Call<T>
     **/
    ModuleNftModuleCall: {
        _enum: {
            create_class: {
                metadata: string;
                properties: string;
                attributes: string;
            };
            mint: {
                to: string;
                classId: string;
                metadata: string;
                attributes: string;
                quantity: string;
            };
            transfer: {
                to: string;
                token: string;
            };
            burn: {
                token: string;
            };
            burn_with_remark: {
                token: string;
                remark: string;
            };
            destroy_class: {
                classId: string;
                dest: string;
            };
            update_class_properties: {
                classId: string;
                properties: string;
            };
        };
    };
    /**
     * Lookup400: selendra_primitives::nft::ClassProperty
     **/
    SelendraPrimitivesNftClassProperty: {
        _enum: string[];
    };
    /**
     * Lookup403: module_asset_registry::module::Call<T>
     **/
    ModuleAssetRegistryModuleCall: {
        _enum: {
            register_stable_asset: {
                metadata: string;
            };
            update_stable_asset: {
                stableAssetId: string;
                metadata: string;
            };
            register_erc20_asset: {
                contract: string;
                minimalBalance: string;
            };
            update_erc20_asset: {
                contract: string;
                metadata: string;
            };
            register_native_asset: {
                currencyId: string;
                metadata: string;
            };
            update_native_asset: {
                currencyId: string;
                metadata: string;
            };
        };
    };
    /**
     * Lookup404: module_evm::module::Call<T>
     **/
    ModuleEvmModuleCall: {
        _enum: {
            eth_call: {
                action: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
                validUntil: string;
            };
            call: {
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            scheduled_call: {
                from: string;
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            create: {
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            create2: {
                input: string;
                salt: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            create_nft_contract: {
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            create_predeploy_contract: {
                target: string;
                input: string;
                value: string;
                gasLimit: string;
                storageLimit: string;
                accessList: string;
            };
            transfer_maintainer: {
                contract: string;
                newMaintainer: string;
            };
            publish_contract: {
                contract: string;
            };
            publish_free: {
                contract: string;
            };
            enable_contract_development: string;
            disable_contract_development: string;
            set_code: {
                contract: string;
                code: string;
            };
            selfdestruct: {
                contract: string;
            };
        };
    };
    /**
     * Lookup405: ethereum::transaction::TransactionAction
     **/
    EthereumTransactionTransactionAction: {
        _enum: {
            Call: string;
            Create: string;
        };
    };
    /**
     * Lookup407: ethereum::transaction::AccessListItem
     **/
    EthereumTransactionAccessListItem: {
        address: string;
        storageKeys: string;
    };
    /**
     * Lookup408: module_evm_accounts::module::Call<T>
     **/
    ModuleEvmAccountsModuleCall: {
        _enum: {
            claim_account: {
                ethAddress: string;
                ethSignature: string;
            };
            claim_default_account: string;
        };
    };
    /**
     * Lookup409: module_stable_asset::pallet::Call<T>
     **/
    ModuleStableAssetCall: {
        _enum: {
            create_pool: {
                poolAsset: string;
                assets: string;
                precisions: string;
                mintFee: string;
                swapFee: string;
                redeemFee: string;
                initialA: string;
                feeRecipient: string;
                yieldRecipient: string;
                precision: string;
            };
            mint: {
                poolId: string;
                amounts: string;
                minMintAmount: string;
            };
            swap: {
                poolId: string;
                i: string;
                j: string;
                dx: string;
                minDy: string;
                assetLength: string;
            };
            redeem_proportion: {
                poolId: string;
                amount: string;
                minRedeemAmounts: string;
            };
            redeem_single: {
                poolId: string;
                amount: string;
                i: string;
                minRedeemAmount: string;
                assetLength: string;
            };
            redeem_multi: {
                poolId: string;
                amounts: string;
                maxRedeemAmount: string;
            };
            modify_a: {
                poolId: string;
                a: string;
                futureABlock: string;
            };
        };
    };
    /**
     * Lookup410: pallet_sudo::pallet::Call<T>
     **/
    PalletSudoCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            set_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /**
     * Lookup411: pallet_scheduler::pallet::Error<T>
     **/
    PalletSchedulerError: {
        _enum: string[];
    };
    /**
     * Lookup412: module_transaction_pause::module::Error<T>
     **/
    ModuleTransactionPauseModuleError: {
        _enum: string[];
    };
    /**
     * Lookup413: pallet_preimage::RequestStatus<sp_core::crypto::AccountId32, Balance>
     **/
    PalletPreimageRequestStatus: {
        _enum: {
            Unrequested: string;
            Requested: string;
        };
    };
    /**
     * Lookup416: pallet_preimage::pallet::Error<T>
     **/
    PalletPreimageError: {
        _enum: string[];
    };
    /**
     * Lookup418: pallet_balances::BalanceLock<Balance>
     **/
    PalletBalancesBalanceLock: {
        id: string;
        amount: string;
        reasons: string;
    };
    /**
     * Lookup419: pallet_balances::Reasons
     **/
    PalletBalancesReasons: {
        _enum: string[];
    };
    /**
     * Lookup422: pallet_balances::ReserveData<selendra_primitives::ReserveIdentifier, Balance>
     **/
    PalletBalancesReserveData: {
        id: string;
        amount: string;
    };
    /**
     * Lookup423: selendra_primitives::ReserveIdentifier
     **/
    SelendraPrimitivesReserveIdentifier: {
        _enum: string[];
    };
    /**
     * Lookup425: pallet_balances::Releases
     **/
    PalletBalancesReleases: {
        _enum: string[];
    };
    /**
     * Lookup426: pallet_balances::pallet::Error<T, I>
     **/
    PalletBalancesError: {
        _enum: string[];
    };
    /**
     * Lookup429: orml_tokens::BalanceLock<Balance>
     **/
    OrmlTokensBalanceLock: {
        id: string;
        amount: string;
    };
    /**
     * Lookup431: orml_tokens::AccountData<Balance>
     **/
    OrmlTokensAccountData: {
        free: string;
        reserved: string;
        frozen: string;
    };
    /**
     * Lookup433: orml_tokens::ReserveData<selendra_primitives::ReserveIdentifier, Balance>
     **/
    OrmlTokensReserveData: {
        id: string;
        amount: string;
    };
    /**
     * Lookup435: orml_tokens::module::Error<T>
     **/
    OrmlTokensModuleError: {
        _enum: string[];
    };
    /**
     * Lookup436: module_currencies::module::Error<T>
     **/
    ModuleCurrenciesModuleError: {
        _enum: string[];
    };
    /**
     * Lookup438: frame_support::PalletId
     **/
    FrameSupportPalletId: string;
    /**
     * Lookup439: module_transaction_payment::module::Error<T>
     **/
    ModuleTransactionPaymentModuleError: {
        _enum: string[];
    };
    /**
     * Lookup440: pallet_treasury::Proposal<sp_core::crypto::AccountId32, Balance>
     **/
    PalletTreasuryProposal: {
        proposer: string;
        value: string;
        beneficiary: string;
        bond: string;
    };
    /**
     * Lookup444: pallet_treasury::pallet::Error<T, I>
     **/
    PalletTreasuryError: {
        _enum: string[];
    };
    /**
     * Lookup445: pallet_bounties::Bounty<sp_core::crypto::AccountId32, Balance, BlockNumber>
     **/
    PalletBountiesBounty: {
        proposer: string;
        value: string;
        fee: string;
        curatorDeposit: string;
        bond: string;
        status: string;
    };
    /**
     * Lookup446: pallet_bounties::BountyStatus<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletBountiesBountyStatus: {
        _enum: {
            Proposed: string;
            Approved: string;
            Funded: string;
            CuratorProposed: {
                curator: string;
            };
            Active: {
                curator: string;
                updateDue: string;
            };
            PendingPayout: {
                curator: string;
                beneficiary: string;
                unlockAt: string;
            };
        };
    };
    /**
     * Lookup448: pallet_bounties::pallet::Error<T>
     **/
    PalletBountiesError: {
        _enum: string[];
    };
    /**
     * Lookup449: pallet_tips::OpenTip<sp_core::crypto::AccountId32, Balance, BlockNumber, primitive_types::H256>
     **/
    PalletTipsOpenTip: {
        reason: string;
        who: string;
        finder: string;
        deposit: string;
        closes: string;
        tips: string;
        findersFee: string;
    };
    /**
     * Lookup450: pallet_tips::pallet::Error<T>
     **/
    PalletTipsError: {
        _enum: string[];
    };
    /**
     * Lookup451: pallet_utility::pallet::Error<T>
     **/
    PalletUtilityError: {
        _enum: string[];
    };
    /**
     * Lookup453: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
     **/
    PalletMultisigMultisig: {
        when: string;
        deposit: string;
        depositor: string;
        approvals: string;
    };
    /**
     * Lookup455: pallet_multisig::pallet::Error<T>
     **/
    PalletMultisigError: {
        _enum: string[];
    };
    /**
     * Lookup456: pallet_recovery::RecoveryConfig<BlockNumber, Balance, frame_support::storage::bounded_vec::BoundedVec<sp_core::crypto::AccountId32, S>>
     **/
    PalletRecoveryRecoveryConfig: {
        delayPeriod: string;
        deposit: string;
        friends: string;
        threshold: string;
    };
    /**
     * Lookup459: pallet_recovery::ActiveRecovery<BlockNumber, Balance, frame_support::storage::bounded_vec::BoundedVec<sp_core::crypto::AccountId32, S>>
     **/
    PalletRecoveryActiveRecovery: {
        created: string;
        deposit: string;
        friends: string;
    };
    /**
     * Lookup460: pallet_recovery::pallet::Error<T>
     **/
    PalletRecoveryError: {
        _enum: string[];
    };
    /**
     * Lookup463: pallet_proxy::ProxyDefinition<sp_core::crypto::AccountId32, runtime_common::ProxyType, BlockNumber>
     **/
    PalletProxyProxyDefinition: {
        delegate: string;
        proxyType: string;
        delay: string;
    };
    /**
     * Lookup467: pallet_proxy::Announcement<sp_core::crypto::AccountId32, primitive_types::H256, BlockNumber>
     **/
    PalletProxyAnnouncement: {
        real: string;
        callHash: string;
        height: string;
    };
    /**
     * Lookup469: pallet_proxy::pallet::Error<T>
     **/
    PalletProxyError: {
        _enum: string[];
    };
    /**
     * Lookup471: pallet_indices::pallet::Error<T>
     **/
    PalletIndicesError: {
        _enum: string[];
    };
    /**
     * Lookup472: pallet_identity::types::Registration<Balance, MaxJudgements, MaxAdditionalFields>
     **/
    PalletIdentityRegistration: {
        judgements: string;
        deposit: string;
        info: string;
    };
    /**
     * Lookup480: pallet_identity::types::RegistrarInfo<Balance, sp_core::crypto::AccountId32>
     **/
    PalletIdentityRegistrarInfo: {
        account: string;
        fee: string;
        fields: string;
    };
    /**
     * Lookup482: pallet_identity::pallet::Error<T>
     **/
    PalletIdentityError: {
        _enum: string[];
    };
    /**
     * Lookup484: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
     **/
    PalletAuthorshipUncleEntryItem: {
        _enum: {
            InclusionHeight: string;
            Uncle: string;
        };
    };
    /**
     * Lookup485: pallet_authorship::pallet::Error<T>
     **/
    PalletAuthorshipError: {
        _enum: string[];
    };
    /**
     * Lookup492: sp_consensus_babe::digests::PreDigest
     **/
    SpConsensusBabeDigestsPreDigest: {
        _enum: {
            __Unused0: string;
            Primary: string;
            SecondaryPlain: string;
            SecondaryVRF: string;
        };
    };
    /**
     * Lookup493: sp_consensus_babe::digests::PrimaryPreDigest
     **/
    SpConsensusBabeDigestsPrimaryPreDigest: {
        authorityIndex: string;
        slot: string;
        vrfOutput: string;
        vrfProof: string;
    };
    /**
     * Lookup494: sp_consensus_babe::digests::SecondaryPlainPreDigest
     **/
    SpConsensusBabeDigestsSecondaryPlainPreDigest: {
        authorityIndex: string;
        slot: string;
    };
    /**
     * Lookup495: sp_consensus_babe::digests::SecondaryVRFPreDigest
     **/
    SpConsensusBabeDigestsSecondaryVRFPreDigest: {
        authorityIndex: string;
        slot: string;
        vrfOutput: string;
        vrfProof: string;
    };
    /**
     * Lookup497: sp_consensus_babe::BabeEpochConfiguration
     **/
    SpConsensusBabeBabeEpochConfiguration: {
        c: string;
        allowedSlots: string;
    };
    /**
     * Lookup498: pallet_babe::pallet::Error<T>
     **/
    PalletBabeError: {
        _enum: string[];
    };
    /**
     * Lookup499: pallet_staking::StakingLedger<T>
     **/
    PalletStakingStakingLedger: {
        stash: string;
        total: string;
        active: string;
        unlocking: string;
        claimedRewards: string;
    };
    /**
     * Lookup501: pallet_staking::UnlockChunk<Balance>
     **/
    PalletStakingUnlockChunk: {
        value: string;
        era: string;
    };
    /**
     * Lookup503: pallet_staking::Nominations<T>
     **/
    PalletStakingNominations: {
        targets: string;
        submittedIn: string;
        suppressed: string;
    };
    /**
     * Lookup505: pallet_staking::ActiveEraInfo
     **/
    PalletStakingActiveEraInfo: {
        index: string;
        start: string;
    };
    /**
     * Lookup507: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
     **/
    PalletStakingEraRewardPoints: {
        total: string;
        individual: string;
    };
    /**
     * Lookup511: pallet_staking::Forcing
     **/
    PalletStakingForcing: {
        _enum: string[];
    };
    /**
     * Lookup513: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingUnappliedSlash: {
        validator: string;
        own: string;
        others: string;
        reporters: string;
        payout: string;
    };
    /**
     * Lookup515: pallet_staking::slashing::SlashingSpans
     **/
    PalletStakingSlashingSlashingSpans: {
        spanIndex: string;
        lastStart: string;
        lastNonzeroSlash: string;
        prior: string;
    };
    /**
     * Lookup516: pallet_staking::slashing::SpanRecord<Balance>
     **/
    PalletStakingSlashingSpanRecord: {
        slashed: string;
        paidOut: string;
    };
    /**
     * Lookup519: pallet_staking::Releases
     **/
    PalletStakingReleases: {
        _enum: string[];
    };
    /**
     * Lookup520: pallet_staking::pallet::pallet::Error<T>
     **/
    PalletStakingPalletError: {
        _enum: string[];
    };
    /**
     * Lookup521: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
     **/
    SpStakingOffenceOffenceDetails: {
        offender: string;
        reporters: string;
    };
    /**
     * Lookup526: sp_core::crypto::KeyTypeId
     **/
    SpCoreCryptoKeyTypeId: string;
    /**
     * Lookup527: pallet_session::pallet::Error<T>
     **/
    PalletSessionError: {
        _enum: string[];
    };
    /**
     * Lookup528: pallet_grandpa::StoredState<N>
     **/
    PalletGrandpaStoredState: {
        _enum: {
            Live: string;
            PendingPause: {
                scheduledAt: string;
                delay: string;
            };
            Paused: string;
            PendingResume: {
                scheduledAt: string;
                delay: string;
            };
        };
    };
    /**
     * Lookup529: pallet_grandpa::StoredPendingChange<N, Limit>
     **/
    PalletGrandpaStoredPendingChange: {
        scheduledAt: string;
        delay: string;
        nextAuthorities: string;
        forced: string;
    };
    /**
     * Lookup531: pallet_grandpa::pallet::Error<T>
     **/
    PalletGrandpaError: {
        _enum: string[];
    };
    /**
     * Lookup535: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
     **/
    PalletImOnlineBoundedOpaqueNetworkState: {
        peerId: string;
        externalAddresses: string;
    };
    /**
     * Lookup539: pallet_im_online::pallet::Error<T>
     **/
    PalletImOnlineError: {
        _enum: string[];
    };
    /**
     * Lookup542: pallet_election_provider_multi_phase::Phase<Bn>
     **/
    PalletElectionProviderMultiPhasePhase: {
        _enum: {
            Off: string;
            Signed: string;
            Unsigned: string;
            Emergency: string;
        };
    };
    /**
     * Lookup544: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
     **/
    PalletElectionProviderMultiPhaseReadySolution: {
        supports: string;
        score: string;
        compute: string;
    };
    /**
     * Lookup545: pallet_election_provider_multi_phase::RoundSnapshot<T>
     **/
    PalletElectionProviderMultiPhaseRoundSnapshot: {
        voters: string;
        targets: string;
    };
    /**
     * Lookup552: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, selendra_runtime::config::consensus_config::NposSolution16>
     **/
    PalletElectionProviderMultiPhaseSignedSignedSubmission: {
        who: string;
        deposit: string;
        rawSolution: string;
        callFee: string;
    };
    /**
     * Lookup553: pallet_election_provider_multi_phase::pallet::Error<T>
     **/
    PalletElectionProviderMultiPhaseError: {
        _enum: string[];
    };
    /**
     * Lookup554: pallet_bags_list::list::Node<T, I>
     **/
    PalletBagsListListNode: {
        id: string;
        prev: string;
        next: string;
        bagUpper: string;
        score: string;
    };
    /**
     * Lookup555: pallet_bags_list::list::Bag<T, I>
     **/
    PalletBagsListListBag: {
        head: string;
        tail: string;
    };
    /**
     * Lookup557: pallet_bags_list::pallet::Error<T, I>
     **/
    PalletBagsListError: {
        _enum: {
            List: string;
        };
    };
    /**
     * Lookup558: pallet_bags_list::list::ListError
     **/
    PalletBagsListListListError: {
        _enum: string[];
    };
    /**
     * Lookup559: pallet_nomination_pools::PoolMember<T>
     **/
    PalletNominationPoolsPoolMember: {
        poolId: string;
        points: string;
        rewardPoolTotalEarnings: string;
        unbondingEras: string;
    };
    /**
     * Lookup564: pallet_nomination_pools::BondedPoolInner<T>
     **/
    PalletNominationPoolsBondedPoolInner: {
        points: string;
        state: string;
        memberCounter: string;
        roles: string;
    };
    /**
     * Lookup565: pallet_nomination_pools::PoolRoles<sp_core::crypto::AccountId32>
     **/
    PalletNominationPoolsPoolRoles: {
        depositor: string;
        root: string;
        nominator: string;
        stateToggler: string;
    };
    /**
     * Lookup566: pallet_nomination_pools::RewardPool<T>
     **/
    PalletNominationPoolsRewardPool: {
        balance: string;
        totalEarnings: string;
        points: string;
    };
    /**
     * Lookup569: pallet_nomination_pools::SubPools<T>
     **/
    PalletNominationPoolsSubPools: {
        noEra: string;
        withEra: string;
    };
    /**
     * Lookup570: pallet_nomination_pools::UnbondPool<T>
     **/
    PalletNominationPoolsUnbondPool: {
        points: string;
        balance: string;
    };
    /**
     * Lookup576: pallet_nomination_pools::pallet::Error<T>
     **/
    PalletNominationPoolsError: {
        _enum: string[];
    };
    /**
     * Lookup578: orml_authority::module::Error<T>
     **/
    OrmlAuthorityModuleError: {
        _enum: string[];
    };
    /**
     * Lookup580: pallet_collective::Votes<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletCollectiveVotes: {
        index: string;
        threshold: string;
        ayes: string;
        nays: string;
        end: string;
    };
    /**
     * Lookup581: pallet_collective::pallet::Error<T, I>
     **/
    PalletCollectiveError: {
        _enum: string[];
    };
    /**
     * Lookup582: pallet_membership::pallet::Error<T, I>
     **/
    PalletMembershipError: {
        _enum: string[];
    };
    /**
     * Lookup588: pallet_elections_phragmen::SeatHolder<sp_core::crypto::AccountId32, Balance>
     **/
    PalletElectionsPhragmenSeatHolder: {
        who: string;
        stake: string;
        deposit: string;
    };
    /**
     * Lookup589: pallet_elections_phragmen::Voter<sp_core::crypto::AccountId32, Balance>
     **/
    PalletElectionsPhragmenVoter: {
        votes: string;
        stake: string;
        deposit: string;
    };
    /**
     * Lookup590: pallet_elections_phragmen::pallet::Error<T>
     **/
    PalletElectionsPhragmenError: {
        _enum: string[];
    };
    /**
     * Lookup594: pallet_democracy::PreimageStatus<sp_core::crypto::AccountId32, Balance, BlockNumber>
     **/
    PalletDemocracyPreimageStatus: {
        _enum: {
            Missing: string;
            Available: {
                data: string;
                provider: string;
                deposit: string;
                since: string;
                expiry: string;
            };
        };
    };
    /**
     * Lookup595: pallet_democracy::types::ReferendumInfo<BlockNumber, primitive_types::H256, Balance>
     **/
    PalletDemocracyReferendumInfo: {
        _enum: {
            Ongoing: string;
            Finished: {
                approved: string;
                end: string;
            };
        };
    };
    /**
     * Lookup596: pallet_democracy::types::ReferendumStatus<BlockNumber, primitive_types::H256, Balance>
     **/
    PalletDemocracyReferendumStatus: {
        end: string;
        proposalHash: string;
        threshold: string;
        delay: string;
        tally: string;
    };
    /**
     * Lookup597: pallet_democracy::types::Tally<Balance>
     **/
    PalletDemocracyTally: {
        ayes: string;
        nays: string;
        turnout: string;
    };
    /**
     * Lookup598: pallet_democracy::vote::Voting<Balance, sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletDemocracyVoteVoting: {
        _enum: {
            Direct: {
                votes: string;
                delegations: string;
                prior: string;
            };
            Delegating: {
                balance: string;
                target: string;
                conviction: string;
                delegations: string;
                prior: string;
            };
        };
    };
    /**
     * Lookup601: pallet_democracy::types::Delegations<Balance>
     **/
    PalletDemocracyDelegations: {
        votes: string;
        capital: string;
    };
    /**
     * Lookup602: pallet_democracy::vote::PriorLock<BlockNumber, Balance>
     **/
    PalletDemocracyVotePriorLock: string;
    /**
     * Lookup605: pallet_democracy::Releases
     **/
    PalletDemocracyReleases: {
        _enum: string[];
    };
    /**
     * Lookup606: pallet_democracy::pallet::Error<T>
     **/
    PalletDemocracyError: {
        _enum: string[];
    };
    /**
     * Lookup607: orml_oracle::module::TimestampedValue<sp_arithmetic::fixed_point::FixedU128, Moment>
     **/
    OrmlOracleModuleTimestampedValue: {
        value: string;
        timestamp: string;
    };
    /**
     * Lookup608: orml_utilities::ordered_set::OrderedSet<sp_core::crypto::AccountId32, S>
     **/
    OrmlUtilitiesOrderedSet: string;
    /**
     * Lookup610: orml_oracle::module::Error<T, I>
     **/
    OrmlOracleModuleError: {
        _enum: string[];
    };
    /**
     * Lookup612: orml_traits::auction::AuctionInfo<sp_core::crypto::AccountId32, Balance, BlockNumber>
     **/
    OrmlTraitsAuctionAuctionInfo: {
        bid: string;
        start: string;
        end: string;
    };
    /**
     * Lookup613: orml_auction::module::Error<T>
     **/
    OrmlAuctionModuleError: {
        _enum: string[];
    };
    /**
     * Lookup614: orml_rewards::PoolInfo<Share, Balance, selendra_primitives::currency::CurrencyId>
     **/
    OrmlRewardsPoolInfo: {
        totalShares: string;
        rewards: string;
    };
    /**
     * Lookup622: orml_rewards::module::Error<T>
     **/
    OrmlRewardsModuleError: {
        _enum: string[];
    };
    /**
     * Lookup623: orml_nft::ClassInfo<TokenId, sp_core::crypto::AccountId32, module_nft::ClassData<Balance>, frame_support::storage::bounded_vec::BoundedVec<T, S>>
     **/
    OrmlNftClassInfo: {
        metadata: string;
        totalIssuance: string;
        owner: string;
        data: string;
    };
    /**
     * Lookup624: module_nft::ClassData<Balance>
     **/
    ModuleNftClassData: {
        deposit: string;
        properties: string;
        attributes: string;
    };
    /**
     * Lookup626: orml_nft::TokenInfo<sp_core::crypto::AccountId32, module_nft::TokenData<Balance>, frame_support::storage::bounded_vec::BoundedVec<T, S>>
     **/
    OrmlNftTokenInfo: {
        metadata: string;
        owner: string;
        data: string;
    };
    /**
     * Lookup627: module_nft::TokenData<Balance>
     **/
    ModuleNftTokenData: {
        deposit: string;
        attributes: string;
    };
    /**
     * Lookup629: orml_nft::module::Error<T>
     **/
    OrmlNftModuleError: {
        _enum: string[];
    };
    /**
     * Lookup630: module_prices::module::Error<T>
     **/
    ModulePricesModuleError: {
        _enum: string[];
    };
    /**
     * Lookup631: module_dex::TradingPairStatus<Balance, BlockNumber>
     **/
    ModuleDexTradingPairStatus: {
        _enum: {
            Disabled: string;
            Provisioning: string;
            Enabled: string;
        };
    };
    /**
     * Lookup632: module_dex::ProvisioningParameters<Balance, BlockNumber>
     **/
    ModuleDexProvisioningParameters: {
        minContribution: string;
        targetProvision: string;
        accumulatedProvision: string;
        notBefore: string;
    };
    /**
     * Lookup635: module_dex::module::Error<T>
     **/
    ModuleDexModuleError: {
        _enum: string[];
    };
    /**
     * Lookup638: module_dex_oracle::module::Error<T>
     **/
    ModuleDexOracleModuleError: {
        _enum: string[];
    };
    /**
     * Lookup641: module_aggregated_dex::module::Error<T>
     **/
    ModuleAggregatedDexModuleError: {
        _enum: string[];
    };
    /**
     * Lookup642: module_auction_manager::CollateralAuctionItem<sp_core::crypto::AccountId32, BlockNumber>
     **/
    ModuleAuctionManagerCollateralAuctionItem: {
        refundRecipient: string;
        currencyId: string;
        initialAmount: string;
        amount: string;
        target: string;
        startTime: string;
    };
    /**
     * Lookup643: module_auction_manager::module::Error<T>
     **/
    ModuleAuctionManagerModuleError: {
        _enum: string[];
    };
    /**
     * Lookup645: selendra_primitives::Position
     **/
    SelendraPrimitivesPosition: {
        collateral: string;
        debit: string;
    };
    /**
     * Lookup646: module_loans::module::Error<T>
     **/
    ModuleLoansModuleError: {
        _enum: string[];
    };
    /**
     * Lookup648: module_funan::module::Error<T>
     **/
    ModuleFunanModuleError: {
        _enum: string[];
    };
    /**
     * Lookup649: module_cdp_treasury::module::Error<T>
     **/
    ModuleCdpTreasuryModuleError: {
        _enum: string[];
    };
    /**
     * Lookup650: module_cdp_engine::RiskManagementParams
     **/
    ModuleCdpEngineRiskManagementParams: {
        maximumTotalDebitValue: string;
        interestRatePerSec: string;
        liquidationRatio: string;
        liquidationPenalty: string;
        requiredCollateralRatio: string;
    };
    /**
     * Lookup651: module_cdp_engine::module::Error<T>
     **/
    ModuleCdpEngineModuleError: {
        _enum: string[];
    };
    /**
     * Lookup652: module_emergency_shutdown::module::Error<T>
     **/
    ModuleEmergencyShutdownModuleError: {
        _enum: string[];
    };
    /**
     * Lookup654: module_incentives::module::Error<T>
     **/
    ModuleIncentivesModuleError: {
        _enum: string[];
    };
    /**
     * Lookup655: module_nft::module::Error<T>
     **/
    ModuleNftModuleError: {
        _enum: string[];
    };
    /**
     * Lookup656: module_asset_registry::module::Error<T>
     **/
    ModuleAssetRegistryModuleError: {
        _enum: string[];
    };
    /**
     * Lookup657: module_evm::module::AccountInfo<Index>
     **/
    ModuleEvmModuleAccountInfo: {
        nonce: string;
        contractInfo: string;
    };
    /**
     * Lookup659: module_evm::module::ContractInfo
     **/
    ModuleEvmModuleContractInfo: {
        codeHash: string;
        maintainer: string;
        published: string;
    };
    /**
     * Lookup662: module_evm::module::CodeInfo
     **/
    ModuleEvmModuleCodeInfo: {
        codeSize: string;
        refCount: string;
    };
    /**
     * Lookup663: module_evm::module::Error<T>
     **/
    ModuleEvmModuleError: {
        _enum: string[];
    };
    /**
     * Lookup664: module_evm_bridge::module::Error<T>
     **/
    ModuleEvmBridgeModuleError: {
        _enum: string[];
    };
    /**
     * Lookup665: module_evm_accounts::module::Error<T>
     **/
    ModuleEvmAccountsModuleError: {
        _enum: string[];
    };
    /**
     * Lookup666: module_stable_asset::StableAssetPoolInfo<selendra_primitives::currency::CurrencyId, AtLeast64BitUnsigned, Balance, sp_core::crypto::AccountId32, BlockNumber>
     **/
    ModuleStableAssetStableAssetPoolInfo: {
        poolAsset: string;
        assets: string;
        precisions: string;
        mintFee: string;
        swapFee: string;
        redeemFee: string;
        totalSupply: string;
        a: string;
        aBlock: string;
        futureA: string;
        futureABlock: string;
        balances: string;
        feeRecipient: string;
        accountId: string;
        yieldRecipient: string;
        precision: string;
    };
    /**
     * Lookup667: module_stable_asset::pallet::Error<T>
     **/
    ModuleStableAssetError: {
        _enum: string[];
    };
    /**
     * Lookup668: pallet_sudo::pallet::Error<T>
     **/
    PalletSudoError: {
        _enum: string[];
    };
    /**
     * Lookup671: frame_system::extensions::check_non_zero_sender::CheckNonZeroSender<T>
     **/
    FrameSystemExtensionsCheckNonZeroSender: string;
    /**
     * Lookup672: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
     **/
    FrameSystemExtensionsCheckSpecVersion: string;
    /**
     * Lookup673: frame_system::extensions::check_tx_version::CheckTxVersion<T>
     **/
    FrameSystemExtensionsCheckTxVersion: string;
    /**
     * Lookup674: frame_system::extensions::check_genesis::CheckGenesis<T>
     **/
    FrameSystemExtensionsCheckGenesis: string;
    /**
     * Lookup677: runtime_common::check_nonce::CheckNonce<T>
     **/
    RuntimeCommonCheckNonce: {
        nonce: string;
    };
    /**
     * Lookup678: frame_system::extensions::check_weight::CheckWeight<T>
     **/
    FrameSystemExtensionsCheckWeight: string;
    /**
     * Lookup679: module_transaction_payment::ChargeTransactionPayment<T>
     **/
    ModuleTransactionPaymentChargeTransactionPayment: string;
    /**
     * Lookup680: module_evm::SetEvmOrigin<T>
     **/
    ModuleEvmSetEvmOrigin: string;
    /**
     * Lookup681: selendra_runtime::config::evm_config::StorageDepositPerByte
     **/
    SelendraRuntimeConfigEvmConfigStorageDepositPerByte: string;
    /**
     * Lookup682: selendra_runtime::config::evm_config::TxFeePerGas
     **/
    SelendraRuntimeConfigEvmConfigTxFeePerGas: string;
    /**
     * Lookup684: selendra_primitives::signature::SelendraMultiSignature
     **/
    SelendraPrimitivesSignatureSelendraMultiSignature: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
            Ethereum: string;
            Eip1559: string;
            SelendraEip712: string;
        };
    };
};
export default _default;
