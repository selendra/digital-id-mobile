declare module '@polkadot/types/lookup' {
    import type { Data } from '@polkadot/types';
    import type { BTreeMap, Bytes, Compact, Enum, Null, Option, Result, Set, Struct, Text, U256, U8aFixed, Vec, WrapperKeepOpaque, bool, i128, i32, u128, u16, u32, u64, u8 } from '@polkadot/types-codec';
    import type { ITuple } from '@polkadot/types-codec/types';
    import type { Vote } from '@polkadot/types/interfaces/elections';
    import type { AccountId32, Call, H160, H256, MultiAddress, PerU16, Perbill, Percent } from '@polkadot/types/interfaces/runtime';
    import type { Event } from '@polkadot/types/interfaces/system';
    /** @name FrameSystemAccountInfo (3) */
    interface FrameSystemAccountInfo extends Struct {
        readonly nonce: u32;
        readonly consumers: u32;
        readonly providers: u32;
        readonly sufficients: u32;
        readonly data: PalletBalancesAccountData;
    }
    /** @name PalletBalancesAccountData (5) */
    interface PalletBalancesAccountData extends Struct {
        readonly free: u128;
        readonly reserved: u128;
        readonly miscFrozen: u128;
        readonly feeFrozen: u128;
    }
    /** @name FrameSupportWeightsPerDispatchClassU64 (7) */
    interface FrameSupportWeightsPerDispatchClassU64 extends Struct {
        readonly normal: u64;
        readonly operational: u64;
        readonly mandatory: u64;
    }
    /** @name SpRuntimeDigest (11) */
    interface SpRuntimeDigest extends Struct {
        readonly logs: Vec<SpRuntimeDigestDigestItem>;
    }
    /** @name SpRuntimeDigestDigestItem (13) */
    interface SpRuntimeDigestDigestItem extends Enum {
        readonly isOther: boolean;
        readonly asOther: Bytes;
        readonly isConsensus: boolean;
        readonly asConsensus: ITuple<[U8aFixed, Bytes]>;
        readonly isSeal: boolean;
        readonly asSeal: ITuple<[U8aFixed, Bytes]>;
        readonly isPreRuntime: boolean;
        readonly asPreRuntime: ITuple<[U8aFixed, Bytes]>;
        readonly isRuntimeEnvironmentUpdated: boolean;
        readonly type: 'Other' | 'Consensus' | 'Seal' | 'PreRuntime' | 'RuntimeEnvironmentUpdated';
    }
    /** @name FrameSystemEventRecord (16) */
    interface FrameSystemEventRecord extends Struct {
        readonly phase: FrameSystemPhase;
        readonly event: Event;
        readonly topics: Vec<H256>;
    }
    /** @name FrameSystemEvent (18) */
    interface FrameSystemEvent extends Enum {
        readonly isExtrinsicSuccess: boolean;
        readonly asExtrinsicSuccess: {
            readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
        } & Struct;
        readonly isExtrinsicFailed: boolean;
        readonly asExtrinsicFailed: {
            readonly dispatchError: SpRuntimeDispatchError;
            readonly dispatchInfo: FrameSupportWeightsDispatchInfo;
        } & Struct;
        readonly isCodeUpdated: boolean;
        readonly isNewAccount: boolean;
        readonly asNewAccount: {
            readonly account: AccountId32;
        } & Struct;
        readonly isKilledAccount: boolean;
        readonly asKilledAccount: {
            readonly account: AccountId32;
        } & Struct;
        readonly isRemarked: boolean;
        readonly asRemarked: {
            readonly sender: AccountId32;
            readonly hash_: H256;
        } & Struct;
        readonly type: 'ExtrinsicSuccess' | 'ExtrinsicFailed' | 'CodeUpdated' | 'NewAccount' | 'KilledAccount' | 'Remarked';
    }
    /** @name FrameSupportWeightsDispatchInfo (19) */
    interface FrameSupportWeightsDispatchInfo extends Struct {
        readonly weight: u64;
        readonly class: FrameSupportWeightsDispatchClass;
        readonly paysFee: FrameSupportWeightsPays;
    }
    /** @name FrameSupportWeightsDispatchClass (20) */
    interface FrameSupportWeightsDispatchClass extends Enum {
        readonly isNormal: boolean;
        readonly isOperational: boolean;
        readonly isMandatory: boolean;
        readonly type: 'Normal' | 'Operational' | 'Mandatory';
    }
    /** @name FrameSupportWeightsPays (21) */
    interface FrameSupportWeightsPays extends Enum {
        readonly isYes: boolean;
        readonly isNo: boolean;
        readonly type: 'Yes' | 'No';
    }
    /** @name SpRuntimeDispatchError (22) */
    interface SpRuntimeDispatchError extends Enum {
        readonly isOther: boolean;
        readonly isCannotLookup: boolean;
        readonly isBadOrigin: boolean;
        readonly isModule: boolean;
        readonly asModule: SpRuntimeModuleError;
        readonly isConsumerRemaining: boolean;
        readonly isNoProviders: boolean;
        readonly isTooManyConsumers: boolean;
        readonly isToken: boolean;
        readonly asToken: SpRuntimeTokenError;
        readonly isArithmetic: boolean;
        readonly asArithmetic: SpRuntimeArithmeticError;
        readonly isTransactional: boolean;
        readonly asTransactional: SpRuntimeTransactionalError;
        readonly type: 'Other' | 'CannotLookup' | 'BadOrigin' | 'Module' | 'ConsumerRemaining' | 'NoProviders' | 'TooManyConsumers' | 'Token' | 'Arithmetic' | 'Transactional';
    }
    /** @name SpRuntimeModuleError (23) */
    interface SpRuntimeModuleError extends Struct {
        readonly index: u8;
        readonly error: U8aFixed;
    }
    /** @name SpRuntimeTokenError (24) */
    interface SpRuntimeTokenError extends Enum {
        readonly isNoFunds: boolean;
        readonly isWouldDie: boolean;
        readonly isBelowMinimum: boolean;
        readonly isCannotCreate: boolean;
        readonly isUnknownAsset: boolean;
        readonly isFrozen: boolean;
        readonly isUnsupported: boolean;
        readonly type: 'NoFunds' | 'WouldDie' | 'BelowMinimum' | 'CannotCreate' | 'UnknownAsset' | 'Frozen' | 'Unsupported';
    }
    /** @name SpRuntimeArithmeticError (25) */
    interface SpRuntimeArithmeticError extends Enum {
        readonly isUnderflow: boolean;
        readonly isOverflow: boolean;
        readonly isDivisionByZero: boolean;
        readonly type: 'Underflow' | 'Overflow' | 'DivisionByZero';
    }
    /** @name SpRuntimeTransactionalError (26) */
    interface SpRuntimeTransactionalError extends Enum {
        readonly isLimitReached: boolean;
        readonly isNoLayer: boolean;
        readonly type: 'LimitReached' | 'NoLayer';
    }
    /** @name PalletSchedulerEvent (27) */
    interface PalletSchedulerEvent extends Enum {
        readonly isScheduled: boolean;
        readonly asScheduled: {
            readonly when: u32;
            readonly index: u32;
        } & Struct;
        readonly isCanceled: boolean;
        readonly asCanceled: {
            readonly when: u32;
            readonly index: u32;
        } & Struct;
        readonly isDispatched: boolean;
        readonly asDispatched: {
            readonly task: ITuple<[u32, u32]>;
            readonly id: Option<Bytes>;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isCallLookupFailed: boolean;
        readonly asCallLookupFailed: {
            readonly task: ITuple<[u32, u32]>;
            readonly id: Option<Bytes>;
            readonly error: FrameSupportScheduleLookupError;
        } & Struct;
        readonly type: 'Scheduled' | 'Canceled' | 'Dispatched' | 'CallLookupFailed';
    }
    /** @name FrameSupportScheduleLookupError (32) */
    interface FrameSupportScheduleLookupError extends Enum {
        readonly isUnknown: boolean;
        readonly isBadFormat: boolean;
        readonly type: 'Unknown' | 'BadFormat';
    }
    /** @name ModuleTransactionPauseModuleEvent (33) */
    interface ModuleTransactionPauseModuleEvent extends Enum {
        readonly isTransactionPaused: boolean;
        readonly asTransactionPaused: {
            readonly palletNameBytes: Bytes;
            readonly functionNameBytes: Bytes;
        } & Struct;
        readonly isTransactionUnpaused: boolean;
        readonly asTransactionUnpaused: {
            readonly palletNameBytes: Bytes;
            readonly functionNameBytes: Bytes;
        } & Struct;
        readonly type: 'TransactionPaused' | 'TransactionUnpaused';
    }
    /** @name PalletPreimageEvent (34) */
    interface PalletPreimageEvent extends Enum {
        readonly isNoted: boolean;
        readonly asNoted: {
            readonly hash_: H256;
        } & Struct;
        readonly isRequested: boolean;
        readonly asRequested: {
            readonly hash_: H256;
        } & Struct;
        readonly isCleared: boolean;
        readonly asCleared: {
            readonly hash_: H256;
        } & Struct;
        readonly type: 'Noted' | 'Requested' | 'Cleared';
    }
    /** @name PalletBalancesEvent (35) */
    interface PalletBalancesEvent extends Enum {
        readonly isEndowed: boolean;
        readonly asEndowed: {
            readonly account: AccountId32;
            readonly freeBalance: u128;
        } & Struct;
        readonly isDustLost: boolean;
        readonly asDustLost: {
            readonly account: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isBalanceSet: boolean;
        readonly asBalanceSet: {
            readonly who: AccountId32;
            readonly free: u128;
            readonly reserved: u128;
        } & Struct;
        readonly isReserved: boolean;
        readonly asReserved: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isUnreserved: boolean;
        readonly asUnreserved: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isReserveRepatriated: boolean;
        readonly asReserveRepatriated: {
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly amount: u128;
            readonly destinationStatus: FrameSupportTokensMiscBalanceStatus;
        } & Struct;
        readonly isDeposit: boolean;
        readonly asDeposit: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isWithdraw: boolean;
        readonly asWithdraw: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isSlashed: boolean;
        readonly asSlashed: {
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly type: 'Endowed' | 'DustLost' | 'Transfer' | 'BalanceSet' | 'Reserved' | 'Unreserved' | 'ReserveRepatriated' | 'Deposit' | 'Withdraw' | 'Slashed';
    }
    /** @name FrameSupportTokensMiscBalanceStatus (36) */
    interface FrameSupportTokensMiscBalanceStatus extends Enum {
        readonly isFree: boolean;
        readonly isReserved: boolean;
        readonly type: 'Free' | 'Reserved';
    }
    /** @name OrmlTokensModuleEvent (37) */
    interface OrmlTokensModuleEvent extends Enum {
        readonly isEndowed: boolean;
        readonly asEndowed: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isDustLost: boolean;
        readonly asDustLost: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isReserved: boolean;
        readonly asReserved: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isUnreserved: boolean;
        readonly asUnreserved: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isReserveRepatriated: boolean;
        readonly asReserveRepatriated: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly amount: u128;
            readonly status: FrameSupportTokensMiscBalanceStatus;
        } & Struct;
        readonly isBalanceSet: boolean;
        readonly asBalanceSet: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly free: u128;
            readonly reserved: u128;
        } & Struct;
        readonly isTotalIssuanceSet: boolean;
        readonly asTotalIssuanceSet: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly amount: u128;
        } & Struct;
        readonly isWithdrawn: boolean;
        readonly asWithdrawn: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isSlashed: boolean;
        readonly asSlashed: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly freeAmount: u128;
            readonly reservedAmount: u128;
        } & Struct;
        readonly isDeposited: boolean;
        readonly asDeposited: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isLockSet: boolean;
        readonly asLockSet: {
            readonly lockId: U8aFixed;
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isLockRemoved: boolean;
        readonly asLockRemoved: {
            readonly lockId: U8aFixed;
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
        } & Struct;
        readonly type: 'Endowed' | 'DustLost' | 'Transfer' | 'Reserved' | 'Unreserved' | 'ReserveRepatriated' | 'BalanceSet' | 'TotalIssuanceSet' | 'Withdrawn' | 'Slashed' | 'Deposited' | 'LockSet' | 'LockRemoved';
    }
    /** @name SelendraPrimitivesCurrencyCurrencyId (38) */
    interface SelendraPrimitivesCurrencyCurrencyId extends Enum {
        readonly isToken: boolean;
        readonly asToken: SelendraPrimitivesCurrencyTokenSymbol;
        readonly isDexShare: boolean;
        readonly asDexShare: ITuple<[SelendraPrimitivesCurrencyDexShare, SelendraPrimitivesCurrencyDexShare]>;
        readonly isErc20: boolean;
        readonly asErc20: H160;
        readonly isStableAssetPoolToken: boolean;
        readonly asStableAssetPoolToken: u32;
        readonly isForeignAsset: boolean;
        readonly asForeignAsset: u16;
        readonly type: 'Token' | 'DexShare' | 'Erc20' | 'StableAssetPoolToken' | 'ForeignAsset';
    }
    /** @name SelendraPrimitivesCurrencyTokenSymbol (39) */
    interface SelendraPrimitivesCurrencyTokenSymbol extends Enum {
        readonly isSel: boolean;
        readonly isKusd: boolean;
        readonly isLsel: boolean;
        readonly isRenbtc: boolean;
        readonly isDai: boolean;
        readonly isKsm: boolean;
        readonly isDot: boolean;
        readonly type: 'Sel' | 'Kusd' | 'Lsel' | 'Renbtc' | 'Dai' | 'Ksm' | 'Dot';
    }
    /** @name SelendraPrimitivesCurrencyDexShare (40) */
    interface SelendraPrimitivesCurrencyDexShare extends Enum {
        readonly isToken: boolean;
        readonly asToken: SelendraPrimitivesCurrencyTokenSymbol;
        readonly isErc20: boolean;
        readonly asErc20: H160;
        readonly isForeignAsset: boolean;
        readonly asForeignAsset: u16;
        readonly isStableAssetPoolToken: boolean;
        readonly asStableAssetPoolToken: u32;
        readonly type: 'Token' | 'Erc20' | 'ForeignAsset' | 'StableAssetPoolToken';
    }
    /** @name ModuleCurrenciesModuleEvent (45) */
    interface ModuleCurrenciesModuleEvent extends Enum {
        readonly isTransferred: boolean;
        readonly asTransferred: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isWithdrawn: boolean;
        readonly asWithdrawn: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isDeposited: boolean;
        readonly asDeposited: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isDustSwept: boolean;
        readonly asDustSwept: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly type: 'Transferred' | 'Withdrawn' | 'Deposited' | 'DustSwept';
    }
    /** @name ModuleTransactionPaymentModuleEvent (46) */
    interface ModuleTransactionPaymentModuleEvent extends Enum {
        readonly isChargeFeePoolEnabled: boolean;
        readonly asChargeFeePoolEnabled: {
            readonly subAccount: AccountId32;
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly feeSwapPath: Vec<SelendraPrimitivesCurrencyCurrencyId>;
            readonly exchangeRate: u128;
            readonly poolSize: u128;
            readonly swapThreshold: u128;
        } & Struct;
        readonly isChargeFeePoolSwapped: boolean;
        readonly asChargeFeePoolSwapped: {
            readonly subAccount: AccountId32;
            readonly supplyCurrencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly oldExchangeRate: u128;
            readonly swapExchangeRate: u128;
            readonly newExchangeRate: u128;
            readonly newPoolSize: u128;
        } & Struct;
        readonly isChargeFeePoolDisabled: boolean;
        readonly asChargeFeePoolDisabled: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly foreignAmount: u128;
            readonly nativeAmount: u128;
        } & Struct;
        readonly isTransactionFeePaid: boolean;
        readonly asTransactionFeePaid: {
            readonly who: AccountId32;
            readonly actualFee: u128;
            readonly actualTip: u128;
            readonly actualSurplus: u128;
        } & Struct;
        readonly type: 'ChargeFeePoolEnabled' | 'ChargeFeePoolSwapped' | 'ChargeFeePoolDisabled' | 'TransactionFeePaid';
    }
    /** @name PalletTreasuryEvent (49) */
    interface PalletTreasuryEvent extends Enum {
        readonly isProposed: boolean;
        readonly asProposed: {
            readonly proposalIndex: u32;
        } & Struct;
        readonly isSpending: boolean;
        readonly asSpending: {
            readonly budgetRemaining: u128;
        } & Struct;
        readonly isAwarded: boolean;
        readonly asAwarded: {
            readonly proposalIndex: u32;
            readonly award: u128;
            readonly account: AccountId32;
        } & Struct;
        readonly isRejected: boolean;
        readonly asRejected: {
            readonly proposalIndex: u32;
            readonly slashed: u128;
        } & Struct;
        readonly isBurnt: boolean;
        readonly asBurnt: {
            readonly burntFunds: u128;
        } & Struct;
        readonly isRollover: boolean;
        readonly asRollover: {
            readonly rolloverBalance: u128;
        } & Struct;
        readonly isDeposit: boolean;
        readonly asDeposit: {
            readonly value: u128;
        } & Struct;
        readonly type: 'Proposed' | 'Spending' | 'Awarded' | 'Rejected' | 'Burnt' | 'Rollover' | 'Deposit';
    }
    /** @name PalletBountiesEvent (50) */
    interface PalletBountiesEvent extends Enum {
        readonly isBountyProposed: boolean;
        readonly asBountyProposed: {
            readonly index: u32;
        } & Struct;
        readonly isBountyRejected: boolean;
        readonly asBountyRejected: {
            readonly index: u32;
            readonly bond: u128;
        } & Struct;
        readonly isBountyBecameActive: boolean;
        readonly asBountyBecameActive: {
            readonly index: u32;
        } & Struct;
        readonly isBountyAwarded: boolean;
        readonly asBountyAwarded: {
            readonly index: u32;
            readonly beneficiary: AccountId32;
        } & Struct;
        readonly isBountyClaimed: boolean;
        readonly asBountyClaimed: {
            readonly index: u32;
            readonly payout: u128;
            readonly beneficiary: AccountId32;
        } & Struct;
        readonly isBountyCanceled: boolean;
        readonly asBountyCanceled: {
            readonly index: u32;
        } & Struct;
        readonly isBountyExtended: boolean;
        readonly asBountyExtended: {
            readonly index: u32;
        } & Struct;
        readonly type: 'BountyProposed' | 'BountyRejected' | 'BountyBecameActive' | 'BountyAwarded' | 'BountyClaimed' | 'BountyCanceled' | 'BountyExtended';
    }
    /** @name PalletTipsEvent (51) */
    interface PalletTipsEvent extends Enum {
        readonly isNewTip: boolean;
        readonly asNewTip: {
            readonly tipHash: H256;
        } & Struct;
        readonly isTipClosing: boolean;
        readonly asTipClosing: {
            readonly tipHash: H256;
        } & Struct;
        readonly isTipClosed: boolean;
        readonly asTipClosed: {
            readonly tipHash: H256;
            readonly who: AccountId32;
            readonly payout: u128;
        } & Struct;
        readonly isTipRetracted: boolean;
        readonly asTipRetracted: {
            readonly tipHash: H256;
        } & Struct;
        readonly isTipSlashed: boolean;
        readonly asTipSlashed: {
            readonly tipHash: H256;
            readonly finder: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly type: 'NewTip' | 'TipClosing' | 'TipClosed' | 'TipRetracted' | 'TipSlashed';
    }
    /** @name PalletUtilityEvent (52) */
    interface PalletUtilityEvent extends Enum {
        readonly isBatchInterrupted: boolean;
        readonly asBatchInterrupted: {
            readonly index: u32;
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly isBatchCompleted: boolean;
        readonly isBatchCompletedWithErrors: boolean;
        readonly isItemCompleted: boolean;
        readonly isItemFailed: boolean;
        readonly asItemFailed: {
            readonly error: SpRuntimeDispatchError;
        } & Struct;
        readonly isDispatchedAs: boolean;
        readonly asDispatchedAs: {
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly type: 'BatchInterrupted' | 'BatchCompleted' | 'BatchCompletedWithErrors' | 'ItemCompleted' | 'ItemFailed' | 'DispatchedAs';
    }
    /** @name PalletMultisigEvent (53) */
    interface PalletMultisigEvent extends Enum {
        readonly isNewMultisig: boolean;
        readonly asNewMultisig: {
            readonly approving: AccountId32;
            readonly multisig: AccountId32;
            readonly callHash: U8aFixed;
        } & Struct;
        readonly isMultisigApproval: boolean;
        readonly asMultisigApproval: {
            readonly approving: AccountId32;
            readonly timepoint: PalletMultisigTimepoint;
            readonly multisig: AccountId32;
            readonly callHash: U8aFixed;
        } & Struct;
        readonly isMultisigExecuted: boolean;
        readonly asMultisigExecuted: {
            readonly approving: AccountId32;
            readonly timepoint: PalletMultisigTimepoint;
            readonly multisig: AccountId32;
            readonly callHash: U8aFixed;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isMultisigCancelled: boolean;
        readonly asMultisigCancelled: {
            readonly cancelling: AccountId32;
            readonly timepoint: PalletMultisigTimepoint;
            readonly multisig: AccountId32;
            readonly callHash: U8aFixed;
        } & Struct;
        readonly type: 'NewMultisig' | 'MultisigApproval' | 'MultisigExecuted' | 'MultisigCancelled';
    }
    /** @name PalletMultisigTimepoint (54) */
    interface PalletMultisigTimepoint extends Struct {
        readonly height: u32;
        readonly index: u32;
    }
    /** @name PalletRecoveryEvent (55) */
    interface PalletRecoveryEvent extends Enum {
        readonly isRecoveryCreated: boolean;
        readonly asRecoveryCreated: {
            readonly account: AccountId32;
        } & Struct;
        readonly isRecoveryInitiated: boolean;
        readonly asRecoveryInitiated: {
            readonly lostAccount: AccountId32;
            readonly rescuerAccount: AccountId32;
        } & Struct;
        readonly isRecoveryVouched: boolean;
        readonly asRecoveryVouched: {
            readonly lostAccount: AccountId32;
            readonly rescuerAccount: AccountId32;
            readonly sender: AccountId32;
        } & Struct;
        readonly isRecoveryClosed: boolean;
        readonly asRecoveryClosed: {
            readonly lostAccount: AccountId32;
            readonly rescuerAccount: AccountId32;
        } & Struct;
        readonly isAccountRecovered: boolean;
        readonly asAccountRecovered: {
            readonly lostAccount: AccountId32;
            readonly rescuerAccount: AccountId32;
        } & Struct;
        readonly isRecoveryRemoved: boolean;
        readonly asRecoveryRemoved: {
            readonly lostAccount: AccountId32;
        } & Struct;
        readonly type: 'RecoveryCreated' | 'RecoveryInitiated' | 'RecoveryVouched' | 'RecoveryClosed' | 'AccountRecovered' | 'RecoveryRemoved';
    }
    /** @name PalletProxyEvent (56) */
    interface PalletProxyEvent extends Enum {
        readonly isProxyExecuted: boolean;
        readonly asProxyExecuted: {
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isAnonymousCreated: boolean;
        readonly asAnonymousCreated: {
            readonly anonymous: AccountId32;
            readonly who: AccountId32;
            readonly proxyType: RuntimeCommonProxyType;
            readonly disambiguationIndex: u16;
        } & Struct;
        readonly isAnnounced: boolean;
        readonly asAnnounced: {
            readonly real: AccountId32;
            readonly proxy: AccountId32;
            readonly callHash: H256;
        } & Struct;
        readonly isProxyAdded: boolean;
        readonly asProxyAdded: {
            readonly delegator: AccountId32;
            readonly delegatee: AccountId32;
            readonly proxyType: RuntimeCommonProxyType;
            readonly delay: u32;
        } & Struct;
        readonly isProxyRemoved: boolean;
        readonly asProxyRemoved: {
            readonly delegator: AccountId32;
            readonly delegatee: AccountId32;
            readonly proxyType: RuntimeCommonProxyType;
            readonly delay: u32;
        } & Struct;
        readonly type: 'ProxyExecuted' | 'AnonymousCreated' | 'Announced' | 'ProxyAdded' | 'ProxyRemoved';
    }
    /** @name RuntimeCommonProxyType (57) */
    interface RuntimeCommonProxyType extends Enum {
        readonly isAny: boolean;
        readonly isCancelProxy: boolean;
        readonly isGovernance: boolean;
        readonly isStaking: boolean;
        readonly isIdentityJudgement: boolean;
        readonly isAuction: boolean;
        readonly isSwap: boolean;
        readonly isLoan: boolean;
        readonly isDexLiquidity: boolean;
        readonly isStableAssetSwap: boolean;
        readonly isStableAssetLiquidity: boolean;
        readonly type: 'Any' | 'CancelProxy' | 'Governance' | 'Staking' | 'IdentityJudgement' | 'Auction' | 'Swap' | 'Loan' | 'DexLiquidity' | 'StableAssetSwap' | 'StableAssetLiquidity';
    }
    /** @name ModuleIdleSchedulerModuleEvent (58) */
    interface ModuleIdleSchedulerModuleEvent extends Enum {
        readonly isTaskDispatched: boolean;
        readonly asTaskDispatched: {
            readonly taskId: u32;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isTaskAdded: boolean;
        readonly asTaskAdded: {
            readonly taskId: u32;
            readonly task: SelendraRuntimeConfigUtilityConfigScheduledTasks;
        } & Struct;
        readonly type: 'TaskDispatched' | 'TaskAdded';
    }
    /** @name SelendraRuntimeConfigUtilityConfigScheduledTasks (59) */
    interface SelendraRuntimeConfigUtilityConfigScheduledTasks extends Enum {
        readonly isEvmTask: boolean;
        readonly asEvmTask: ModuleEvmEvmTask;
        readonly type: 'EvmTask';
    }
    /** @name ModuleEvmEvmTask (60) */
    interface ModuleEvmEvmTask extends Enum {
        readonly isSchedule: boolean;
        readonly asSchedule: {
            readonly from: H160;
            readonly target: H160;
            readonly input: Bytes;
            readonly value: u128;
            readonly gasLimit: u64;
            readonly storageLimit: u32;
        } & Struct;
        readonly isRemove: boolean;
        readonly asRemove: {
            readonly caller: H160;
            readonly contract: H160;
            readonly maintainer: H160;
        } & Struct;
        readonly type: 'Schedule' | 'Remove';
    }
    /** @name SelendraRuntimeRuntime (61) */
    type SelendraRuntimeRuntime = Null;
    /** @name PalletIndicesEvent (62) */
    interface PalletIndicesEvent extends Enum {
        readonly isIndexAssigned: boolean;
        readonly asIndexAssigned: {
            readonly who: AccountId32;
            readonly index: u32;
        } & Struct;
        readonly isIndexFreed: boolean;
        readonly asIndexFreed: {
            readonly index: u32;
        } & Struct;
        readonly isIndexFrozen: boolean;
        readonly asIndexFrozen: {
            readonly index: u32;
            readonly who: AccountId32;
        } & Struct;
        readonly type: 'IndexAssigned' | 'IndexFreed' | 'IndexFrozen';
    }
    /** @name PalletIdentityEvent (63) */
    interface PalletIdentityEvent extends Enum {
        readonly isIdentitySet: boolean;
        readonly asIdentitySet: {
            readonly who: AccountId32;
        } & Struct;
        readonly isIdentityCleared: boolean;
        readonly asIdentityCleared: {
            readonly who: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isIdentityKilled: boolean;
        readonly asIdentityKilled: {
            readonly who: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isJudgementRequested: boolean;
        readonly asJudgementRequested: {
            readonly who: AccountId32;
            readonly registrarIndex: u32;
        } & Struct;
        readonly isJudgementUnrequested: boolean;
        readonly asJudgementUnrequested: {
            readonly who: AccountId32;
            readonly registrarIndex: u32;
        } & Struct;
        readonly isJudgementGiven: boolean;
        readonly asJudgementGiven: {
            readonly target: AccountId32;
            readonly registrarIndex: u32;
        } & Struct;
        readonly isRegistrarAdded: boolean;
        readonly asRegistrarAdded: {
            readonly registrarIndex: u32;
        } & Struct;
        readonly isSubIdentityAdded: boolean;
        readonly asSubIdentityAdded: {
            readonly sub: AccountId32;
            readonly main: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isSubIdentityRemoved: boolean;
        readonly asSubIdentityRemoved: {
            readonly sub: AccountId32;
            readonly main: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isSubIdentityRevoked: boolean;
        readonly asSubIdentityRevoked: {
            readonly sub: AccountId32;
            readonly main: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly type: 'IdentitySet' | 'IdentityCleared' | 'IdentityKilled' | 'JudgementRequested' | 'JudgementUnrequested' | 'JudgementGiven' | 'RegistrarAdded' | 'SubIdentityAdded' | 'SubIdentityRemoved' | 'SubIdentityRevoked';
    }
    /** @name PalletStakingPalletEvent (64) */
    interface PalletStakingPalletEvent extends Enum {
        readonly isEraPaid: boolean;
        readonly asEraPaid: ITuple<[u32, u128, u128]>;
        readonly isRewarded: boolean;
        readonly asRewarded: ITuple<[AccountId32, u128]>;
        readonly isSlashed: boolean;
        readonly asSlashed: ITuple<[AccountId32, u128]>;
        readonly isOldSlashingReportDiscarded: boolean;
        readonly asOldSlashingReportDiscarded: u32;
        readonly isStakersElected: boolean;
        readonly isBonded: boolean;
        readonly asBonded: ITuple<[AccountId32, u128]>;
        readonly isUnbonded: boolean;
        readonly asUnbonded: ITuple<[AccountId32, u128]>;
        readonly isWithdrawn: boolean;
        readonly asWithdrawn: ITuple<[AccountId32, u128]>;
        readonly isKicked: boolean;
        readonly asKicked: ITuple<[AccountId32, AccountId32]>;
        readonly isStakingElectionFailed: boolean;
        readonly isChilled: boolean;
        readonly asChilled: AccountId32;
        readonly isPayoutStarted: boolean;
        readonly asPayoutStarted: ITuple<[u32, AccountId32]>;
        readonly isValidatorPrefsSet: boolean;
        readonly asValidatorPrefsSet: ITuple<[AccountId32, PalletStakingValidatorPrefs]>;
        readonly type: 'EraPaid' | 'Rewarded' | 'Slashed' | 'OldSlashingReportDiscarded' | 'StakersElected' | 'Bonded' | 'Unbonded' | 'Withdrawn' | 'Kicked' | 'StakingElectionFailed' | 'Chilled' | 'PayoutStarted' | 'ValidatorPrefsSet';
    }
    /** @name PalletStakingValidatorPrefs (65) */
    interface PalletStakingValidatorPrefs extends Struct {
        readonly commission: Compact<Perbill>;
        readonly blocked: bool;
    }
    /** @name PalletOffencesEvent (69) */
    interface PalletOffencesEvent extends Enum {
        readonly isOffence: boolean;
        readonly asOffence: {
            readonly kind: U8aFixed;
            readonly timeslot: Bytes;
        } & Struct;
        readonly type: 'Offence';
    }
    /** @name PalletSessionEvent (71) */
    interface PalletSessionEvent extends Enum {
        readonly isNewSession: boolean;
        readonly asNewSession: {
            readonly sessionIndex: u32;
        } & Struct;
        readonly type: 'NewSession';
    }
    /** @name PalletGrandpaEvent (72) */
    interface PalletGrandpaEvent extends Enum {
        readonly isNewAuthorities: boolean;
        readonly asNewAuthorities: {
            readonly authoritySet: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
        } & Struct;
        readonly isPaused: boolean;
        readonly isResumed: boolean;
        readonly type: 'NewAuthorities' | 'Paused' | 'Resumed';
    }
    /** @name SpFinalityGrandpaAppPublic (75) */
    interface SpFinalityGrandpaAppPublic extends SpCoreEd25519Public {
    }
    /** @name SpCoreEd25519Public (76) */
    interface SpCoreEd25519Public extends U8aFixed {
    }
    /** @name PalletImOnlineEvent (77) */
    interface PalletImOnlineEvent extends Enum {
        readonly isHeartbeatReceived: boolean;
        readonly asHeartbeatReceived: {
            readonly authorityId: PalletImOnlineSr25519AppSr25519Public;
        } & Struct;
        readonly isAllGood: boolean;
        readonly isSomeOffline: boolean;
        readonly asSomeOffline: {
            readonly offline: Vec<ITuple<[AccountId32, PalletStakingExposure]>>;
        } & Struct;
        readonly type: 'HeartbeatReceived' | 'AllGood' | 'SomeOffline';
    }
    /** @name PalletImOnlineSr25519AppSr25519Public (78) */
    interface PalletImOnlineSr25519AppSr25519Public extends SpCoreSr25519Public {
    }
    /** @name SpCoreSr25519Public (79) */
    interface SpCoreSr25519Public extends U8aFixed {
    }
    /** @name PalletStakingExposure (82) */
    interface PalletStakingExposure extends Struct {
        readonly total: Compact<u128>;
        readonly own: Compact<u128>;
        readonly others: Vec<PalletStakingIndividualExposure>;
    }
    /** @name PalletStakingIndividualExposure (85) */
    interface PalletStakingIndividualExposure extends Struct {
        readonly who: AccountId32;
        readonly value: Compact<u128>;
    }
    /** @name PalletElectionProviderMultiPhaseEvent (86) */
    interface PalletElectionProviderMultiPhaseEvent extends Enum {
        readonly isSolutionStored: boolean;
        readonly asSolutionStored: {
            readonly electionCompute: PalletElectionProviderMultiPhaseElectionCompute;
            readonly prevEjected: bool;
        } & Struct;
        readonly isElectionFinalized: boolean;
        readonly asElectionFinalized: {
            readonly electionCompute: Option<PalletElectionProviderMultiPhaseElectionCompute>;
        } & Struct;
        readonly isRewarded: boolean;
        readonly asRewarded: {
            readonly account: AccountId32;
            readonly value: u128;
        } & Struct;
        readonly isSlashed: boolean;
        readonly asSlashed: {
            readonly account: AccountId32;
            readonly value: u128;
        } & Struct;
        readonly isSignedPhaseStarted: boolean;
        readonly asSignedPhaseStarted: {
            readonly round: u32;
        } & Struct;
        readonly isUnsignedPhaseStarted: boolean;
        readonly asUnsignedPhaseStarted: {
            readonly round: u32;
        } & Struct;
        readonly type: 'SolutionStored' | 'ElectionFinalized' | 'Rewarded' | 'Slashed' | 'SignedPhaseStarted' | 'UnsignedPhaseStarted';
    }
    /** @name PalletElectionProviderMultiPhaseElectionCompute (87) */
    interface PalletElectionProviderMultiPhaseElectionCompute extends Enum {
        readonly isOnChain: boolean;
        readonly isSigned: boolean;
        readonly isUnsigned: boolean;
        readonly isFallback: boolean;
        readonly isEmergency: boolean;
        readonly type: 'OnChain' | 'Signed' | 'Unsigned' | 'Fallback' | 'Emergency';
    }
    /** @name PalletBagsListEvent (89) */
    interface PalletBagsListEvent extends Enum {
        readonly isRebagged: boolean;
        readonly asRebagged: {
            readonly who: AccountId32;
            readonly from: u64;
            readonly to: u64;
        } & Struct;
        readonly isScoreUpdated: boolean;
        readonly asScoreUpdated: {
            readonly who: AccountId32;
            readonly newScore: u64;
        } & Struct;
        readonly type: 'Rebagged' | 'ScoreUpdated';
    }
    /** @name PalletNominationPoolsEvent (90) */
    interface PalletNominationPoolsEvent extends Enum {
        readonly isCreated: boolean;
        readonly asCreated: {
            readonly depositor: AccountId32;
            readonly poolId: u32;
        } & Struct;
        readonly isBonded: boolean;
        readonly asBonded: {
            readonly member: AccountId32;
            readonly poolId: u32;
            readonly bonded: u128;
            readonly joined: bool;
        } & Struct;
        readonly isPaidOut: boolean;
        readonly asPaidOut: {
            readonly member: AccountId32;
            readonly poolId: u32;
            readonly payout: u128;
        } & Struct;
        readonly isUnbonded: boolean;
        readonly asUnbonded: {
            readonly member: AccountId32;
            readonly poolId: u32;
            readonly amount: u128;
        } & Struct;
        readonly isWithdrawn: boolean;
        readonly asWithdrawn: {
            readonly member: AccountId32;
            readonly poolId: u32;
            readonly amount: u128;
        } & Struct;
        readonly isDestroyed: boolean;
        readonly asDestroyed: {
            readonly poolId: u32;
        } & Struct;
        readonly isStateChanged: boolean;
        readonly asStateChanged: {
            readonly poolId: u32;
            readonly newState: PalletNominationPoolsPoolState;
        } & Struct;
        readonly isMemberRemoved: boolean;
        readonly asMemberRemoved: {
            readonly poolId: u32;
            readonly member: AccountId32;
        } & Struct;
        readonly isRolesUpdated: boolean;
        readonly asRolesUpdated: {
            readonly root: Option<AccountId32>;
            readonly stateToggler: Option<AccountId32>;
            readonly nominator: Option<AccountId32>;
        } & Struct;
        readonly type: 'Created' | 'Bonded' | 'PaidOut' | 'Unbonded' | 'Withdrawn' | 'Destroyed' | 'StateChanged' | 'MemberRemoved' | 'RolesUpdated';
    }
    /** @name PalletNominationPoolsPoolState (91) */
    interface PalletNominationPoolsPoolState extends Enum {
        readonly isOpen: boolean;
        readonly isBlocked: boolean;
        readonly isDestroying: boolean;
        readonly type: 'Open' | 'Blocked' | 'Destroying';
    }
    /** @name OrmlAuthorityModuleEvent (93) */
    interface OrmlAuthorityModuleEvent extends Enum {
        readonly isDispatched: boolean;
        readonly asDispatched: {
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isScheduled: boolean;
        readonly asScheduled: {
            readonly origin: SelendraRuntimeOriginCaller;
            readonly index: u32;
        } & Struct;
        readonly isFastTracked: boolean;
        readonly asFastTracked: {
            readonly origin: SelendraRuntimeOriginCaller;
            readonly index: u32;
            readonly when: u32;
        } & Struct;
        readonly isDelayed: boolean;
        readonly asDelayed: {
            readonly origin: SelendraRuntimeOriginCaller;
            readonly index: u32;
            readonly when: u32;
        } & Struct;
        readonly isCancelled: boolean;
        readonly asCancelled: {
            readonly origin: SelendraRuntimeOriginCaller;
            readonly index: u32;
        } & Struct;
        readonly isAuthorizedCall: boolean;
        readonly asAuthorizedCall: {
            readonly hash_: H256;
            readonly caller: Option<AccountId32>;
        } & Struct;
        readonly isRemovedAuthorizedCall: boolean;
        readonly asRemovedAuthorizedCall: {
            readonly hash_: H256;
        } & Struct;
        readonly isTriggeredCallBy: boolean;
        readonly asTriggeredCallBy: {
            readonly hash_: H256;
            readonly caller: AccountId32;
        } & Struct;
        readonly type: 'Dispatched' | 'Scheduled' | 'FastTracked' | 'Delayed' | 'Cancelled' | 'AuthorizedCall' | 'RemovedAuthorizedCall' | 'TriggeredCallBy';
    }
    /** @name SelendraRuntimeOriginCaller (94) */
    interface SelendraRuntimeOriginCaller extends Enum {
        readonly isSystem: boolean;
        readonly asSystem: FrameSupportDispatchRawOrigin;
        readonly isVoid: boolean;
        readonly isAuthority: boolean;
        readonly asAuthority: OrmlAuthorityDelayedOrigin;
        readonly isCouncil: boolean;
        readonly asCouncil: PalletCollectiveRawOrigin;
        readonly isFinancialCouncil: boolean;
        readonly asFinancialCouncil: PalletCollectiveRawOrigin;
        readonly isTechnicalCommittee: boolean;
        readonly asTechnicalCommittee: PalletCollectiveRawOrigin;
        readonly type: 'System' | 'Void' | 'Authority' | 'Council' | 'FinancialCouncil' | 'TechnicalCommittee';
    }
    /** @name FrameSupportDispatchRawOrigin (95) */
    interface FrameSupportDispatchRawOrigin extends Enum {
        readonly isRoot: boolean;
        readonly isSigned: boolean;
        readonly asSigned: AccountId32;
        readonly isNone: boolean;
        readonly type: 'Root' | 'Signed' | 'None';
    }
    /** @name OrmlAuthorityDelayedOrigin (96) */
    interface OrmlAuthorityDelayedOrigin extends Struct {
        readonly delay: u32;
        readonly origin: SelendraRuntimeOriginCaller;
    }
    /** @name PalletCollectiveRawOrigin (97) */
    interface PalletCollectiveRawOrigin extends Enum {
        readonly isMembers: boolean;
        readonly asMembers: ITuple<[u32, u32]>;
        readonly isMember: boolean;
        readonly asMember: AccountId32;
        readonly isPhantom: boolean;
        readonly type: 'Members' | 'Member' | 'Phantom';
    }
    /** @name SpCoreVoid (100) */
    type SpCoreVoid = Null;
    /** @name PalletCollectiveEvent (101) */
    interface PalletCollectiveEvent extends Enum {
        readonly isProposed: boolean;
        readonly asProposed: {
            readonly account: AccountId32;
            readonly proposalIndex: u32;
            readonly proposalHash: H256;
            readonly threshold: u32;
        } & Struct;
        readonly isVoted: boolean;
        readonly asVoted: {
            readonly account: AccountId32;
            readonly proposalHash: H256;
            readonly voted: bool;
            readonly yes: u32;
            readonly no: u32;
        } & Struct;
        readonly isApproved: boolean;
        readonly asApproved: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isDisapproved: boolean;
        readonly asDisapproved: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isExecuted: boolean;
        readonly asExecuted: {
            readonly proposalHash: H256;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isMemberExecuted: boolean;
        readonly asMemberExecuted: {
            readonly proposalHash: H256;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isClosed: boolean;
        readonly asClosed: {
            readonly proposalHash: H256;
            readonly yes: u32;
            readonly no: u32;
        } & Struct;
        readonly type: 'Proposed' | 'Voted' | 'Approved' | 'Disapproved' | 'Executed' | 'MemberExecuted' | 'Closed';
    }
    /** @name PalletMembershipEvent (102) */
    interface PalletMembershipEvent extends Enum {
        readonly isMemberAdded: boolean;
        readonly isMemberRemoved: boolean;
        readonly isMembersSwapped: boolean;
        readonly isMembersReset: boolean;
        readonly isKeyChanged: boolean;
        readonly isDummy: boolean;
        readonly type: 'MemberAdded' | 'MemberRemoved' | 'MembersSwapped' | 'MembersReset' | 'KeyChanged' | 'Dummy';
    }
    /** @name PalletElectionsPhragmenEvent (107) */
    interface PalletElectionsPhragmenEvent extends Enum {
        readonly isNewTerm: boolean;
        readonly asNewTerm: {
            readonly newMembers: Vec<ITuple<[AccountId32, u128]>>;
        } & Struct;
        readonly isEmptyTerm: boolean;
        readonly isElectionError: boolean;
        readonly isMemberKicked: boolean;
        readonly asMemberKicked: {
            readonly member: AccountId32;
        } & Struct;
        readonly isRenounced: boolean;
        readonly asRenounced: {
            readonly candidate: AccountId32;
        } & Struct;
        readonly isCandidateSlashed: boolean;
        readonly asCandidateSlashed: {
            readonly candidate: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isSeatHolderSlashed: boolean;
        readonly asSeatHolderSlashed: {
            readonly seatHolder: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly type: 'NewTerm' | 'EmptyTerm' | 'ElectionError' | 'MemberKicked' | 'Renounced' | 'CandidateSlashed' | 'SeatHolderSlashed';
    }
    /** @name PalletDemocracyEvent (110) */
    interface PalletDemocracyEvent extends Enum {
        readonly isProposed: boolean;
        readonly asProposed: {
            readonly proposalIndex: u32;
            readonly deposit: u128;
        } & Struct;
        readonly isTabled: boolean;
        readonly asTabled: {
            readonly proposalIndex: u32;
            readonly deposit: u128;
            readonly depositors: Vec<AccountId32>;
        } & Struct;
        readonly isExternalTabled: boolean;
        readonly isStarted: boolean;
        readonly asStarted: {
            readonly refIndex: u32;
            readonly threshold: PalletDemocracyVoteThreshold;
        } & Struct;
        readonly isPassed: boolean;
        readonly asPassed: {
            readonly refIndex: u32;
        } & Struct;
        readonly isNotPassed: boolean;
        readonly asNotPassed: {
            readonly refIndex: u32;
        } & Struct;
        readonly isCancelled: boolean;
        readonly asCancelled: {
            readonly refIndex: u32;
        } & Struct;
        readonly isExecuted: boolean;
        readonly asExecuted: {
            readonly refIndex: u32;
            readonly result: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isDelegated: boolean;
        readonly asDelegated: {
            readonly who: AccountId32;
            readonly target: AccountId32;
        } & Struct;
        readonly isUndelegated: boolean;
        readonly asUndelegated: {
            readonly account: AccountId32;
        } & Struct;
        readonly isVetoed: boolean;
        readonly asVetoed: {
            readonly who: AccountId32;
            readonly proposalHash: H256;
            readonly until: u32;
        } & Struct;
        readonly isPreimageNoted: boolean;
        readonly asPreimageNoted: {
            readonly proposalHash: H256;
            readonly who: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isPreimageUsed: boolean;
        readonly asPreimageUsed: {
            readonly proposalHash: H256;
            readonly provider: AccountId32;
            readonly deposit: u128;
        } & Struct;
        readonly isPreimageInvalid: boolean;
        readonly asPreimageInvalid: {
            readonly proposalHash: H256;
            readonly refIndex: u32;
        } & Struct;
        readonly isPreimageMissing: boolean;
        readonly asPreimageMissing: {
            readonly proposalHash: H256;
            readonly refIndex: u32;
        } & Struct;
        readonly isPreimageReaped: boolean;
        readonly asPreimageReaped: {
            readonly proposalHash: H256;
            readonly provider: AccountId32;
            readonly deposit: u128;
            readonly reaper: AccountId32;
        } & Struct;
        readonly isBlacklisted: boolean;
        readonly asBlacklisted: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isVoted: boolean;
        readonly asVoted: {
            readonly voter: AccountId32;
            readonly refIndex: u32;
            readonly vote: PalletDemocracyVoteAccountVote;
        } & Struct;
        readonly isSeconded: boolean;
        readonly asSeconded: {
            readonly seconder: AccountId32;
            readonly propIndex: u32;
        } & Struct;
        readonly type: 'Proposed' | 'Tabled' | 'ExternalTabled' | 'Started' | 'Passed' | 'NotPassed' | 'Cancelled' | 'Executed' | 'Delegated' | 'Undelegated' | 'Vetoed' | 'PreimageNoted' | 'PreimageUsed' | 'PreimageInvalid' | 'PreimageMissing' | 'PreimageReaped' | 'Blacklisted' | 'Voted' | 'Seconded';
    }
    /** @name PalletDemocracyVoteThreshold (112) */
    interface PalletDemocracyVoteThreshold extends Enum {
        readonly isSuperMajorityApprove: boolean;
        readonly isSuperMajorityAgainst: boolean;
        readonly isSimpleMajority: boolean;
        readonly type: 'SuperMajorityApprove' | 'SuperMajorityAgainst' | 'SimpleMajority';
    }
    /** @name PalletDemocracyVoteAccountVote (113) */
    interface PalletDemocracyVoteAccountVote extends Enum {
        readonly isStandard: boolean;
        readonly asStandard: {
            readonly vote: Vote;
            readonly balance: u128;
        } & Struct;
        readonly isSplit: boolean;
        readonly asSplit: {
            readonly aye: u128;
            readonly nay: u128;
        } & Struct;
        readonly type: 'Standard' | 'Split';
    }
    /** @name OrmlOracleModuleEvent (115) */
    interface OrmlOracleModuleEvent extends Enum {
        readonly isNewFeedData: boolean;
        readonly asNewFeedData: {
            readonly sender: AccountId32;
            readonly values: Vec<ITuple<[SelendraPrimitivesCurrencyCurrencyId, u128]>>;
        } & Struct;
        readonly type: 'NewFeedData';
    }
    /** @name OrmlAuctionModuleEvent (119) */
    interface OrmlAuctionModuleEvent extends Enum {
        readonly isBid: boolean;
        readonly asBid: {
            readonly auctionId: u32;
            readonly bidder: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly type: 'Bid';
    }
    /** @name ModulePricesModuleEvent (120) */
    interface ModulePricesModuleEvent extends Enum {
        readonly isLockPrice: boolean;
        readonly asLockPrice: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly lockedPrice: u128;
        } & Struct;
        readonly isUnlockPrice: boolean;
        readonly asUnlockPrice: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly type: 'LockPrice' | 'UnlockPrice';
    }
    /** @name ModuleDexModuleEvent (121) */
    interface ModuleDexModuleEvent extends Enum {
        readonly isAddProvision: boolean;
        readonly asAddProvision: {
            readonly who: AccountId32;
            readonly currency0: SelendraPrimitivesCurrencyCurrencyId;
            readonly contribution0: u128;
            readonly currency1: SelendraPrimitivesCurrencyCurrencyId;
            readonly contribution1: u128;
        } & Struct;
        readonly isAddLiquidity: boolean;
        readonly asAddLiquidity: {
            readonly who: AccountId32;
            readonly currency0: SelendraPrimitivesCurrencyCurrencyId;
            readonly pool0: u128;
            readonly currency1: SelendraPrimitivesCurrencyCurrencyId;
            readonly pool1: u128;
            readonly shareIncrement: u128;
        } & Struct;
        readonly isRemoveLiquidity: boolean;
        readonly asRemoveLiquidity: {
            readonly who: AccountId32;
            readonly currency0: SelendraPrimitivesCurrencyCurrencyId;
            readonly pool0: u128;
            readonly currency1: SelendraPrimitivesCurrencyCurrencyId;
            readonly pool1: u128;
            readonly shareDecrement: u128;
        } & Struct;
        readonly isSwap: boolean;
        readonly asSwap: {
            readonly trader: AccountId32;
            readonly path: Vec<SelendraPrimitivesCurrencyCurrencyId>;
            readonly liquidityChanges: Vec<u128>;
        } & Struct;
        readonly isEnableTradingPair: boolean;
        readonly asEnableTradingPair: {
            readonly tradingPair: SelendraPrimitivesTradingPair;
        } & Struct;
        readonly isListProvisioning: boolean;
        readonly asListProvisioning: {
            readonly tradingPair: SelendraPrimitivesTradingPair;
        } & Struct;
        readonly isDisableTradingPair: boolean;
        readonly asDisableTradingPair: {
            readonly tradingPair: SelendraPrimitivesTradingPair;
        } & Struct;
        readonly isProvisioningToEnabled: boolean;
        readonly asProvisioningToEnabled: {
            readonly tradingPair: SelendraPrimitivesTradingPair;
            readonly pool0: u128;
            readonly pool1: u128;
            readonly shareAmount: u128;
        } & Struct;
        readonly isRefundProvision: boolean;
        readonly asRefundProvision: {
            readonly who: AccountId32;
            readonly currency0: SelendraPrimitivesCurrencyCurrencyId;
            readonly contribution0: u128;
            readonly currency1: SelendraPrimitivesCurrencyCurrencyId;
            readonly contribution1: u128;
        } & Struct;
        readonly isProvisioningAborted: boolean;
        readonly asProvisioningAborted: {
            readonly tradingPair: SelendraPrimitivesTradingPair;
            readonly accumulatedProvision0: u128;
            readonly accumulatedProvision1: u128;
        } & Struct;
        readonly type: 'AddProvision' | 'AddLiquidity' | 'RemoveLiquidity' | 'Swap' | 'EnableTradingPair' | 'ListProvisioning' | 'DisableTradingPair' | 'ProvisioningToEnabled' | 'RefundProvision' | 'ProvisioningAborted';
    }
    /** @name SelendraPrimitivesTradingPair (123) */
    interface SelendraPrimitivesTradingPair extends ITuple<[SelendraPrimitivesCurrencyCurrencyId, SelendraPrimitivesCurrencyCurrencyId]> {
    }
    /** @name ModuleAuctionManagerModuleEvent (124) */
    interface ModuleAuctionManagerModuleEvent extends Enum {
        readonly isNewCollateralAuction: boolean;
        readonly asNewCollateralAuction: {
            readonly auctionId: u32;
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly collateralAmount: u128;
            readonly targetBidPrice: u128;
        } & Struct;
        readonly isCancelAuction: boolean;
        readonly asCancelAuction: {
            readonly auctionId: u32;
        } & Struct;
        readonly isCollateralAuctionDealt: boolean;
        readonly asCollateralAuctionDealt: {
            readonly auctionId: u32;
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly collateralAmount: u128;
            readonly winner: AccountId32;
            readonly paymentAmount: u128;
        } & Struct;
        readonly isDexTakeCollateralAuction: boolean;
        readonly asDexTakeCollateralAuction: {
            readonly auctionId: u32;
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly collateralAmount: u128;
            readonly supplyCollateralAmount: u128;
            readonly targetStableAmount: u128;
        } & Struct;
        readonly isCollateralAuctionAborted: boolean;
        readonly asCollateralAuctionAborted: {
            readonly auctionId: u32;
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly collateralAmount: u128;
            readonly targetStableAmount: u128;
            readonly refundRecipient: AccountId32;
        } & Struct;
        readonly type: 'NewCollateralAuction' | 'CancelAuction' | 'CollateralAuctionDealt' | 'DexTakeCollateralAuction' | 'CollateralAuctionAborted';
    }
    /** @name ModuleLoansModuleEvent (125) */
    interface ModuleLoansModuleEvent extends Enum {
        readonly isPositionUpdated: boolean;
        readonly asPositionUpdated: {
            readonly owner: AccountId32;
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly collateralAdjustment: i128;
            readonly debitAdjustment: i128;
        } & Struct;
        readonly isConfiscateCollateralAndDebit: boolean;
        readonly asConfiscateCollateralAndDebit: {
            readonly owner: AccountId32;
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly confiscatedCollateralAmount: u128;
            readonly deductDebitAmount: u128;
        } & Struct;
        readonly isTransferLoan: boolean;
        readonly asTransferLoan: {
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly type: 'PositionUpdated' | 'ConfiscateCollateralAndDebit' | 'TransferLoan';
    }
    /** @name ModuleFunanModuleEvent (127) */
    interface ModuleFunanModuleEvent extends Enum {
        readonly isAuthorization: boolean;
        readonly asAuthorization: {
            readonly authorizer: AccountId32;
            readonly authorizee: AccountId32;
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isUnAuthorization: boolean;
        readonly asUnAuthorization: {
            readonly authorizer: AccountId32;
            readonly authorizee: AccountId32;
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isUnAuthorizationAll: boolean;
        readonly asUnAuthorizationAll: {
            readonly authorizer: AccountId32;
        } & Struct;
        readonly isTransferDebit: boolean;
        readonly asTransferDebit: {
            readonly fromCurrency: SelendraPrimitivesCurrencyCurrencyId;
            readonly toCurrency: SelendraPrimitivesCurrencyCurrencyId;
            readonly amount: u128;
        } & Struct;
        readonly type: 'Authorization' | 'UnAuthorization' | 'UnAuthorizationAll' | 'TransferDebit';
    }
    /** @name ModuleCdpTreasuryModuleEvent (128) */
    interface ModuleCdpTreasuryModuleEvent extends Enum {
        readonly isExpectedCollateralAuctionSizeUpdated: boolean;
        readonly asExpectedCollateralAuctionSizeUpdated: {
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly newSize: u128;
        } & Struct;
        readonly type: 'ExpectedCollateralAuctionSizeUpdated';
    }
    /** @name ModuleCdpEngineModuleEvent (129) */
    interface ModuleCdpEngineModuleEvent extends Enum {
        readonly isLiquidateUnsafeCDP: boolean;
        readonly asLiquidateUnsafeCDP: {
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly owner: AccountId32;
            readonly collateralAmount: u128;
            readonly badDebtValue: u128;
            readonly targetAmount: u128;
        } & Struct;
        readonly isSettleCDPInDebit: boolean;
        readonly asSettleCDPInDebit: {
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly owner: AccountId32;
        } & Struct;
        readonly isCloseCDPInDebitByDEX: boolean;
        readonly asCloseCDPInDebitByDEX: {
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly owner: AccountId32;
            readonly soldCollateralAmount: u128;
            readonly refundCollateralAmount: u128;
            readonly debitValue: u128;
        } & Struct;
        readonly isInterestRatePerSecUpdated: boolean;
        readonly asInterestRatePerSecUpdated: {
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly newInterestRatePerSec: Option<u128>;
        } & Struct;
        readonly isLiquidationRatioUpdated: boolean;
        readonly asLiquidationRatioUpdated: {
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly newLiquidationRatio: Option<u128>;
        } & Struct;
        readonly isLiquidationPenaltyUpdated: boolean;
        readonly asLiquidationPenaltyUpdated: {
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly newLiquidationPenalty: Option<u128>;
        } & Struct;
        readonly isRequiredCollateralRatioUpdated: boolean;
        readonly asRequiredCollateralRatioUpdated: {
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly newRequiredCollateralRatio: Option<u128>;
        } & Struct;
        readonly isMaximumTotalDebitValueUpdated: boolean;
        readonly asMaximumTotalDebitValueUpdated: {
            readonly collateralType: SelendraPrimitivesCurrencyCurrencyId;
            readonly newTotalDebitValue: u128;
        } & Struct;
        readonly type: 'LiquidateUnsafeCDP' | 'SettleCDPInDebit' | 'CloseCDPInDebitByDEX' | 'InterestRatePerSecUpdated' | 'LiquidationRatioUpdated' | 'LiquidationPenaltyUpdated' | 'RequiredCollateralRatioUpdated' | 'MaximumTotalDebitValueUpdated';
    }
    /** @name ModuleEmergencyShutdownModuleEvent (131) */
    interface ModuleEmergencyShutdownModuleEvent extends Enum {
        readonly isShutdown: boolean;
        readonly asShutdown: {
            readonly blockNumber: u32;
        } & Struct;
        readonly isOpenRefund: boolean;
        readonly asOpenRefund: {
            readonly blockNumber: u32;
        } & Struct;
        readonly isRefund: boolean;
        readonly asRefund: {
            readonly who: AccountId32;
            readonly stableCoinAmount: u128;
            readonly refundList: Vec<ITuple<[SelendraPrimitivesCurrencyCurrencyId, u128]>>;
        } & Struct;
        readonly type: 'Shutdown' | 'OpenRefund' | 'Refund';
    }
    /** @name ModuleIncentivesModuleEvent (134) */
    interface ModuleIncentivesModuleEvent extends Enum {
        readonly isDepositDexShare: boolean;
        readonly asDepositDexShare: {
            readonly who: AccountId32;
            readonly dexShareType: SelendraPrimitivesCurrencyCurrencyId;
            readonly deposit: u128;
        } & Struct;
        readonly isWithdrawDexShare: boolean;
        readonly asWithdrawDexShare: {
            readonly who: AccountId32;
            readonly dexShareType: SelendraPrimitivesCurrencyCurrencyId;
            readonly withdraw: u128;
        } & Struct;
        readonly isClaimRewards: boolean;
        readonly asClaimRewards: {
            readonly who: AccountId32;
            readonly pool: ModuleSupportIncentivesPoolId;
            readonly rewardCurrencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly actualAmount: u128;
            readonly deductionAmount: u128;
        } & Struct;
        readonly isIncentiveRewardAmountUpdated: boolean;
        readonly asIncentiveRewardAmountUpdated: {
            readonly pool: ModuleSupportIncentivesPoolId;
            readonly rewardCurrencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly rewardAmountPerPeriod: u128;
        } & Struct;
        readonly isSavingRewardRateUpdated: boolean;
        readonly asSavingRewardRateUpdated: {
            readonly pool: ModuleSupportIncentivesPoolId;
            readonly rewardRatePerPeriod: u128;
        } & Struct;
        readonly isClaimRewardDeductionRateUpdated: boolean;
        readonly asClaimRewardDeductionRateUpdated: {
            readonly pool: ModuleSupportIncentivesPoolId;
            readonly deductionRate: u128;
        } & Struct;
        readonly type: 'DepositDexShare' | 'WithdrawDexShare' | 'ClaimRewards' | 'IncentiveRewardAmountUpdated' | 'SavingRewardRateUpdated' | 'ClaimRewardDeductionRateUpdated';
    }
    /** @name ModuleSupportIncentivesPoolId (135) */
    interface ModuleSupportIncentivesPoolId extends Enum {
        readonly isLoans: boolean;
        readonly asLoans: SelendraPrimitivesCurrencyCurrencyId;
        readonly isDex: boolean;
        readonly asDex: SelendraPrimitivesCurrencyCurrencyId;
        readonly type: 'Loans' | 'Dex';
    }
    /** @name ModuleNftModuleEvent (136) */
    interface ModuleNftModuleEvent extends Enum {
        readonly isCreatedClass: boolean;
        readonly asCreatedClass: {
            readonly owner: AccountId32;
            readonly classId: u32;
        } & Struct;
        readonly isMintedToken: boolean;
        readonly asMintedToken: {
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly classId: u32;
            readonly quantity: u32;
        } & Struct;
        readonly isTransferredToken: boolean;
        readonly asTransferredToken: {
            readonly from: AccountId32;
            readonly to: AccountId32;
            readonly classId: u32;
            readonly tokenId: u64;
        } & Struct;
        readonly isBurnedToken: boolean;
        readonly asBurnedToken: {
            readonly owner: AccountId32;
            readonly classId: u32;
            readonly tokenId: u64;
        } & Struct;
        readonly isBurnedTokenWithRemark: boolean;
        readonly asBurnedTokenWithRemark: {
            readonly owner: AccountId32;
            readonly classId: u32;
            readonly tokenId: u64;
            readonly remarkHash: H256;
        } & Struct;
        readonly isDestroyedClass: boolean;
        readonly asDestroyedClass: {
            readonly owner: AccountId32;
            readonly classId: u32;
        } & Struct;
        readonly type: 'CreatedClass' | 'MintedToken' | 'TransferredToken' | 'BurnedToken' | 'BurnedTokenWithRemark' | 'DestroyedClass';
    }
    /** @name ModuleAssetRegistryModuleEvent (137) */
    interface ModuleAssetRegistryModuleEvent extends Enum {
        readonly isAssetRegistered: boolean;
        readonly asAssetRegistered: {
            readonly assetId: SelendraPrimitivesCurrencyAssetIds;
            readonly metadata: SelendraPrimitivesCurrencyAssetMetadata;
        } & Struct;
        readonly isAssetUpdated: boolean;
        readonly asAssetUpdated: {
            readonly assetId: SelendraPrimitivesCurrencyAssetIds;
            readonly metadata: SelendraPrimitivesCurrencyAssetMetadata;
        } & Struct;
        readonly type: 'AssetRegistered' | 'AssetUpdated';
    }
    /** @name SelendraPrimitivesCurrencyAssetIds (138) */
    interface SelendraPrimitivesCurrencyAssetIds extends Enum {
        readonly isErc20: boolean;
        readonly asErc20: H160;
        readonly isStableAssetId: boolean;
        readonly asStableAssetId: u32;
        readonly isForeignAssetId: boolean;
        readonly asForeignAssetId: u16;
        readonly isNativeAssetId: boolean;
        readonly asNativeAssetId: SelendraPrimitivesCurrencyCurrencyId;
        readonly type: 'Erc20' | 'StableAssetId' | 'ForeignAssetId' | 'NativeAssetId';
    }
    /** @name SelendraPrimitivesCurrencyAssetMetadata (139) */
    interface SelendraPrimitivesCurrencyAssetMetadata extends Struct {
        readonly name: Bytes;
        readonly symbol: Bytes;
        readonly decimals: u8;
        readonly minimalBalance: u128;
    }
    /** @name ModuleEvmModuleEvent (140) */
    interface ModuleEvmModuleEvent extends Enum {
        readonly isCreated: boolean;
        readonly asCreated: {
            readonly from: H160;
            readonly contract: H160;
            readonly logs: Vec<EthereumLog>;
            readonly usedGas: u64;
            readonly usedStorage: i32;
        } & Struct;
        readonly isCreatedFailed: boolean;
        readonly asCreatedFailed: {
            readonly from: H160;
            readonly contract: H160;
            readonly exitReason: EvmCoreErrorExitReason;
            readonly logs: Vec<EthereumLog>;
            readonly usedGas: u64;
            readonly usedStorage: i32;
        } & Struct;
        readonly isExecuted: boolean;
        readonly asExecuted: {
            readonly from: H160;
            readonly contract: H160;
            readonly logs: Vec<EthereumLog>;
            readonly usedGas: u64;
            readonly usedStorage: i32;
        } & Struct;
        readonly isExecutedFailed: boolean;
        readonly asExecutedFailed: {
            readonly from: H160;
            readonly contract: H160;
            readonly exitReason: EvmCoreErrorExitReason;
            readonly output: Bytes;
            readonly logs: Vec<EthereumLog>;
            readonly usedGas: u64;
            readonly usedStorage: i32;
        } & Struct;
        readonly isTransferredMaintainer: boolean;
        readonly asTransferredMaintainer: {
            readonly contract: H160;
            readonly newMaintainer: H160;
        } & Struct;
        readonly isContractDevelopmentEnabled: boolean;
        readonly asContractDevelopmentEnabled: {
            readonly who: AccountId32;
        } & Struct;
        readonly isContractDevelopmentDisabled: boolean;
        readonly asContractDevelopmentDisabled: {
            readonly who: AccountId32;
        } & Struct;
        readonly isContractPublished: boolean;
        readonly asContractPublished: {
            readonly contract: H160;
        } & Struct;
        readonly isContractSetCode: boolean;
        readonly asContractSetCode: {
            readonly contract: H160;
        } & Struct;
        readonly isContractSelfdestructed: boolean;
        readonly asContractSelfdestructed: {
            readonly contract: H160;
        } & Struct;
        readonly type: 'Created' | 'CreatedFailed' | 'Executed' | 'ExecutedFailed' | 'TransferredMaintainer' | 'ContractDevelopmentEnabled' | 'ContractDevelopmentDisabled' | 'ContractPublished' | 'ContractSetCode' | 'ContractSelfdestructed';
    }
    /** @name EthereumLog (142) */
    interface EthereumLog extends Struct {
        readonly address: H160;
        readonly topics: Vec<H256>;
        readonly data: Bytes;
    }
    /** @name EvmCoreErrorExitReason (145) */
    interface EvmCoreErrorExitReason extends Enum {
        readonly isSucceed: boolean;
        readonly asSucceed: EvmCoreErrorExitSucceed;
        readonly isError: boolean;
        readonly asError: EvmCoreErrorExitError;
        readonly isRevert: boolean;
        readonly asRevert: EvmCoreErrorExitRevert;
        readonly isFatal: boolean;
        readonly asFatal: EvmCoreErrorExitFatal;
        readonly type: 'Succeed' | 'Error' | 'Revert' | 'Fatal';
    }
    /** @name EvmCoreErrorExitSucceed (146) */
    interface EvmCoreErrorExitSucceed extends Enum {
        readonly isStopped: boolean;
        readonly isReturned: boolean;
        readonly isSuicided: boolean;
        readonly type: 'Stopped' | 'Returned' | 'Suicided';
    }
    /** @name EvmCoreErrorExitError (147) */
    interface EvmCoreErrorExitError extends Enum {
        readonly isStackUnderflow: boolean;
        readonly isStackOverflow: boolean;
        readonly isInvalidJump: boolean;
        readonly isInvalidRange: boolean;
        readonly isDesignatedInvalid: boolean;
        readonly isCallTooDeep: boolean;
        readonly isCreateCollision: boolean;
        readonly isCreateContractLimit: boolean;
        readonly isOutOfOffset: boolean;
        readonly isOutOfGas: boolean;
        readonly isOutOfFund: boolean;
        readonly isPcUnderflow: boolean;
        readonly isCreateEmpty: boolean;
        readonly isOther: boolean;
        readonly asOther: Text;
        readonly isInvalidCode: boolean;
        readonly type: 'StackUnderflow' | 'StackOverflow' | 'InvalidJump' | 'InvalidRange' | 'DesignatedInvalid' | 'CallTooDeep' | 'CreateCollision' | 'CreateContractLimit' | 'OutOfOffset' | 'OutOfGas' | 'OutOfFund' | 'PcUnderflow' | 'CreateEmpty' | 'Other' | 'InvalidCode';
    }
    /** @name EvmCoreErrorExitRevert (150) */
    interface EvmCoreErrorExitRevert extends Enum {
        readonly isReverted: boolean;
        readonly type: 'Reverted';
    }
    /** @name EvmCoreErrorExitFatal (151) */
    interface EvmCoreErrorExitFatal extends Enum {
        readonly isNotSupported: boolean;
        readonly isUnhandledInterrupt: boolean;
        readonly isCallErrorAsFatal: boolean;
        readonly asCallErrorAsFatal: EvmCoreErrorExitError;
        readonly isOther: boolean;
        readonly asOther: Text;
        readonly type: 'NotSupported' | 'UnhandledInterrupt' | 'CallErrorAsFatal' | 'Other';
    }
    /** @name ModuleEvmAccountsModuleEvent (152) */
    interface ModuleEvmAccountsModuleEvent extends Enum {
        readonly isClaimAccount: boolean;
        readonly asClaimAccount: {
            readonly accountId: AccountId32;
            readonly evmAddress: H160;
        } & Struct;
        readonly type: 'ClaimAccount';
    }
    /** @name ModuleStableAssetEvent (153) */
    interface ModuleStableAssetEvent extends Enum {
        readonly isCreatePool: boolean;
        readonly asCreatePool: {
            readonly poolId: u32;
            readonly a: u128;
            readonly swapId: AccountId32;
            readonly palletId: AccountId32;
        } & Struct;
        readonly isMinted: boolean;
        readonly asMinted: {
            readonly minter: AccountId32;
            readonly poolId: u32;
            readonly a: u128;
            readonly inputAmounts: Vec<u128>;
            readonly minOutputAmount: u128;
            readonly balances: Vec<u128>;
            readonly totalSupply: u128;
            readonly feeAmount: u128;
            readonly outputAmount: u128;
        } & Struct;
        readonly isTokenSwapped: boolean;
        readonly asTokenSwapped: {
            readonly swapper: AccountId32;
            readonly poolId: u32;
            readonly a: u128;
            readonly inputAsset: SelendraPrimitivesCurrencyCurrencyId;
            readonly outputAsset: SelendraPrimitivesCurrencyCurrencyId;
            readonly inputAmount: u128;
            readonly minOutputAmount: u128;
            readonly balances: Vec<u128>;
            readonly totalSupply: u128;
            readonly outputAmount: u128;
        } & Struct;
        readonly isRedeemedProportion: boolean;
        readonly asRedeemedProportion: {
            readonly redeemer: AccountId32;
            readonly poolId: u32;
            readonly a: u128;
            readonly inputAmount: u128;
            readonly minOutputAmounts: Vec<u128>;
            readonly balances: Vec<u128>;
            readonly totalSupply: u128;
            readonly feeAmount: u128;
            readonly outputAmounts: Vec<u128>;
        } & Struct;
        readonly isRedeemedSingle: boolean;
        readonly asRedeemedSingle: {
            readonly redeemer: AccountId32;
            readonly poolId: u32;
            readonly a: u128;
            readonly inputAmount: u128;
            readonly outputAsset: SelendraPrimitivesCurrencyCurrencyId;
            readonly minOutputAmount: u128;
            readonly balances: Vec<u128>;
            readonly totalSupply: u128;
            readonly feeAmount: u128;
            readonly outputAmount: u128;
        } & Struct;
        readonly isRedeemedMulti: boolean;
        readonly asRedeemedMulti: {
            readonly redeemer: AccountId32;
            readonly poolId: u32;
            readonly a: u128;
            readonly outputAmounts: Vec<u128>;
            readonly maxInputAmount: u128;
            readonly balances: Vec<u128>;
            readonly totalSupply: u128;
            readonly feeAmount: u128;
            readonly inputAmount: u128;
        } & Struct;
        readonly isBalanceUpdated: boolean;
        readonly asBalanceUpdated: {
            readonly poolId: u32;
            readonly oldBalances: Vec<u128>;
            readonly newBalances: Vec<u128>;
        } & Struct;
        readonly isYieldCollected: boolean;
        readonly asYieldCollected: {
            readonly poolId: u32;
            readonly a: u128;
            readonly oldTotalSupply: u128;
            readonly newTotalSupply: u128;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isFeeCollected: boolean;
        readonly asFeeCollected: {
            readonly poolId: u32;
            readonly a: u128;
            readonly oldBalances: Vec<u128>;
            readonly newBalances: Vec<u128>;
            readonly oldTotalSupply: u128;
            readonly newTotalSupply: u128;
            readonly who: AccountId32;
            readonly amount: u128;
        } & Struct;
        readonly isAModified: boolean;
        readonly asAModified: {
            readonly poolId: u32;
            readonly value: u128;
            readonly time: u32;
        } & Struct;
        readonly type: 'CreatePool' | 'Minted' | 'TokenSwapped' | 'RedeemedProportion' | 'RedeemedSingle' | 'RedeemedMulti' | 'BalanceUpdated' | 'YieldCollected' | 'FeeCollected' | 'AModified';
    }
    /** @name PalletSudoEvent (154) */
    interface PalletSudoEvent extends Enum {
        readonly isSudid: boolean;
        readonly asSudid: {
            readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly isKeyChanged: boolean;
        readonly asKeyChanged: {
            readonly oldSudoer: Option<AccountId32>;
        } & Struct;
        readonly isSudoAsDone: boolean;
        readonly asSudoAsDone: {
            readonly sudoResult: Result<Null, SpRuntimeDispatchError>;
        } & Struct;
        readonly type: 'Sudid' | 'KeyChanged' | 'SudoAsDone';
    }
    /** @name FrameSystemPhase (155) */
    interface FrameSystemPhase extends Enum {
        readonly isApplyExtrinsic: boolean;
        readonly asApplyExtrinsic: u32;
        readonly isFinalization: boolean;
        readonly isInitialization: boolean;
        readonly type: 'ApplyExtrinsic' | 'Finalization' | 'Initialization';
    }
    /** @name FrameSystemLastRuntimeUpgradeInfo (157) */
    interface FrameSystemLastRuntimeUpgradeInfo extends Struct {
        readonly specVersion: Compact<u32>;
        readonly specName: Text;
    }
    /** @name FrameSystemCall (159) */
    interface FrameSystemCall extends Enum {
        readonly isFillBlock: boolean;
        readonly asFillBlock: {
            readonly ratio: Perbill;
        } & Struct;
        readonly isRemark: boolean;
        readonly asRemark: {
            readonly remark: Bytes;
        } & Struct;
        readonly isSetHeapPages: boolean;
        readonly asSetHeapPages: {
            readonly pages: u64;
        } & Struct;
        readonly isSetCode: boolean;
        readonly asSetCode: {
            readonly code: Bytes;
        } & Struct;
        readonly isSetCodeWithoutChecks: boolean;
        readonly asSetCodeWithoutChecks: {
            readonly code: Bytes;
        } & Struct;
        readonly isSetStorage: boolean;
        readonly asSetStorage: {
            readonly items: Vec<ITuple<[Bytes, Bytes]>>;
        } & Struct;
        readonly isKillStorage: boolean;
        readonly asKillStorage: {
            readonly keys_: Vec<Bytes>;
        } & Struct;
        readonly isKillPrefix: boolean;
        readonly asKillPrefix: {
            readonly prefix: Bytes;
            readonly subkeys: u32;
        } & Struct;
        readonly isRemarkWithEvent: boolean;
        readonly asRemarkWithEvent: {
            readonly remark: Bytes;
        } & Struct;
        readonly type: 'FillBlock' | 'Remark' | 'SetHeapPages' | 'SetCode' | 'SetCodeWithoutChecks' | 'SetStorage' | 'KillStorage' | 'KillPrefix' | 'RemarkWithEvent';
    }
    /** @name FrameSystemLimitsBlockWeights (163) */
    interface FrameSystemLimitsBlockWeights extends Struct {
        readonly baseBlock: u64;
        readonly maxBlock: u64;
        readonly perClass: FrameSupportWeightsPerDispatchClassWeightsPerClass;
    }
    /** @name FrameSupportWeightsPerDispatchClassWeightsPerClass (164) */
    interface FrameSupportWeightsPerDispatchClassWeightsPerClass extends Struct {
        readonly normal: FrameSystemLimitsWeightsPerClass;
        readonly operational: FrameSystemLimitsWeightsPerClass;
        readonly mandatory: FrameSystemLimitsWeightsPerClass;
    }
    /** @name FrameSystemLimitsWeightsPerClass (165) */
    interface FrameSystemLimitsWeightsPerClass extends Struct {
        readonly baseExtrinsic: u64;
        readonly maxExtrinsic: Option<u64>;
        readonly maxTotal: Option<u64>;
        readonly reserved: Option<u64>;
    }
    /** @name FrameSystemLimitsBlockLength (167) */
    interface FrameSystemLimitsBlockLength extends Struct {
        readonly max: FrameSupportWeightsPerDispatchClassU32;
    }
    /** @name FrameSupportWeightsPerDispatchClassU32 (168) */
    interface FrameSupportWeightsPerDispatchClassU32 extends Struct {
        readonly normal: u32;
        readonly operational: u32;
        readonly mandatory: u32;
    }
    /** @name FrameSupportWeightsRuntimeDbWeight (169) */
    interface FrameSupportWeightsRuntimeDbWeight extends Struct {
        readonly read: u64;
        readonly write: u64;
    }
    /** @name SpVersionRuntimeVersion (170) */
    interface SpVersionRuntimeVersion extends Struct {
        readonly specName: Text;
        readonly implName: Text;
        readonly authoringVersion: u32;
        readonly specVersion: u32;
        readonly implVersion: u32;
        readonly apis: Vec<ITuple<[U8aFixed, u32]>>;
        readonly transactionVersion: u32;
        readonly stateVersion: u8;
    }
    /** @name FrameSystemError (174) */
    interface FrameSystemError extends Enum {
        readonly isInvalidSpecName: boolean;
        readonly isSpecVersionNeedsToIncrease: boolean;
        readonly isFailedToExtractRuntimeVersion: boolean;
        readonly isNonDefaultComposite: boolean;
        readonly isNonZeroRefCount: boolean;
        readonly isCallFiltered: boolean;
        readonly type: 'InvalidSpecName' | 'SpecVersionNeedsToIncrease' | 'FailedToExtractRuntimeVersion' | 'NonDefaultComposite' | 'NonZeroRefCount' | 'CallFiltered';
    }
    /** @name PalletTimestampCall (175) */
    interface PalletTimestampCall extends Enum {
        readonly isSet: boolean;
        readonly asSet: {
            readonly now: Compact<u64>;
        } & Struct;
        readonly type: 'Set';
    }
    /** @name PalletSchedulerScheduledV3 (179) */
    interface PalletSchedulerScheduledV3 extends Struct {
        readonly maybeId: Option<Bytes>;
        readonly priority: u8;
        readonly call: FrameSupportScheduleMaybeHashed;
        readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
        readonly origin: SelendraRuntimeOriginCaller;
    }
    /** @name FrameSupportScheduleMaybeHashed (180) */
    interface FrameSupportScheduleMaybeHashed extends Enum {
        readonly isValue: boolean;
        readonly asValue: Call;
        readonly isHash: boolean;
        readonly asHash: H256;
        readonly type: 'Value' | 'Hash';
    }
    /** @name PalletSchedulerCall (182) */
    interface PalletSchedulerCall extends Enum {
        readonly isSchedule: boolean;
        readonly asSchedule: {
            readonly when: u32;
            readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
            readonly priority: u8;
            readonly call: FrameSupportScheduleMaybeHashed;
        } & Struct;
        readonly isCancel: boolean;
        readonly asCancel: {
            readonly when: u32;
            readonly index: u32;
        } & Struct;
        readonly isScheduleNamed: boolean;
        readonly asScheduleNamed: {
            readonly id: Bytes;
            readonly when: u32;
            readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
            readonly priority: u8;
            readonly call: FrameSupportScheduleMaybeHashed;
        } & Struct;
        readonly isCancelNamed: boolean;
        readonly asCancelNamed: {
            readonly id: Bytes;
        } & Struct;
        readonly isScheduleAfter: boolean;
        readonly asScheduleAfter: {
            readonly after: u32;
            readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
            readonly priority: u8;
            readonly call: FrameSupportScheduleMaybeHashed;
        } & Struct;
        readonly isScheduleNamedAfter: boolean;
        readonly asScheduleNamedAfter: {
            readonly id: Bytes;
            readonly after: u32;
            readonly maybePeriodic: Option<ITuple<[u32, u32]>>;
            readonly priority: u8;
            readonly call: FrameSupportScheduleMaybeHashed;
        } & Struct;
        readonly type: 'Schedule' | 'Cancel' | 'ScheduleNamed' | 'CancelNamed' | 'ScheduleAfter' | 'ScheduleNamedAfter';
    }
    /** @name ModuleTransactionPauseModuleCall (184) */
    interface ModuleTransactionPauseModuleCall extends Enum {
        readonly isPauseTransaction: boolean;
        readonly asPauseTransaction: {
            readonly palletName: Bytes;
            readonly functionName: Bytes;
        } & Struct;
        readonly isUnpauseTransaction: boolean;
        readonly asUnpauseTransaction: {
            readonly palletName: Bytes;
            readonly functionName: Bytes;
        } & Struct;
        readonly type: 'PauseTransaction' | 'UnpauseTransaction';
    }
    /** @name PalletPreimageCall (185) */
    interface PalletPreimageCall extends Enum {
        readonly isNotePreimage: boolean;
        readonly asNotePreimage: {
            readonly bytes: Bytes;
        } & Struct;
        readonly isUnnotePreimage: boolean;
        readonly asUnnotePreimage: {
            readonly hash_: H256;
        } & Struct;
        readonly isRequestPreimage: boolean;
        readonly asRequestPreimage: {
            readonly hash_: H256;
        } & Struct;
        readonly isUnrequestPreimage: boolean;
        readonly asUnrequestPreimage: {
            readonly hash_: H256;
        } & Struct;
        readonly type: 'NotePreimage' | 'UnnotePreimage' | 'RequestPreimage' | 'UnrequestPreimage';
    }
    /** @name PalletBalancesCall (186) */
    interface PalletBalancesCall extends Enum {
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly dest: MultiAddress;
            readonly value: Compact<u128>;
        } & Struct;
        readonly isSetBalance: boolean;
        readonly asSetBalance: {
            readonly who: MultiAddress;
            readonly newFree: Compact<u128>;
            readonly newReserved: Compact<u128>;
        } & Struct;
        readonly isForceTransfer: boolean;
        readonly asForceTransfer: {
            readonly source: MultiAddress;
            readonly dest: MultiAddress;
            readonly value: Compact<u128>;
        } & Struct;
        readonly isTransferKeepAlive: boolean;
        readonly asTransferKeepAlive: {
            readonly dest: MultiAddress;
            readonly value: Compact<u128>;
        } & Struct;
        readonly isTransferAll: boolean;
        readonly asTransferAll: {
            readonly dest: MultiAddress;
            readonly keepAlive: bool;
        } & Struct;
        readonly isForceUnreserve: boolean;
        readonly asForceUnreserve: {
            readonly who: MultiAddress;
            readonly amount: u128;
        } & Struct;
        readonly type: 'Transfer' | 'SetBalance' | 'ForceTransfer' | 'TransferKeepAlive' | 'TransferAll' | 'ForceUnreserve';
    }
    /** @name ModuleCurrenciesModuleCall (188) */
    interface ModuleCurrenciesModuleCall extends Enum {
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly dest: MultiAddress;
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isTransferNativeCurrency: boolean;
        readonly asTransferNativeCurrency: {
            readonly dest: MultiAddress;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isUpdateBalance: boolean;
        readonly asUpdateBalance: {
            readonly who: MultiAddress;
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly amount: i128;
        } & Struct;
        readonly isSweepDust: boolean;
        readonly asSweepDust: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly accounts: Vec<AccountId32>;
        } & Struct;
        readonly type: 'Transfer' | 'TransferNativeCurrency' | 'UpdateBalance' | 'SweepDust';
    }
    /** @name ModuleTransactionPaymentModuleCall (189) */
    interface ModuleTransactionPaymentModuleCall extends Enum {
        readonly isSetAlternativeFeeSwapPath: boolean;
        readonly asSetAlternativeFeeSwapPath: {
            readonly feeSwapPath: Option<Vec<SelendraPrimitivesCurrencyCurrencyId>>;
        } & Struct;
        readonly isEnableChargeFeePool: boolean;
        readonly asEnableChargeFeePool: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly swapPath: Vec<SelendraPrimitivesCurrencyCurrencyId>;
            readonly poolSize: u128;
            readonly swapThreshold: u128;
        } & Struct;
        readonly isDisableChargeFeePool: boolean;
        readonly asDisableChargeFeePool: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isWithFeePath: boolean;
        readonly asWithFeePath: {
            readonly feeSwapPath: Vec<SelendraPrimitivesCurrencyCurrencyId>;
            readonly call: Call;
        } & Struct;
        readonly isWithFeeCurrency: boolean;
        readonly asWithFeeCurrency: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly call: Call;
        } & Struct;
        readonly isWithFeePaidBy: boolean;
        readonly asWithFeePaidBy: {
            readonly call: Call;
            readonly payerAddr: AccountId32;
            readonly payerSig: SpRuntimeMultiSignature;
        } & Struct;
        readonly type: 'SetAlternativeFeeSwapPath' | 'EnableChargeFeePool' | 'DisableChargeFeePool' | 'WithFeePath' | 'WithFeeCurrency' | 'WithFeePaidBy';
    }
    /** @name SpRuntimeMultiSignature (191) */
    interface SpRuntimeMultiSignature extends Enum {
        readonly isEd25519: boolean;
        readonly asEd25519: SpCoreEd25519Signature;
        readonly isSr25519: boolean;
        readonly asSr25519: SpCoreSr25519Signature;
        readonly isEcdsa: boolean;
        readonly asEcdsa: SpCoreEcdsaSignature;
        readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa';
    }
    /** @name SpCoreEd25519Signature (192) */
    interface SpCoreEd25519Signature extends U8aFixed {
    }
    /** @name SpCoreSr25519Signature (194) */
    interface SpCoreSr25519Signature extends U8aFixed {
    }
    /** @name SpCoreEcdsaSignature (195) */
    interface SpCoreEcdsaSignature extends U8aFixed {
    }
    /** @name PalletTreasuryCall (197) */
    interface PalletTreasuryCall extends Enum {
        readonly isProposeSpend: boolean;
        readonly asProposeSpend: {
            readonly value: Compact<u128>;
            readonly beneficiary: MultiAddress;
        } & Struct;
        readonly isRejectProposal: boolean;
        readonly asRejectProposal: {
            readonly proposalId: Compact<u32>;
        } & Struct;
        readonly isApproveProposal: boolean;
        readonly asApproveProposal: {
            readonly proposalId: Compact<u32>;
        } & Struct;
        readonly isRemoveApproval: boolean;
        readonly asRemoveApproval: {
            readonly proposalId: Compact<u32>;
        } & Struct;
        readonly type: 'ProposeSpend' | 'RejectProposal' | 'ApproveProposal' | 'RemoveApproval';
    }
    /** @name PalletBountiesCall (198) */
    interface PalletBountiesCall extends Enum {
        readonly isProposeBounty: boolean;
        readonly asProposeBounty: {
            readonly value: Compact<u128>;
            readonly description: Bytes;
        } & Struct;
        readonly isApproveBounty: boolean;
        readonly asApproveBounty: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isProposeCurator: boolean;
        readonly asProposeCurator: {
            readonly bountyId: Compact<u32>;
            readonly curator: MultiAddress;
            readonly fee: Compact<u128>;
        } & Struct;
        readonly isUnassignCurator: boolean;
        readonly asUnassignCurator: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isAcceptCurator: boolean;
        readonly asAcceptCurator: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isAwardBounty: boolean;
        readonly asAwardBounty: {
            readonly bountyId: Compact<u32>;
            readonly beneficiary: MultiAddress;
        } & Struct;
        readonly isClaimBounty: boolean;
        readonly asClaimBounty: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isCloseBounty: boolean;
        readonly asCloseBounty: {
            readonly bountyId: Compact<u32>;
        } & Struct;
        readonly isExtendBountyExpiry: boolean;
        readonly asExtendBountyExpiry: {
            readonly bountyId: Compact<u32>;
            readonly remark: Bytes;
        } & Struct;
        readonly type: 'ProposeBounty' | 'ApproveBounty' | 'ProposeCurator' | 'UnassignCurator' | 'AcceptCurator' | 'AwardBounty' | 'ClaimBounty' | 'CloseBounty' | 'ExtendBountyExpiry';
    }
    /** @name PalletTipsCall (199) */
    interface PalletTipsCall extends Enum {
        readonly isReportAwesome: boolean;
        readonly asReportAwesome: {
            readonly reason: Bytes;
            readonly who: AccountId32;
        } & Struct;
        readonly isRetractTip: boolean;
        readonly asRetractTip: {
            readonly hash_: H256;
        } & Struct;
        readonly isTipNew: boolean;
        readonly asTipNew: {
            readonly reason: Bytes;
            readonly who: AccountId32;
            readonly tipValue: Compact<u128>;
        } & Struct;
        readonly isTip: boolean;
        readonly asTip: {
            readonly hash_: H256;
            readonly tipValue: Compact<u128>;
        } & Struct;
        readonly isCloseTip: boolean;
        readonly asCloseTip: {
            readonly hash_: H256;
        } & Struct;
        readonly isSlashTip: boolean;
        readonly asSlashTip: {
            readonly hash_: H256;
        } & Struct;
        readonly type: 'ReportAwesome' | 'RetractTip' | 'TipNew' | 'Tip' | 'CloseTip' | 'SlashTip';
    }
    /** @name PalletUtilityCall (200) */
    interface PalletUtilityCall extends Enum {
        readonly isBatch: boolean;
        readonly asBatch: {
            readonly calls: Vec<Call>;
        } & Struct;
        readonly isAsDerivative: boolean;
        readonly asAsDerivative: {
            readonly index: u16;
            readonly call: Call;
        } & Struct;
        readonly isBatchAll: boolean;
        readonly asBatchAll: {
            readonly calls: Vec<Call>;
        } & Struct;
        readonly isDispatchAs: boolean;
        readonly asDispatchAs: {
            readonly asOrigin: SelendraRuntimeOriginCaller;
            readonly call: Call;
        } & Struct;
        readonly isForceBatch: boolean;
        readonly asForceBatch: {
            readonly calls: Vec<Call>;
        } & Struct;
        readonly type: 'Batch' | 'AsDerivative' | 'BatchAll' | 'DispatchAs' | 'ForceBatch';
    }
    /** @name PalletMultisigCall (202) */
    interface PalletMultisigCall extends Enum {
        readonly isAsMultiThreshold1: boolean;
        readonly asAsMultiThreshold1: {
            readonly otherSignatories: Vec<AccountId32>;
            readonly call: Call;
        } & Struct;
        readonly isAsMulti: boolean;
        readonly asAsMulti: {
            readonly threshold: u16;
            readonly otherSignatories: Vec<AccountId32>;
            readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
            readonly call: WrapperKeepOpaque<Call>;
            readonly storeCall: bool;
            readonly maxWeight: u64;
        } & Struct;
        readonly isApproveAsMulti: boolean;
        readonly asApproveAsMulti: {
            readonly threshold: u16;
            readonly otherSignatories: Vec<AccountId32>;
            readonly maybeTimepoint: Option<PalletMultisigTimepoint>;
            readonly callHash: U8aFixed;
            readonly maxWeight: u64;
        } & Struct;
        readonly isCancelAsMulti: boolean;
        readonly asCancelAsMulti: {
            readonly threshold: u16;
            readonly otherSignatories: Vec<AccountId32>;
            readonly timepoint: PalletMultisigTimepoint;
            readonly callHash: U8aFixed;
        } & Struct;
        readonly type: 'AsMultiThreshold1' | 'AsMulti' | 'ApproveAsMulti' | 'CancelAsMulti';
    }
    /** @name PalletRecoveryCall (205) */
    interface PalletRecoveryCall extends Enum {
        readonly isAsRecovered: boolean;
        readonly asAsRecovered: {
            readonly account: AccountId32;
            readonly call: Call;
        } & Struct;
        readonly isSetRecovered: boolean;
        readonly asSetRecovered: {
            readonly lost: AccountId32;
            readonly rescuer: AccountId32;
        } & Struct;
        readonly isCreateRecovery: boolean;
        readonly asCreateRecovery: {
            readonly friends: Vec<AccountId32>;
            readonly threshold: u16;
            readonly delayPeriod: u32;
        } & Struct;
        readonly isInitiateRecovery: boolean;
        readonly asInitiateRecovery: {
            readonly account: AccountId32;
        } & Struct;
        readonly isVouchRecovery: boolean;
        readonly asVouchRecovery: {
            readonly lost: AccountId32;
            readonly rescuer: AccountId32;
        } & Struct;
        readonly isClaimRecovery: boolean;
        readonly asClaimRecovery: {
            readonly account: AccountId32;
        } & Struct;
        readonly isCloseRecovery: boolean;
        readonly asCloseRecovery: {
            readonly rescuer: AccountId32;
        } & Struct;
        readonly isRemoveRecovery: boolean;
        readonly isCancelRecovered: boolean;
        readonly asCancelRecovered: {
            readonly account: AccountId32;
        } & Struct;
        readonly type: 'AsRecovered' | 'SetRecovered' | 'CreateRecovery' | 'InitiateRecovery' | 'VouchRecovery' | 'ClaimRecovery' | 'CloseRecovery' | 'RemoveRecovery' | 'CancelRecovered';
    }
    /** @name PalletProxyCall (206) */
    interface PalletProxyCall extends Enum {
        readonly isProxy: boolean;
        readonly asProxy: {
            readonly real: AccountId32;
            readonly forceProxyType: Option<RuntimeCommonProxyType>;
            readonly call: Call;
        } & Struct;
        readonly isAddProxy: boolean;
        readonly asAddProxy: {
            readonly delegate: AccountId32;
            readonly proxyType: RuntimeCommonProxyType;
            readonly delay: u32;
        } & Struct;
        readonly isRemoveProxy: boolean;
        readonly asRemoveProxy: {
            readonly delegate: AccountId32;
            readonly proxyType: RuntimeCommonProxyType;
            readonly delay: u32;
        } & Struct;
        readonly isRemoveProxies: boolean;
        readonly isAnonymous: boolean;
        readonly asAnonymous: {
            readonly proxyType: RuntimeCommonProxyType;
            readonly delay: u32;
            readonly index: u16;
        } & Struct;
        readonly isKillAnonymous: boolean;
        readonly asKillAnonymous: {
            readonly spawner: AccountId32;
            readonly proxyType: RuntimeCommonProxyType;
            readonly index: u16;
            readonly height: Compact<u32>;
            readonly extIndex: Compact<u32>;
        } & Struct;
        readonly isAnnounce: boolean;
        readonly asAnnounce: {
            readonly real: AccountId32;
            readonly callHash: H256;
        } & Struct;
        readonly isRemoveAnnouncement: boolean;
        readonly asRemoveAnnouncement: {
            readonly real: AccountId32;
            readonly callHash: H256;
        } & Struct;
        readonly isRejectAnnouncement: boolean;
        readonly asRejectAnnouncement: {
            readonly delegate: AccountId32;
            readonly callHash: H256;
        } & Struct;
        readonly isProxyAnnounced: boolean;
        readonly asProxyAnnounced: {
            readonly delegate: AccountId32;
            readonly real: AccountId32;
            readonly forceProxyType: Option<RuntimeCommonProxyType>;
            readonly call: Call;
        } & Struct;
        readonly type: 'Proxy' | 'AddProxy' | 'RemoveProxy' | 'RemoveProxies' | 'Anonymous' | 'KillAnonymous' | 'Announce' | 'RemoveAnnouncement' | 'RejectAnnouncement' | 'ProxyAnnounced';
    }
    /** @name ModuleIdleSchedulerModuleCall (208) */
    interface ModuleIdleSchedulerModuleCall extends Enum {
        readonly isScheduleTask: boolean;
        readonly asScheduleTask: {
            readonly task: SelendraRuntimeConfigUtilityConfigScheduledTasks;
        } & Struct;
        readonly type: 'ScheduleTask';
    }
    /** @name PalletIndicesCall (209) */
    interface PalletIndicesCall extends Enum {
        readonly isClaim: boolean;
        readonly asClaim: {
            readonly index: u32;
        } & Struct;
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly new_: AccountId32;
            readonly index: u32;
        } & Struct;
        readonly isFree: boolean;
        readonly asFree: {
            readonly index: u32;
        } & Struct;
        readonly isForceTransfer: boolean;
        readonly asForceTransfer: {
            readonly new_: AccountId32;
            readonly index: u32;
            readonly freeze: bool;
        } & Struct;
        readonly isFreeze: boolean;
        readonly asFreeze: {
            readonly index: u32;
        } & Struct;
        readonly type: 'Claim' | 'Transfer' | 'Free' | 'ForceTransfer' | 'Freeze';
    }
    /** @name PalletIdentityCall (210) */
    interface PalletIdentityCall extends Enum {
        readonly isAddRegistrar: boolean;
        readonly asAddRegistrar: {
            readonly account: AccountId32;
        } & Struct;
        readonly isSetIdentity: boolean;
        readonly asSetIdentity: {
            readonly info: PalletIdentityIdentityInfo;
        } & Struct;
        readonly isSetSubs: boolean;
        readonly asSetSubs: {
            readonly subs: Vec<ITuple<[AccountId32, Data]>>;
        } & Struct;
        readonly isClearIdentity: boolean;
        readonly isRequestJudgement: boolean;
        readonly asRequestJudgement: {
            readonly regIndex: Compact<u32>;
            readonly maxFee: Compact<u128>;
        } & Struct;
        readonly isCancelRequest: boolean;
        readonly asCancelRequest: {
            readonly regIndex: u32;
        } & Struct;
        readonly isSetFee: boolean;
        readonly asSetFee: {
            readonly index: Compact<u32>;
            readonly fee: Compact<u128>;
        } & Struct;
        readonly isSetAccountId: boolean;
        readonly asSetAccountId: {
            readonly index: Compact<u32>;
            readonly new_: AccountId32;
        } & Struct;
        readonly isSetFields: boolean;
        readonly asSetFields: {
            readonly index: Compact<u32>;
            readonly fields: PalletIdentityBitFlags;
        } & Struct;
        readonly isProvideJudgement: boolean;
        readonly asProvideJudgement: {
            readonly regIndex: Compact<u32>;
            readonly target: MultiAddress;
            readonly judgement: PalletIdentityJudgement;
        } & Struct;
        readonly isKillIdentity: boolean;
        readonly asKillIdentity: {
            readonly target: MultiAddress;
        } & Struct;
        readonly isAddSub: boolean;
        readonly asAddSub: {
            readonly sub: MultiAddress;
            readonly data: Data;
        } & Struct;
        readonly isRenameSub: boolean;
        readonly asRenameSub: {
            readonly sub: MultiAddress;
            readonly data: Data;
        } & Struct;
        readonly isRemoveSub: boolean;
        readonly asRemoveSub: {
            readonly sub: MultiAddress;
        } & Struct;
        readonly isQuitSub: boolean;
        readonly type: 'AddRegistrar' | 'SetIdentity' | 'SetSubs' | 'ClearIdentity' | 'RequestJudgement' | 'CancelRequest' | 'SetFee' | 'SetAccountId' | 'SetFields' | 'ProvideJudgement' | 'KillIdentity' | 'AddSub' | 'RenameSub' | 'RemoveSub' | 'QuitSub';
    }
    /** @name PalletIdentityIdentityInfo (211) */
    interface PalletIdentityIdentityInfo extends Struct {
        readonly additional: Vec<ITuple<[Data, Data]>>;
        readonly display: Data;
        readonly legal: Data;
        readonly web: Data;
        readonly riot: Data;
        readonly email: Data;
        readonly pgpFingerprint: Option<U8aFixed>;
        readonly image: Data;
        readonly twitter: Data;
    }
    /** @name PalletIdentityBitFlags (247) */
    interface PalletIdentityBitFlags extends Set {
        readonly isDisplay: boolean;
        readonly isLegal: boolean;
        readonly isWeb: boolean;
        readonly isRiot: boolean;
        readonly isEmail: boolean;
        readonly isPgpFingerprint: boolean;
        readonly isImage: boolean;
        readonly isTwitter: boolean;
    }
    /** @name PalletIdentityIdentityField (248) */
    interface PalletIdentityIdentityField extends Enum {
        readonly isDisplay: boolean;
        readonly isLegal: boolean;
        readonly isWeb: boolean;
        readonly isRiot: boolean;
        readonly isEmail: boolean;
        readonly isPgpFingerprint: boolean;
        readonly isImage: boolean;
        readonly isTwitter: boolean;
        readonly type: 'Display' | 'Legal' | 'Web' | 'Riot' | 'Email' | 'PgpFingerprint' | 'Image' | 'Twitter';
    }
    /** @name PalletIdentityJudgement (249) */
    interface PalletIdentityJudgement extends Enum {
        readonly isUnknown: boolean;
        readonly isFeePaid: boolean;
        readonly asFeePaid: u128;
        readonly isReasonable: boolean;
        readonly isKnownGood: boolean;
        readonly isOutOfDate: boolean;
        readonly isLowQuality: boolean;
        readonly isErroneous: boolean;
        readonly type: 'Unknown' | 'FeePaid' | 'Reasonable' | 'KnownGood' | 'OutOfDate' | 'LowQuality' | 'Erroneous';
    }
    /** @name PalletAuthorshipCall (250) */
    interface PalletAuthorshipCall extends Enum {
        readonly isSetUncles: boolean;
        readonly asSetUncles: {
            readonly newUncles: Vec<SpRuntimeHeader>;
        } & Struct;
        readonly type: 'SetUncles';
    }
    /** @name SpRuntimeHeader (252) */
    interface SpRuntimeHeader extends Struct {
        readonly parentHash: H256;
        readonly number: Compact<u32>;
        readonly stateRoot: H256;
        readonly extrinsicsRoot: H256;
        readonly digest: SpRuntimeDigest;
    }
    /** @name SpRuntimeBlakeTwo256 (253) */
    type SpRuntimeBlakeTwo256 = Null;
    /** @name PalletBabeCall (254) */
    interface PalletBabeCall extends Enum {
        readonly isReportEquivocation: boolean;
        readonly asReportEquivocation: {
            readonly equivocationProof: SpConsensusSlotsEquivocationProof;
            readonly keyOwnerProof: SpSessionMembershipProof;
        } & Struct;
        readonly isReportEquivocationUnsigned: boolean;
        readonly asReportEquivocationUnsigned: {
            readonly equivocationProof: SpConsensusSlotsEquivocationProof;
            readonly keyOwnerProof: SpSessionMembershipProof;
        } & Struct;
        readonly isPlanConfigChange: boolean;
        readonly asPlanConfigChange: {
            readonly config: SpConsensusBabeDigestsNextConfigDescriptor;
        } & Struct;
        readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'PlanConfigChange';
    }
    /** @name SpConsensusSlotsEquivocationProof (255) */
    interface SpConsensusSlotsEquivocationProof extends Struct {
        readonly offender: SpConsensusBabeAppPublic;
        readonly slot: u64;
        readonly firstHeader: SpRuntimeHeader;
        readonly secondHeader: SpRuntimeHeader;
    }
    /** @name SpConsensusBabeAppPublic (256) */
    interface SpConsensusBabeAppPublic extends SpCoreSr25519Public {
    }
    /** @name SpSessionMembershipProof (258) */
    interface SpSessionMembershipProof extends Struct {
        readonly session: u32;
        readonly trieNodes: Vec<Bytes>;
        readonly validatorCount: u32;
    }
    /** @name SpConsensusBabeDigestsNextConfigDescriptor (259) */
    interface SpConsensusBabeDigestsNextConfigDescriptor extends Enum {
        readonly isV1: boolean;
        readonly asV1: {
            readonly c: ITuple<[u64, u64]>;
            readonly allowedSlots: SpConsensusBabeAllowedSlots;
        } & Struct;
        readonly type: 'V1';
    }
    /** @name SpConsensusBabeAllowedSlots (261) */
    interface SpConsensusBabeAllowedSlots extends Enum {
        readonly isPrimarySlots: boolean;
        readonly isPrimaryAndSecondaryPlainSlots: boolean;
        readonly isPrimaryAndSecondaryVRFSlots: boolean;
        readonly type: 'PrimarySlots' | 'PrimaryAndSecondaryPlainSlots' | 'PrimaryAndSecondaryVRFSlots';
    }
    /** @name PalletStakingPalletCall (262) */
    interface PalletStakingPalletCall extends Enum {
        readonly isBond: boolean;
        readonly asBond: {
            readonly controller: MultiAddress;
            readonly value: Compact<u128>;
            readonly payee: PalletStakingRewardDestination;
        } & Struct;
        readonly isBondExtra: boolean;
        readonly asBondExtra: {
            readonly maxAdditional: Compact<u128>;
        } & Struct;
        readonly isUnbond: boolean;
        readonly asUnbond: {
            readonly value: Compact<u128>;
        } & Struct;
        readonly isWithdrawUnbonded: boolean;
        readonly asWithdrawUnbonded: {
            readonly numSlashingSpans: u32;
        } & Struct;
        readonly isValidate: boolean;
        readonly asValidate: {
            readonly prefs: PalletStakingValidatorPrefs;
        } & Struct;
        readonly isNominate: boolean;
        readonly asNominate: {
            readonly targets: Vec<MultiAddress>;
        } & Struct;
        readonly isChill: boolean;
        readonly isSetPayee: boolean;
        readonly asSetPayee: {
            readonly payee: PalletStakingRewardDestination;
        } & Struct;
        readonly isSetController: boolean;
        readonly asSetController: {
            readonly controller: MultiAddress;
        } & Struct;
        readonly isSetValidatorCount: boolean;
        readonly asSetValidatorCount: {
            readonly new_: Compact<u32>;
        } & Struct;
        readonly isIncreaseValidatorCount: boolean;
        readonly asIncreaseValidatorCount: {
            readonly additional: Compact<u32>;
        } & Struct;
        readonly isScaleValidatorCount: boolean;
        readonly asScaleValidatorCount: {
            readonly factor: Percent;
        } & Struct;
        readonly isForceNoEras: boolean;
        readonly isForceNewEra: boolean;
        readonly isSetInvulnerables: boolean;
        readonly asSetInvulnerables: {
            readonly invulnerables: Vec<AccountId32>;
        } & Struct;
        readonly isForceUnstake: boolean;
        readonly asForceUnstake: {
            readonly stash: AccountId32;
            readonly numSlashingSpans: u32;
        } & Struct;
        readonly isForceNewEraAlways: boolean;
        readonly isCancelDeferredSlash: boolean;
        readonly asCancelDeferredSlash: {
            readonly era: u32;
            readonly slashIndices: Vec<u32>;
        } & Struct;
        readonly isPayoutStakers: boolean;
        readonly asPayoutStakers: {
            readonly validatorStash: AccountId32;
            readonly era: u32;
        } & Struct;
        readonly isRebond: boolean;
        readonly asRebond: {
            readonly value: Compact<u128>;
        } & Struct;
        readonly isSetHistoryDepth: boolean;
        readonly asSetHistoryDepth: {
            readonly newHistoryDepth: Compact<u32>;
            readonly eraItemsDeleted: Compact<u32>;
        } & Struct;
        readonly isReapStash: boolean;
        readonly asReapStash: {
            readonly stash: AccountId32;
            readonly numSlashingSpans: u32;
        } & Struct;
        readonly isKick: boolean;
        readonly asKick: {
            readonly who: Vec<MultiAddress>;
        } & Struct;
        readonly isSetStakingConfigs: boolean;
        readonly asSetStakingConfigs: {
            readonly minNominatorBond: PalletStakingPalletConfigOpU128;
            readonly minValidatorBond: PalletStakingPalletConfigOpU128;
            readonly maxNominatorCount: PalletStakingPalletConfigOpU32;
            readonly maxValidatorCount: PalletStakingPalletConfigOpU32;
            readonly chillThreshold: PalletStakingPalletConfigOpPercent;
            readonly minCommission: PalletStakingPalletConfigOpPerbill;
        } & Struct;
        readonly isChillOther: boolean;
        readonly asChillOther: {
            readonly controller: AccountId32;
        } & Struct;
        readonly isForceApplyMinCommission: boolean;
        readonly asForceApplyMinCommission: {
            readonly validatorStash: AccountId32;
        } & Struct;
        readonly type: 'Bond' | 'BondExtra' | 'Unbond' | 'WithdrawUnbonded' | 'Validate' | 'Nominate' | 'Chill' | 'SetPayee' | 'SetController' | 'SetValidatorCount' | 'IncreaseValidatorCount' | 'ScaleValidatorCount' | 'ForceNoEras' | 'ForceNewEra' | 'SetInvulnerables' | 'ForceUnstake' | 'ForceNewEraAlways' | 'CancelDeferredSlash' | 'PayoutStakers' | 'Rebond' | 'SetHistoryDepth' | 'ReapStash' | 'Kick' | 'SetStakingConfigs' | 'ChillOther' | 'ForceApplyMinCommission';
    }
    /** @name PalletStakingRewardDestination (263) */
    interface PalletStakingRewardDestination extends Enum {
        readonly isStaked: boolean;
        readonly isStash: boolean;
        readonly isController: boolean;
        readonly isAccount: boolean;
        readonly asAccount: AccountId32;
        readonly isNone: boolean;
        readonly type: 'Staked' | 'Stash' | 'Controller' | 'Account' | 'None';
    }
    /** @name PalletStakingPalletConfigOpU128 (267) */
    interface PalletStakingPalletConfigOpU128 extends Enum {
        readonly isNoop: boolean;
        readonly isSet: boolean;
        readonly asSet: u128;
        readonly isRemove: boolean;
        readonly type: 'Noop' | 'Set' | 'Remove';
    }
    /** @name PalletStakingPalletConfigOpU32 (268) */
    interface PalletStakingPalletConfigOpU32 extends Enum {
        readonly isNoop: boolean;
        readonly isSet: boolean;
        readonly asSet: u32;
        readonly isRemove: boolean;
        readonly type: 'Noop' | 'Set' | 'Remove';
    }
    /** @name PalletStakingPalletConfigOpPercent (269) */
    interface PalletStakingPalletConfigOpPercent extends Enum {
        readonly isNoop: boolean;
        readonly isSet: boolean;
        readonly asSet: Percent;
        readonly isRemove: boolean;
        readonly type: 'Noop' | 'Set' | 'Remove';
    }
    /** @name PalletStakingPalletConfigOpPerbill (270) */
    interface PalletStakingPalletConfigOpPerbill extends Enum {
        readonly isNoop: boolean;
        readonly isSet: boolean;
        readonly asSet: Perbill;
        readonly isRemove: boolean;
        readonly type: 'Noop' | 'Set' | 'Remove';
    }
    /** @name PalletSessionCall (271) */
    interface PalletSessionCall extends Enum {
        readonly isSetKeys: boolean;
        readonly asSetKeys: {
            readonly keys_: SelendraRuntimeSessionKeys;
            readonly proof: Bytes;
        } & Struct;
        readonly isPurgeKeys: boolean;
        readonly type: 'SetKeys' | 'PurgeKeys';
    }
    /** @name SelendraRuntimeSessionKeys (272) */
    interface SelendraRuntimeSessionKeys extends Struct {
        readonly babe: SpConsensusBabeAppPublic;
        readonly grandpa: SpFinalityGrandpaAppPublic;
        readonly imOnline: PalletImOnlineSr25519AppSr25519Public;
        readonly authorityDiscovery: SpAuthorityDiscoveryAppPublic;
    }
    /** @name SpAuthorityDiscoveryAppPublic (273) */
    interface SpAuthorityDiscoveryAppPublic extends SpCoreSr25519Public {
    }
    /** @name PalletGrandpaCall (274) */
    interface PalletGrandpaCall extends Enum {
        readonly isReportEquivocation: boolean;
        readonly asReportEquivocation: {
            readonly equivocationProof: SpFinalityGrandpaEquivocationProof;
            readonly keyOwnerProof: SpSessionMembershipProof;
        } & Struct;
        readonly isReportEquivocationUnsigned: boolean;
        readonly asReportEquivocationUnsigned: {
            readonly equivocationProof: SpFinalityGrandpaEquivocationProof;
            readonly keyOwnerProof: SpSessionMembershipProof;
        } & Struct;
        readonly isNoteStalled: boolean;
        readonly asNoteStalled: {
            readonly delay: u32;
            readonly bestFinalizedBlockNumber: u32;
        } & Struct;
        readonly type: 'ReportEquivocation' | 'ReportEquivocationUnsigned' | 'NoteStalled';
    }
    /** @name SpFinalityGrandpaEquivocationProof (275) */
    interface SpFinalityGrandpaEquivocationProof extends Struct {
        readonly setId: u64;
        readonly equivocation: SpFinalityGrandpaEquivocation;
    }
    /** @name SpFinalityGrandpaEquivocation (276) */
    interface SpFinalityGrandpaEquivocation extends Enum {
        readonly isPrevote: boolean;
        readonly asPrevote: FinalityGrandpaEquivocationPrevote;
        readonly isPrecommit: boolean;
        readonly asPrecommit: FinalityGrandpaEquivocationPrecommit;
        readonly type: 'Prevote' | 'Precommit';
    }
    /** @name FinalityGrandpaEquivocationPrevote (277) */
    interface FinalityGrandpaEquivocationPrevote extends Struct {
        readonly roundNumber: u64;
        readonly identity: SpFinalityGrandpaAppPublic;
        readonly first: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
        readonly second: ITuple<[FinalityGrandpaPrevote, SpFinalityGrandpaAppSignature]>;
    }
    /** @name FinalityGrandpaPrevote (278) */
    interface FinalityGrandpaPrevote extends Struct {
        readonly targetHash: H256;
        readonly targetNumber: u32;
    }
    /** @name SpFinalityGrandpaAppSignature (279) */
    interface SpFinalityGrandpaAppSignature extends SpCoreEd25519Signature {
    }
    /** @name FinalityGrandpaEquivocationPrecommit (281) */
    interface FinalityGrandpaEquivocationPrecommit extends Struct {
        readonly roundNumber: u64;
        readonly identity: SpFinalityGrandpaAppPublic;
        readonly first: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
        readonly second: ITuple<[FinalityGrandpaPrecommit, SpFinalityGrandpaAppSignature]>;
    }
    /** @name FinalityGrandpaPrecommit (282) */
    interface FinalityGrandpaPrecommit extends Struct {
        readonly targetHash: H256;
        readonly targetNumber: u32;
    }
    /** @name PalletImOnlineCall (284) */
    interface PalletImOnlineCall extends Enum {
        readonly isHeartbeat: boolean;
        readonly asHeartbeat: {
            readonly heartbeat: PalletImOnlineHeartbeat;
            readonly signature: PalletImOnlineSr25519AppSr25519Signature;
        } & Struct;
        readonly type: 'Heartbeat';
    }
    /** @name PalletImOnlineHeartbeat (285) */
    interface PalletImOnlineHeartbeat extends Struct {
        readonly blockNumber: u32;
        readonly networkState: SpCoreOffchainOpaqueNetworkState;
        readonly sessionIndex: u32;
        readonly authorityIndex: u32;
        readonly validatorsLen: u32;
    }
    /** @name SpCoreOffchainOpaqueNetworkState (286) */
    interface SpCoreOffchainOpaqueNetworkState extends Struct {
        readonly peerId: Bytes;
        readonly externalAddresses: Vec<Bytes>;
    }
    /** @name PalletImOnlineSr25519AppSr25519Signature (290) */
    interface PalletImOnlineSr25519AppSr25519Signature extends SpCoreSr25519Signature {
    }
    /** @name PalletElectionProviderMultiPhaseCall (291) */
    interface PalletElectionProviderMultiPhaseCall extends Enum {
        readonly isSubmitUnsigned: boolean;
        readonly asSubmitUnsigned: {
            readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
            readonly witness: PalletElectionProviderMultiPhaseSolutionOrSnapshotSize;
        } & Struct;
        readonly isSetMinimumUntrustedScore: boolean;
        readonly asSetMinimumUntrustedScore: {
            readonly maybeNextScore: Option<SpNposElectionsElectionScore>;
        } & Struct;
        readonly isSetEmergencyElectionResult: boolean;
        readonly asSetEmergencyElectionResult: {
            readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
        } & Struct;
        readonly isSubmit: boolean;
        readonly asSubmit: {
            readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
        } & Struct;
        readonly isGovernanceFallback: boolean;
        readonly asGovernanceFallback: {
            readonly maybeMaxVoters: Option<u32>;
            readonly maybeMaxTargets: Option<u32>;
        } & Struct;
        readonly type: 'SubmitUnsigned' | 'SetMinimumUntrustedScore' | 'SetEmergencyElectionResult' | 'Submit' | 'GovernanceFallback';
    }
    /** @name PalletElectionProviderMultiPhaseRawSolution (292) */
    interface PalletElectionProviderMultiPhaseRawSolution extends Struct {
        readonly solution: SelendraRuntimeConfigConsensusConfigNposSolution16;
        readonly score: SpNposElectionsElectionScore;
        readonly round: u32;
    }
    /** @name SelendraRuntimeConfigConsensusConfigNposSolution16 (293) */
    interface SelendraRuntimeConfigConsensusConfigNposSolution16 extends Struct {
        readonly votes1: Vec<ITuple<[Compact<u32>, Compact<u16>]>>;
        readonly votes2: Vec<ITuple<[Compact<u32>, ITuple<[Compact<u16>, Compact<PerU16>]>, Compact<u16>]>>;
        readonly votes3: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes4: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes5: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes6: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes7: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes8: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes9: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes10: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes11: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes12: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes13: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes14: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes15: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
        readonly votes16: Vec<ITuple<[Compact<u32>, Vec<ITuple<[Compact<u16>, Compact<PerU16>]>>, Compact<u16>]>>;
    }
    /** @name SpNposElectionsElectionScore (344) */
    interface SpNposElectionsElectionScore extends Struct {
        readonly minimalStake: u128;
        readonly sumStake: u128;
        readonly sumStakeSquared: u128;
    }
    /** @name PalletElectionProviderMultiPhaseSolutionOrSnapshotSize (345) */
    interface PalletElectionProviderMultiPhaseSolutionOrSnapshotSize extends Struct {
        readonly voters: Compact<u32>;
        readonly targets: Compact<u32>;
    }
    /** @name SpNposElectionsSupport (349) */
    interface SpNposElectionsSupport extends Struct {
        readonly total: u128;
        readonly voters: Vec<ITuple<[AccountId32, u128]>>;
    }
    /** @name PalletBagsListCall (351) */
    interface PalletBagsListCall extends Enum {
        readonly isRebag: boolean;
        readonly asRebag: {
            readonly dislocated: AccountId32;
        } & Struct;
        readonly isPutInFrontOf: boolean;
        readonly asPutInFrontOf: {
            readonly lighter: AccountId32;
        } & Struct;
        readonly type: 'Rebag' | 'PutInFrontOf';
    }
    /** @name PalletNominationPoolsCall (352) */
    interface PalletNominationPoolsCall extends Enum {
        readonly isJoin: boolean;
        readonly asJoin: {
            readonly amount: Compact<u128>;
            readonly poolId: u32;
        } & Struct;
        readonly isBondExtra: boolean;
        readonly asBondExtra: {
            readonly extra: PalletNominationPoolsBondExtra;
        } & Struct;
        readonly isClaimPayout: boolean;
        readonly isUnbond: boolean;
        readonly asUnbond: {
            readonly memberAccount: AccountId32;
            readonly unbondingPoints: Compact<u128>;
        } & Struct;
        readonly isPoolWithdrawUnbonded: boolean;
        readonly asPoolWithdrawUnbonded: {
            readonly poolId: u32;
            readonly numSlashingSpans: u32;
        } & Struct;
        readonly isWithdrawUnbonded: boolean;
        readonly asWithdrawUnbonded: {
            readonly memberAccount: AccountId32;
            readonly numSlashingSpans: u32;
        } & Struct;
        readonly isCreate: boolean;
        readonly asCreate: {
            readonly amount: Compact<u128>;
            readonly root: AccountId32;
            readonly nominator: AccountId32;
            readonly stateToggler: AccountId32;
        } & Struct;
        readonly isNominate: boolean;
        readonly asNominate: {
            readonly poolId: u32;
            readonly validators: Vec<AccountId32>;
        } & Struct;
        readonly isSetState: boolean;
        readonly asSetState: {
            readonly poolId: u32;
            readonly state: PalletNominationPoolsPoolState;
        } & Struct;
        readonly isSetMetadata: boolean;
        readonly asSetMetadata: {
            readonly poolId: u32;
            readonly metadata: Bytes;
        } & Struct;
        readonly isSetConfigs: boolean;
        readonly asSetConfigs: {
            readonly minJoinBond: PalletNominationPoolsConfigOpU128;
            readonly minCreateBond: PalletNominationPoolsConfigOpU128;
            readonly maxPools: PalletNominationPoolsConfigOpU32;
            readonly maxMembers: PalletNominationPoolsConfigOpU32;
            readonly maxMembersPerPool: PalletNominationPoolsConfigOpU32;
        } & Struct;
        readonly isUpdateRoles: boolean;
        readonly asUpdateRoles: {
            readonly poolId: u32;
            readonly newRoot: PalletNominationPoolsConfigOpAccountId32;
            readonly newNominator: PalletNominationPoolsConfigOpAccountId32;
            readonly newStateToggler: PalletNominationPoolsConfigOpAccountId32;
        } & Struct;
        readonly type: 'Join' | 'BondExtra' | 'ClaimPayout' | 'Unbond' | 'PoolWithdrawUnbonded' | 'WithdrawUnbonded' | 'Create' | 'Nominate' | 'SetState' | 'SetMetadata' | 'SetConfigs' | 'UpdateRoles';
    }
    /** @name PalletNominationPoolsBondExtra (353) */
    interface PalletNominationPoolsBondExtra extends Enum {
        readonly isFreeBalance: boolean;
        readonly asFreeBalance: u128;
        readonly isRewards: boolean;
        readonly type: 'FreeBalance' | 'Rewards';
    }
    /** @name PalletNominationPoolsConfigOpU128 (354) */
    interface PalletNominationPoolsConfigOpU128 extends Enum {
        readonly isNoop: boolean;
        readonly isSet: boolean;
        readonly asSet: u128;
        readonly isRemove: boolean;
        readonly type: 'Noop' | 'Set' | 'Remove';
    }
    /** @name PalletNominationPoolsConfigOpU32 (355) */
    interface PalletNominationPoolsConfigOpU32 extends Enum {
        readonly isNoop: boolean;
        readonly isSet: boolean;
        readonly asSet: u32;
        readonly isRemove: boolean;
        readonly type: 'Noop' | 'Set' | 'Remove';
    }
    /** @name PalletNominationPoolsConfigOpAccountId32 (356) */
    interface PalletNominationPoolsConfigOpAccountId32 extends Enum {
        readonly isNoop: boolean;
        readonly isSet: boolean;
        readonly asSet: AccountId32;
        readonly isRemove: boolean;
        readonly type: 'Noop' | 'Set' | 'Remove';
    }
    /** @name OrmlAuthorityModuleCall (357) */
    interface OrmlAuthorityModuleCall extends Enum {
        readonly isDispatchAs: boolean;
        readonly asDispatchAs: {
            readonly asOrigin: SelendraPrimitivesAuthoritysOriginId;
            readonly call: Call;
        } & Struct;
        readonly isScheduleDispatch: boolean;
        readonly asScheduleDispatch: {
            readonly when: FrameSupportScheduleDispatchTime;
            readonly priority: u8;
            readonly withDelayedOrigin: bool;
            readonly call: Call;
        } & Struct;
        readonly isFastTrackScheduledDispatch: boolean;
        readonly asFastTrackScheduledDispatch: {
            readonly initialOrigin: SelendraRuntimeOriginCaller;
            readonly taskId: u32;
            readonly when: FrameSupportScheduleDispatchTime;
        } & Struct;
        readonly isDelayScheduledDispatch: boolean;
        readonly asDelayScheduledDispatch: {
            readonly initialOrigin: SelendraRuntimeOriginCaller;
            readonly taskId: u32;
            readonly additionalDelay: u32;
        } & Struct;
        readonly isCancelScheduledDispatch: boolean;
        readonly asCancelScheduledDispatch: {
            readonly initialOrigin: SelendraRuntimeOriginCaller;
            readonly taskId: u32;
        } & Struct;
        readonly isAuthorizeCall: boolean;
        readonly asAuthorizeCall: {
            readonly call: Call;
            readonly caller: Option<AccountId32>;
        } & Struct;
        readonly isRemoveAuthorizedCall: boolean;
        readonly asRemoveAuthorizedCall: {
            readonly hash_: H256;
        } & Struct;
        readonly isTriggerCall: boolean;
        readonly asTriggerCall: {
            readonly hash_: H256;
            readonly callWeightBound: Compact<u64>;
        } & Struct;
        readonly type: 'DispatchAs' | 'ScheduleDispatch' | 'FastTrackScheduledDispatch' | 'DelayScheduledDispatch' | 'CancelScheduledDispatch' | 'AuthorizeCall' | 'RemoveAuthorizedCall' | 'TriggerCall';
    }
    /** @name SelendraPrimitivesAuthoritysOriginId (358) */
    interface SelendraPrimitivesAuthoritysOriginId extends Enum {
        readonly isRoot: boolean;
        readonly isTreasury: boolean;
        readonly isFunanTreasury: boolean;
        readonly isTreasuryReserve: boolean;
        readonly type: 'Root' | 'Treasury' | 'FunanTreasury' | 'TreasuryReserve';
    }
    /** @name FrameSupportScheduleDispatchTime (359) */
    interface FrameSupportScheduleDispatchTime extends Enum {
        readonly isAt: boolean;
        readonly asAt: u32;
        readonly isAfter: boolean;
        readonly asAfter: u32;
        readonly type: 'At' | 'After';
    }
    /** @name PalletCollectiveCall (360) */
    interface PalletCollectiveCall extends Enum {
        readonly isSetMembers: boolean;
        readonly asSetMembers: {
            readonly newMembers: Vec<AccountId32>;
            readonly prime: Option<AccountId32>;
            readonly oldCount: u32;
        } & Struct;
        readonly isExecute: boolean;
        readonly asExecute: {
            readonly proposal: Call;
            readonly lengthBound: Compact<u32>;
        } & Struct;
        readonly isPropose: boolean;
        readonly asPropose: {
            readonly threshold: Compact<u32>;
            readonly proposal: Call;
            readonly lengthBound: Compact<u32>;
        } & Struct;
        readonly isVote: boolean;
        readonly asVote: {
            readonly proposal: H256;
            readonly index: Compact<u32>;
            readonly approve: bool;
        } & Struct;
        readonly isClose: boolean;
        readonly asClose: {
            readonly proposalHash: H256;
            readonly index: Compact<u32>;
            readonly proposalWeightBound: Compact<u64>;
            readonly lengthBound: Compact<u32>;
        } & Struct;
        readonly isDisapproveProposal: boolean;
        readonly asDisapproveProposal: {
            readonly proposalHash: H256;
        } & Struct;
        readonly type: 'SetMembers' | 'Execute' | 'Propose' | 'Vote' | 'Close' | 'DisapproveProposal';
    }
    /** @name PalletMembershipCall (361) */
    interface PalletMembershipCall extends Enum {
        readonly isAddMember: boolean;
        readonly asAddMember: {
            readonly who: AccountId32;
        } & Struct;
        readonly isRemoveMember: boolean;
        readonly asRemoveMember: {
            readonly who: AccountId32;
        } & Struct;
        readonly isSwapMember: boolean;
        readonly asSwapMember: {
            readonly remove: AccountId32;
            readonly add: AccountId32;
        } & Struct;
        readonly isResetMembers: boolean;
        readonly asResetMembers: {
            readonly members: Vec<AccountId32>;
        } & Struct;
        readonly isChangeKey: boolean;
        readonly asChangeKey: {
            readonly new_: AccountId32;
        } & Struct;
        readonly isSetPrime: boolean;
        readonly asSetPrime: {
            readonly who: AccountId32;
        } & Struct;
        readonly isClearPrime: boolean;
        readonly type: 'AddMember' | 'RemoveMember' | 'SwapMember' | 'ResetMembers' | 'ChangeKey' | 'SetPrime' | 'ClearPrime';
    }
    /** @name PalletElectionsPhragmenCall (366) */
    interface PalletElectionsPhragmenCall extends Enum {
        readonly isVote: boolean;
        readonly asVote: {
            readonly votes: Vec<AccountId32>;
            readonly value: Compact<u128>;
        } & Struct;
        readonly isRemoveVoter: boolean;
        readonly isSubmitCandidacy: boolean;
        readonly asSubmitCandidacy: {
            readonly candidateCount: Compact<u32>;
        } & Struct;
        readonly isRenounceCandidacy: boolean;
        readonly asRenounceCandidacy: {
            readonly renouncing: PalletElectionsPhragmenRenouncing;
        } & Struct;
        readonly isRemoveMember: boolean;
        readonly asRemoveMember: {
            readonly who: MultiAddress;
            readonly hasReplacement: bool;
        } & Struct;
        readonly isCleanDefunctVoters: boolean;
        readonly asCleanDefunctVoters: {
            readonly numVoters: u32;
            readonly numDefunct: u32;
        } & Struct;
        readonly type: 'Vote' | 'RemoveVoter' | 'SubmitCandidacy' | 'RenounceCandidacy' | 'RemoveMember' | 'CleanDefunctVoters';
    }
    /** @name PalletElectionsPhragmenRenouncing (367) */
    interface PalletElectionsPhragmenRenouncing extends Enum {
        readonly isMember: boolean;
        readonly isRunnerUp: boolean;
        readonly isCandidate: boolean;
        readonly asCandidate: Compact<u32>;
        readonly type: 'Member' | 'RunnerUp' | 'Candidate';
    }
    /** @name PalletDemocracyCall (368) */
    interface PalletDemocracyCall extends Enum {
        readonly isPropose: boolean;
        readonly asPropose: {
            readonly proposalHash: H256;
            readonly value: Compact<u128>;
        } & Struct;
        readonly isSecond: boolean;
        readonly asSecond: {
            readonly proposal: Compact<u32>;
            readonly secondsUpperBound: Compact<u32>;
        } & Struct;
        readonly isVote: boolean;
        readonly asVote: {
            readonly refIndex: Compact<u32>;
            readonly vote: PalletDemocracyVoteAccountVote;
        } & Struct;
        readonly isEmergencyCancel: boolean;
        readonly asEmergencyCancel: {
            readonly refIndex: u32;
        } & Struct;
        readonly isExternalPropose: boolean;
        readonly asExternalPropose: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isExternalProposeMajority: boolean;
        readonly asExternalProposeMajority: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isExternalProposeDefault: boolean;
        readonly asExternalProposeDefault: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isFastTrack: boolean;
        readonly asFastTrack: {
            readonly proposalHash: H256;
            readonly votingPeriod: u32;
            readonly delay: u32;
        } & Struct;
        readonly isVetoExternal: boolean;
        readonly asVetoExternal: {
            readonly proposalHash: H256;
        } & Struct;
        readonly isCancelReferendum: boolean;
        readonly asCancelReferendum: {
            readonly refIndex: Compact<u32>;
        } & Struct;
        readonly isCancelQueued: boolean;
        readonly asCancelQueued: {
            readonly which: u32;
        } & Struct;
        readonly isDelegate: boolean;
        readonly asDelegate: {
            readonly to: AccountId32;
            readonly conviction: PalletDemocracyConviction;
            readonly balance: u128;
        } & Struct;
        readonly isUndelegate: boolean;
        readonly isClearPublicProposals: boolean;
        readonly isNotePreimage: boolean;
        readonly asNotePreimage: {
            readonly encodedProposal: Bytes;
        } & Struct;
        readonly isNotePreimageOperational: boolean;
        readonly asNotePreimageOperational: {
            readonly encodedProposal: Bytes;
        } & Struct;
        readonly isNoteImminentPreimage: boolean;
        readonly asNoteImminentPreimage: {
            readonly encodedProposal: Bytes;
        } & Struct;
        readonly isNoteImminentPreimageOperational: boolean;
        readonly asNoteImminentPreimageOperational: {
            readonly encodedProposal: Bytes;
        } & Struct;
        readonly isReapPreimage: boolean;
        readonly asReapPreimage: {
            readonly proposalHash: H256;
            readonly proposalLenUpperBound: Compact<u32>;
        } & Struct;
        readonly isUnlock: boolean;
        readonly asUnlock: {
            readonly target: AccountId32;
        } & Struct;
        readonly isRemoveVote: boolean;
        readonly asRemoveVote: {
            readonly index: u32;
        } & Struct;
        readonly isRemoveOtherVote: boolean;
        readonly asRemoveOtherVote: {
            readonly target: AccountId32;
            readonly index: u32;
        } & Struct;
        readonly isEnactProposal: boolean;
        readonly asEnactProposal: {
            readonly proposalHash: H256;
            readonly index: u32;
        } & Struct;
        readonly isBlacklist: boolean;
        readonly asBlacklist: {
            readonly proposalHash: H256;
            readonly maybeRefIndex: Option<u32>;
        } & Struct;
        readonly isCancelProposal: boolean;
        readonly asCancelProposal: {
            readonly propIndex: Compact<u32>;
        } & Struct;
        readonly type: 'Propose' | 'Second' | 'Vote' | 'EmergencyCancel' | 'ExternalPropose' | 'ExternalProposeMajority' | 'ExternalProposeDefault' | 'FastTrack' | 'VetoExternal' | 'CancelReferendum' | 'CancelQueued' | 'Delegate' | 'Undelegate' | 'ClearPublicProposals' | 'NotePreimage' | 'NotePreimageOperational' | 'NoteImminentPreimage' | 'NoteImminentPreimageOperational' | 'ReapPreimage' | 'Unlock' | 'RemoveVote' | 'RemoveOtherVote' | 'EnactProposal' | 'Blacklist' | 'CancelProposal';
    }
    /** @name PalletDemocracyConviction (369) */
    interface PalletDemocracyConviction extends Enum {
        readonly isNone: boolean;
        readonly isLocked1x: boolean;
        readonly isLocked2x: boolean;
        readonly isLocked3x: boolean;
        readonly isLocked4x: boolean;
        readonly isLocked5x: boolean;
        readonly isLocked6x: boolean;
        readonly type: 'None' | 'Locked1x' | 'Locked2x' | 'Locked3x' | 'Locked4x' | 'Locked5x' | 'Locked6x';
    }
    /** @name OrmlOracleModuleCall (370) */
    interface OrmlOracleModuleCall extends Enum {
        readonly isFeedValues: boolean;
        readonly asFeedValues: {
            readonly values: Vec<ITuple<[SelendraPrimitivesCurrencyCurrencyId, u128]>>;
        } & Struct;
        readonly type: 'FeedValues';
    }
    /** @name OrmlAuctionModuleCall (372) */
    interface OrmlAuctionModuleCall extends Enum {
        readonly isBid: boolean;
        readonly asBid: {
            readonly id: u32;
            readonly value: Compact<u128>;
        } & Struct;
        readonly type: 'Bid';
    }
    /** @name OrmlRewardsModuleCall (373) */
    type OrmlRewardsModuleCall = Null;
    /** @name ModulePricesModuleCall (374) */
    interface ModulePricesModuleCall extends Enum {
        readonly isLockPrice: boolean;
        readonly asLockPrice: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isUnlockPrice: boolean;
        readonly asUnlockPrice: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly type: 'LockPrice' | 'UnlockPrice';
    }
    /** @name ModuleDexModuleCall (375) */
    interface ModuleDexModuleCall extends Enum {
        readonly isSwapWithExactSupply: boolean;
        readonly asSwapWithExactSupply: {
            readonly path: Vec<SelendraPrimitivesCurrencyCurrencyId>;
            readonly supplyAmount: Compact<u128>;
            readonly minTargetAmount: Compact<u128>;
        } & Struct;
        readonly isSwapWithExactTarget: boolean;
        readonly asSwapWithExactTarget: {
            readonly path: Vec<SelendraPrimitivesCurrencyCurrencyId>;
            readonly targetAmount: Compact<u128>;
            readonly maxSupplyAmount: Compact<u128>;
        } & Struct;
        readonly isAddLiquidity: boolean;
        readonly asAddLiquidity: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
            readonly maxAmountA: Compact<u128>;
            readonly maxAmountB: Compact<u128>;
            readonly minShareIncrement: Compact<u128>;
            readonly stakeIncrementShare: bool;
        } & Struct;
        readonly isAddProvision: boolean;
        readonly asAddProvision: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
            readonly amountA: Compact<u128>;
            readonly amountB: Compact<u128>;
        } & Struct;
        readonly isClaimDexShare: boolean;
        readonly asClaimDexShare: {
            readonly owner: AccountId32;
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isRemoveLiquidity: boolean;
        readonly asRemoveLiquidity: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
            readonly removeShare: Compact<u128>;
            readonly minWithdrawnA: Compact<u128>;
            readonly minWithdrawnB: Compact<u128>;
            readonly byUnstake: bool;
        } & Struct;
        readonly isListProvisioning: boolean;
        readonly asListProvisioning: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
            readonly minContributionA: Compact<u128>;
            readonly minContributionB: Compact<u128>;
            readonly targetProvisionA: Compact<u128>;
            readonly targetProvisionB: Compact<u128>;
            readonly notBefore: Compact<u32>;
        } & Struct;
        readonly isUpdateProvisioningParameters: boolean;
        readonly asUpdateProvisioningParameters: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
            readonly minContributionA: Compact<u128>;
            readonly minContributionB: Compact<u128>;
            readonly targetProvisionA: Compact<u128>;
            readonly targetProvisionB: Compact<u128>;
            readonly notBefore: Compact<u32>;
        } & Struct;
        readonly isEndProvisioning: boolean;
        readonly asEndProvisioning: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isEnableTradingPair: boolean;
        readonly asEnableTradingPair: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isDisableTradingPair: boolean;
        readonly asDisableTradingPair: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isRefundProvision: boolean;
        readonly asRefundProvision: {
            readonly owner: AccountId32;
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isAbortProvisioning: boolean;
        readonly asAbortProvisioning: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly type: 'SwapWithExactSupply' | 'SwapWithExactTarget' | 'AddLiquidity' | 'AddProvision' | 'ClaimDexShare' | 'RemoveLiquidity' | 'ListProvisioning' | 'UpdateProvisioningParameters' | 'EndProvisioning' | 'EnableTradingPair' | 'DisableTradingPair' | 'RefundProvision' | 'AbortProvisioning';
    }
    /** @name ModuleDexOracleModuleCall (376) */
    interface ModuleDexOracleModuleCall extends Enum {
        readonly isEnableAveragePrice: boolean;
        readonly asEnableAveragePrice: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
            readonly interval: u64;
        } & Struct;
        readonly isDisableAveragePrice: boolean;
        readonly asDisableAveragePrice: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
        } & Struct;
        readonly isUpdateAveragePriceInterval: boolean;
        readonly asUpdateAveragePriceInterval: {
            readonly currencyIdA: SelendraPrimitivesCurrencyCurrencyId;
            readonly currencyIdB: SelendraPrimitivesCurrencyCurrencyId;
            readonly newInterval: u64;
        } & Struct;
        readonly type: 'EnableAveragePrice' | 'DisableAveragePrice' | 'UpdateAveragePriceInterval';
    }
    /** @name ModuleAggregatedDexModuleCall (377) */
    interface ModuleAggregatedDexModuleCall extends Enum {
        readonly isSwapWithExactSupply: boolean;
        readonly asSwapWithExactSupply: {
            readonly paths: Vec<ModuleAggregatedDexSwapPath>;
            readonly supplyAmount: Compact<u128>;
            readonly minTargetAmount: Compact<u128>;
        } & Struct;
        readonly isSwapWithExactTarget: boolean;
        readonly asSwapWithExactTarget: {
            readonly paths: Vec<ModuleAggregatedDexSwapPath>;
            readonly targetAmount: Compact<u128>;
            readonly maxSupplyAmount: Compact<u128>;
        } & Struct;
        readonly isUpdateAggregatedSwapPaths: boolean;
        readonly asUpdateAggregatedSwapPaths: {
            readonly updates: Vec<ITuple<[ITuple<[SelendraPrimitivesCurrencyCurrencyId, SelendraPrimitivesCurrencyCurrencyId]>, Option<Vec<ModuleAggregatedDexSwapPath>>]>>;
        } & Struct;
        readonly type: 'SwapWithExactSupply' | 'SwapWithExactTarget' | 'UpdateAggregatedSwapPaths';
    }
    /** @name ModuleAggregatedDexSwapPath (379) */
    interface ModuleAggregatedDexSwapPath extends Enum {
        readonly isDex: boolean;
        readonly asDex: Vec<SelendraPrimitivesCurrencyCurrencyId>;
        readonly isTaiga: boolean;
        readonly asTaiga: ITuple<[u32, u32, u32]>;
        readonly type: 'Dex' | 'Taiga';
    }
    /** @name ModuleAuctionManagerModuleCall (384) */
    interface ModuleAuctionManagerModuleCall extends Enum {
        readonly isCancel: boolean;
        readonly asCancel: {
            readonly id: u32;
        } & Struct;
        readonly type: 'Cancel';
    }
    /** @name ModuleLoansModuleCall (385) */
    type ModuleLoansModuleCall = Null;
    /** @name ModuleFunanModuleCall (386) */
    interface ModuleFunanModuleCall extends Enum {
        readonly isAdjustLoan: boolean;
        readonly asAdjustLoan: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly collateralAdjustment: i128;
            readonly debitAdjustment: i128;
        } & Struct;
        readonly isCloseLoanHasDebitByDex: boolean;
        readonly asCloseLoanHasDebitByDex: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly maxCollateralAmount: Compact<u128>;
        } & Struct;
        readonly isTransferLoanFrom: boolean;
        readonly asTransferLoanFrom: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly from: MultiAddress;
        } & Struct;
        readonly isAuthorize: boolean;
        readonly asAuthorize: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly to: MultiAddress;
        } & Struct;
        readonly isUnauthorize: boolean;
        readonly asUnauthorize: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly to: MultiAddress;
        } & Struct;
        readonly isUnauthorizeAll: boolean;
        readonly isExpandPositionCollateral: boolean;
        readonly asExpandPositionCollateral: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly increaseDebitValue: u128;
            readonly minIncreaseCollateral: u128;
        } & Struct;
        readonly isShrinkPositionDebit: boolean;
        readonly asShrinkPositionDebit: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly decreaseCollateral: u128;
            readonly minDecreaseDebitValue: u128;
        } & Struct;
        readonly isAdjustLoanByDebitValue: boolean;
        readonly asAdjustLoanByDebitValue: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly collateralAdjustment: i128;
            readonly debitValueAdjustment: i128;
        } & Struct;
        readonly isTransferDebit: boolean;
        readonly asTransferDebit: {
            readonly fromCurrency: SelendraPrimitivesCurrencyCurrencyId;
            readonly toCurrency: SelendraPrimitivesCurrencyCurrencyId;
            readonly debitTransfer: u128;
        } & Struct;
        readonly type: 'AdjustLoan' | 'CloseLoanHasDebitByDex' | 'TransferLoanFrom' | 'Authorize' | 'Unauthorize' | 'UnauthorizeAll' | 'ExpandPositionCollateral' | 'ShrinkPositionDebit' | 'AdjustLoanByDebitValue' | 'TransferDebit';
    }
    /** @name ModuleCdpTreasuryModuleCall (387) */
    interface ModuleCdpTreasuryModuleCall extends Enum {
        readonly isExtractSurplusToTreasury: boolean;
        readonly asExtractSurplusToTreasury: {
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isAuctionCollateral: boolean;
        readonly asAuctionCollateral: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly amount: Compact<u128>;
            readonly target: Compact<u128>;
            readonly splited: bool;
        } & Struct;
        readonly isExchangeCollateralToStable: boolean;
        readonly asExchangeCollateralToStable: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly swapLimit: ModuleSupportDexSwapLimit;
        } & Struct;
        readonly isSetExpectedCollateralAuctionSize: boolean;
        readonly asSetExpectedCollateralAuctionSize: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly size_: Compact<u128>;
        } & Struct;
        readonly type: 'ExtractSurplusToTreasury' | 'AuctionCollateral' | 'ExchangeCollateralToStable' | 'SetExpectedCollateralAuctionSize';
    }
    /** @name ModuleSupportDexSwapLimit (388) */
    interface ModuleSupportDexSwapLimit extends Enum {
        readonly isExactSupply: boolean;
        readonly asExactSupply: ITuple<[u128, u128]>;
        readonly isExactTarget: boolean;
        readonly asExactTarget: ITuple<[u128, u128]>;
        readonly type: 'ExactSupply' | 'ExactTarget';
    }
    /** @name ModuleCdpEngineModuleCall (389) */
    interface ModuleCdpEngineModuleCall extends Enum {
        readonly isLiquidate: boolean;
        readonly asLiquidate: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: MultiAddress;
        } & Struct;
        readonly isSettle: boolean;
        readonly asSettle: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly who: MultiAddress;
        } & Struct;
        readonly isSetCollateralParams: boolean;
        readonly asSetCollateralParams: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly interestRatePerSec: OrmlTraitsChangeOption;
            readonly liquidationRatio: OrmlTraitsChangeOption;
            readonly liquidationPenalty: OrmlTraitsChangeOption;
            readonly requiredCollateralRatio: OrmlTraitsChangeOption;
            readonly maximumTotalDebitValue: OrmlTraitsChangeU128;
        } & Struct;
        readonly type: 'Liquidate' | 'Settle' | 'SetCollateralParams';
    }
    /** @name OrmlTraitsChangeOption (390) */
    interface OrmlTraitsChangeOption extends Enum {
        readonly isNoChange: boolean;
        readonly isNewValue: boolean;
        readonly asNewValue: Option<u128>;
        readonly type: 'NoChange' | 'NewValue';
    }
    /** @name OrmlTraitsChangeU128 (391) */
    interface OrmlTraitsChangeU128 extends Enum {
        readonly isNoChange: boolean;
        readonly isNewValue: boolean;
        readonly asNewValue: u128;
        readonly type: 'NoChange' | 'NewValue';
    }
    /** @name ModuleEmergencyShutdownModuleCall (392) */
    interface ModuleEmergencyShutdownModuleCall extends Enum {
        readonly isEmergencyShutdown: boolean;
        readonly isOpenCollateralRefund: boolean;
        readonly isRefundCollaterals: boolean;
        readonly asRefundCollaterals: {
            readonly amount: Compact<u128>;
        } & Struct;
        readonly type: 'EmergencyShutdown' | 'OpenCollateralRefund' | 'RefundCollaterals';
    }
    /** @name ModuleIncentivesModuleCall (393) */
    interface ModuleIncentivesModuleCall extends Enum {
        readonly isDepositDexShare: boolean;
        readonly asDepositDexShare: {
            readonly lpCurrencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isWithdrawDexShare: boolean;
        readonly asWithdrawDexShare: {
            readonly lpCurrencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly amount: Compact<u128>;
        } & Struct;
        readonly isClaimRewards: boolean;
        readonly asClaimRewards: {
            readonly poolId: ModuleSupportIncentivesPoolId;
        } & Struct;
        readonly isUpdateIncentiveRewards: boolean;
        readonly asUpdateIncentiveRewards: {
            readonly updates: Vec<ITuple<[ModuleSupportIncentivesPoolId, Vec<ITuple<[SelendraPrimitivesCurrencyCurrencyId, u128]>>]>>;
        } & Struct;
        readonly isUpdateDexSavingRewards: boolean;
        readonly asUpdateDexSavingRewards: {
            readonly updates: Vec<ITuple<[ModuleSupportIncentivesPoolId, u128]>>;
        } & Struct;
        readonly isUpdateClaimRewardDeductionRates: boolean;
        readonly asUpdateClaimRewardDeductionRates: {
            readonly updates: Vec<ITuple<[ModuleSupportIncentivesPoolId, u128]>>;
        } & Struct;
        readonly type: 'DepositDexShare' | 'WithdrawDexShare' | 'ClaimRewards' | 'UpdateIncentiveRewards' | 'UpdateDexSavingRewards' | 'UpdateClaimRewardDeductionRates';
    }
    /** @name ModuleNftModuleCall (398) */
    interface ModuleNftModuleCall extends Enum {
        readonly isCreateClass: boolean;
        readonly asCreateClass: {
            readonly metadata: Bytes;
            readonly properties: u8;
            readonly attributes: BTreeMap<Bytes, Bytes>;
        } & Struct;
        readonly isMint: boolean;
        readonly asMint: {
            readonly to: MultiAddress;
            readonly classId: u32;
            readonly metadata: Bytes;
            readonly attributes: BTreeMap<Bytes, Bytes>;
            readonly quantity: Compact<u32>;
        } & Struct;
        readonly isTransfer: boolean;
        readonly asTransfer: {
            readonly to: MultiAddress;
            readonly token: ITuple<[u32, u64]>;
        } & Struct;
        readonly isBurn: boolean;
        readonly asBurn: {
            readonly token: ITuple<[u32, u64]>;
        } & Struct;
        readonly isBurnWithRemark: boolean;
        readonly asBurnWithRemark: {
            readonly token: ITuple<[u32, u64]>;
            readonly remark: Bytes;
        } & Struct;
        readonly isDestroyClass: boolean;
        readonly asDestroyClass: {
            readonly classId: u32;
            readonly dest: MultiAddress;
        } & Struct;
        readonly isUpdateClassProperties: boolean;
        readonly asUpdateClassProperties: {
            readonly classId: u32;
            readonly properties: u8;
        } & Struct;
        readonly type: 'CreateClass' | 'Mint' | 'Transfer' | 'Burn' | 'BurnWithRemark' | 'DestroyClass' | 'UpdateClassProperties';
    }
    /** @name SelendraPrimitivesNftClassProperty (400) */
    interface SelendraPrimitivesNftClassProperty extends Enum {
        readonly isTransferable: boolean;
        readonly isBurnable: boolean;
        readonly isMintable: boolean;
        readonly isClassPropertiesMutable: boolean;
        readonly type: 'Transferable' | 'Burnable' | 'Mintable' | 'ClassPropertiesMutable';
    }
    /** @name ModuleAssetRegistryModuleCall (403) */
    interface ModuleAssetRegistryModuleCall extends Enum {
        readonly isRegisterStableAsset: boolean;
        readonly asRegisterStableAsset: {
            readonly metadata: SelendraPrimitivesCurrencyAssetMetadata;
        } & Struct;
        readonly isUpdateStableAsset: boolean;
        readonly asUpdateStableAsset: {
            readonly stableAssetId: u32;
            readonly metadata: SelendraPrimitivesCurrencyAssetMetadata;
        } & Struct;
        readonly isRegisterErc20Asset: boolean;
        readonly asRegisterErc20Asset: {
            readonly contract: H160;
            readonly minimalBalance: u128;
        } & Struct;
        readonly isUpdateErc20Asset: boolean;
        readonly asUpdateErc20Asset: {
            readonly contract: H160;
            readonly metadata: SelendraPrimitivesCurrencyAssetMetadata;
        } & Struct;
        readonly isRegisterNativeAsset: boolean;
        readonly asRegisterNativeAsset: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly metadata: SelendraPrimitivesCurrencyAssetMetadata;
        } & Struct;
        readonly isUpdateNativeAsset: boolean;
        readonly asUpdateNativeAsset: {
            readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
            readonly metadata: SelendraPrimitivesCurrencyAssetMetadata;
        } & Struct;
        readonly type: 'RegisterStableAsset' | 'UpdateStableAsset' | 'RegisterErc20Asset' | 'UpdateErc20Asset' | 'RegisterNativeAsset' | 'UpdateNativeAsset';
    }
    /** @name ModuleEvmModuleCall (404) */
    interface ModuleEvmModuleCall extends Enum {
        readonly isEthCall: boolean;
        readonly asEthCall: {
            readonly action: EthereumTransactionTransactionAction;
            readonly input: Bytes;
            readonly value: Compact<u128>;
            readonly gasLimit: Compact<u64>;
            readonly storageLimit: Compact<u32>;
            readonly accessList: Vec<EthereumTransactionAccessListItem>;
            readonly validUntil: Compact<u32>;
        } & Struct;
        readonly isCall: boolean;
        readonly asCall: {
            readonly target: H160;
            readonly input: Bytes;
            readonly value: Compact<u128>;
            readonly gasLimit: Compact<u64>;
            readonly storageLimit: Compact<u32>;
            readonly accessList: Vec<EthereumTransactionAccessListItem>;
        } & Struct;
        readonly isScheduledCall: boolean;
        readonly asScheduledCall: {
            readonly from: H160;
            readonly target: H160;
            readonly input: Bytes;
            readonly value: Compact<u128>;
            readonly gasLimit: Compact<u64>;
            readonly storageLimit: Compact<u32>;
            readonly accessList: Vec<EthereumTransactionAccessListItem>;
        } & Struct;
        readonly isCreate: boolean;
        readonly asCreate: {
            readonly input: Bytes;
            readonly value: Compact<u128>;
            readonly gasLimit: Compact<u64>;
            readonly storageLimit: Compact<u32>;
            readonly accessList: Vec<EthereumTransactionAccessListItem>;
        } & Struct;
        readonly isCreate2: boolean;
        readonly asCreate2: {
            readonly input: Bytes;
            readonly salt: H256;
            readonly value: Compact<u128>;
            readonly gasLimit: Compact<u64>;
            readonly storageLimit: Compact<u32>;
            readonly accessList: Vec<EthereumTransactionAccessListItem>;
        } & Struct;
        readonly isCreateNftContract: boolean;
        readonly asCreateNftContract: {
            readonly input: Bytes;
            readonly value: Compact<u128>;
            readonly gasLimit: Compact<u64>;
            readonly storageLimit: Compact<u32>;
            readonly accessList: Vec<EthereumTransactionAccessListItem>;
        } & Struct;
        readonly isCreatePredeployContract: boolean;
        readonly asCreatePredeployContract: {
            readonly target: H160;
            readonly input: Bytes;
            readonly value: Compact<u128>;
            readonly gasLimit: Compact<u64>;
            readonly storageLimit: Compact<u32>;
            readonly accessList: Vec<EthereumTransactionAccessListItem>;
        } & Struct;
        readonly isTransferMaintainer: boolean;
        readonly asTransferMaintainer: {
            readonly contract: H160;
            readonly newMaintainer: H160;
        } & Struct;
        readonly isPublishContract: boolean;
        readonly asPublishContract: {
            readonly contract: H160;
        } & Struct;
        readonly isPublishFree: boolean;
        readonly asPublishFree: {
            readonly contract: H160;
        } & Struct;
        readonly isEnableContractDevelopment: boolean;
        readonly isDisableContractDevelopment: boolean;
        readonly isSetCode: boolean;
        readonly asSetCode: {
            readonly contract: H160;
            readonly code: Bytes;
        } & Struct;
        readonly isSelfdestruct: boolean;
        readonly asSelfdestruct: {
            readonly contract: H160;
        } & Struct;
        readonly type: 'EthCall' | 'Call' | 'ScheduledCall' | 'Create' | 'Create2' | 'CreateNftContract' | 'CreatePredeployContract' | 'TransferMaintainer' | 'PublishContract' | 'PublishFree' | 'EnableContractDevelopment' | 'DisableContractDevelopment' | 'SetCode' | 'Selfdestruct';
    }
    /** @name EthereumTransactionTransactionAction (405) */
    interface EthereumTransactionTransactionAction extends Enum {
        readonly isCall: boolean;
        readonly asCall: H160;
        readonly isCreate: boolean;
        readonly type: 'Call' | 'Create';
    }
    /** @name EthereumTransactionAccessListItem (407) */
    interface EthereumTransactionAccessListItem extends Struct {
        readonly address: H160;
        readonly storageKeys: Vec<H256>;
    }
    /** @name ModuleEvmAccountsModuleCall (408) */
    interface ModuleEvmAccountsModuleCall extends Enum {
        readonly isClaimAccount: boolean;
        readonly asClaimAccount: {
            readonly ethAddress: H160;
            readonly ethSignature: U8aFixed;
        } & Struct;
        readonly isClaimDefaultAccount: boolean;
        readonly type: 'ClaimAccount' | 'ClaimDefaultAccount';
    }
    /** @name ModuleStableAssetCall (409) */
    interface ModuleStableAssetCall extends Enum {
        readonly isCreatePool: boolean;
        readonly asCreatePool: {
            readonly poolAsset: SelendraPrimitivesCurrencyCurrencyId;
            readonly assets: Vec<SelendraPrimitivesCurrencyCurrencyId>;
            readonly precisions: Vec<u128>;
            readonly mintFee: u128;
            readonly swapFee: u128;
            readonly redeemFee: u128;
            readonly initialA: u128;
            readonly feeRecipient: AccountId32;
            readonly yieldRecipient: AccountId32;
            readonly precision: u128;
        } & Struct;
        readonly isMint: boolean;
        readonly asMint: {
            readonly poolId: u32;
            readonly amounts: Vec<u128>;
            readonly minMintAmount: u128;
        } & Struct;
        readonly isSwap: boolean;
        readonly asSwap: {
            readonly poolId: u32;
            readonly i: u32;
            readonly j: u32;
            readonly dx: u128;
            readonly minDy: u128;
            readonly assetLength: u32;
        } & Struct;
        readonly isRedeemProportion: boolean;
        readonly asRedeemProportion: {
            readonly poolId: u32;
            readonly amount: u128;
            readonly minRedeemAmounts: Vec<u128>;
        } & Struct;
        readonly isRedeemSingle: boolean;
        readonly asRedeemSingle: {
            readonly poolId: u32;
            readonly amount: u128;
            readonly i: u32;
            readonly minRedeemAmount: u128;
            readonly assetLength: u32;
        } & Struct;
        readonly isRedeemMulti: boolean;
        readonly asRedeemMulti: {
            readonly poolId: u32;
            readonly amounts: Vec<u128>;
            readonly maxRedeemAmount: u128;
        } & Struct;
        readonly isModifyA: boolean;
        readonly asModifyA: {
            readonly poolId: u32;
            readonly a: u128;
            readonly futureABlock: u32;
        } & Struct;
        readonly type: 'CreatePool' | 'Mint' | 'Swap' | 'RedeemProportion' | 'RedeemSingle' | 'RedeemMulti' | 'ModifyA';
    }
    /** @name PalletSudoCall (410) */
    interface PalletSudoCall extends Enum {
        readonly isSudo: boolean;
        readonly asSudo: {
            readonly call: Call;
        } & Struct;
        readonly isSudoUncheckedWeight: boolean;
        readonly asSudoUncheckedWeight: {
            readonly call: Call;
            readonly weight: u64;
        } & Struct;
        readonly isSetKey: boolean;
        readonly asSetKey: {
            readonly new_: MultiAddress;
        } & Struct;
        readonly isSudoAs: boolean;
        readonly asSudoAs: {
            readonly who: MultiAddress;
            readonly call: Call;
        } & Struct;
        readonly type: 'Sudo' | 'SudoUncheckedWeight' | 'SetKey' | 'SudoAs';
    }
    /** @name PalletSchedulerError (411) */
    interface PalletSchedulerError extends Enum {
        readonly isFailedToSchedule: boolean;
        readonly isNotFound: boolean;
        readonly isTargetBlockNumberInPast: boolean;
        readonly isRescheduleNoChange: boolean;
        readonly type: 'FailedToSchedule' | 'NotFound' | 'TargetBlockNumberInPast' | 'RescheduleNoChange';
    }
    /** @name ModuleTransactionPauseModuleError (412) */
    interface ModuleTransactionPauseModuleError extends Enum {
        readonly isCannotPause: boolean;
        readonly isInvalidCharacter: boolean;
        readonly type: 'CannotPause' | 'InvalidCharacter';
    }
    /** @name PalletPreimageRequestStatus (413) */
    interface PalletPreimageRequestStatus extends Enum {
        readonly isUnrequested: boolean;
        readonly asUnrequested: Option<ITuple<[AccountId32, u128]>>;
        readonly isRequested: boolean;
        readonly asRequested: u32;
        readonly type: 'Unrequested' | 'Requested';
    }
    /** @name PalletPreimageError (416) */
    interface PalletPreimageError extends Enum {
        readonly isTooLarge: boolean;
        readonly isAlreadyNoted: boolean;
        readonly isNotAuthorized: boolean;
        readonly isNotNoted: boolean;
        readonly isRequested: boolean;
        readonly isNotRequested: boolean;
        readonly type: 'TooLarge' | 'AlreadyNoted' | 'NotAuthorized' | 'NotNoted' | 'Requested' | 'NotRequested';
    }
    /** @name PalletBalancesBalanceLock (418) */
    interface PalletBalancesBalanceLock extends Struct {
        readonly id: U8aFixed;
        readonly amount: u128;
        readonly reasons: PalletBalancesReasons;
    }
    /** @name PalletBalancesReasons (419) */
    interface PalletBalancesReasons extends Enum {
        readonly isFee: boolean;
        readonly isMisc: boolean;
        readonly isAll: boolean;
        readonly type: 'Fee' | 'Misc' | 'All';
    }
    /** @name PalletBalancesReserveData (422) */
    interface PalletBalancesReserveData extends Struct {
        readonly id: SelendraPrimitivesReserveIdentifier;
        readonly amount: u128;
    }
    /** @name SelendraPrimitivesReserveIdentifier (423) */
    interface SelendraPrimitivesReserveIdentifier extends Enum {
        readonly isCollatorSelection: boolean;
        readonly isEvmStorageDeposit: boolean;
        readonly isEvmDeveloperDeposit: boolean;
        readonly isFunan: boolean;
        readonly isNft: boolean;
        readonly isTransactionPayment: boolean;
        readonly isTransactionPaymentDeposit: boolean;
        readonly isCount: boolean;
        readonly type: 'CollatorSelection' | 'EvmStorageDeposit' | 'EvmDeveloperDeposit' | 'Funan' | 'Nft' | 'TransactionPayment' | 'TransactionPaymentDeposit' | 'Count';
    }
    /** @name PalletBalancesReleases (425) */
    interface PalletBalancesReleases extends Enum {
        readonly isV100: boolean;
        readonly isV200: boolean;
        readonly type: 'V100' | 'V200';
    }
    /** @name PalletBalancesError (426) */
    interface PalletBalancesError extends Enum {
        readonly isVestingBalance: boolean;
        readonly isLiquidityRestrictions: boolean;
        readonly isInsufficientBalance: boolean;
        readonly isExistentialDeposit: boolean;
        readonly isKeepAlive: boolean;
        readonly isExistingVestingSchedule: boolean;
        readonly isDeadAccount: boolean;
        readonly isTooManyReserves: boolean;
        readonly type: 'VestingBalance' | 'LiquidityRestrictions' | 'InsufficientBalance' | 'ExistentialDeposit' | 'KeepAlive' | 'ExistingVestingSchedule' | 'DeadAccount' | 'TooManyReserves';
    }
    /** @name OrmlTokensBalanceLock (429) */
    interface OrmlTokensBalanceLock extends Struct {
        readonly id: U8aFixed;
        readonly amount: u128;
    }
    /** @name OrmlTokensAccountData (431) */
    interface OrmlTokensAccountData extends Struct {
        readonly free: u128;
        readonly reserved: u128;
        readonly frozen: u128;
    }
    /** @name OrmlTokensReserveData (433) */
    interface OrmlTokensReserveData extends Struct {
        readonly id: SelendraPrimitivesReserveIdentifier;
        readonly amount: u128;
    }
    /** @name OrmlTokensModuleError (435) */
    interface OrmlTokensModuleError extends Enum {
        readonly isBalanceTooLow: boolean;
        readonly isAmountIntoBalanceFailed: boolean;
        readonly isLiquidityRestrictions: boolean;
        readonly isMaxLocksExceeded: boolean;
        readonly isKeepAlive: boolean;
        readonly isExistentialDeposit: boolean;
        readonly isDeadAccount: boolean;
        readonly isTooManyReserves: boolean;
        readonly type: 'BalanceTooLow' | 'AmountIntoBalanceFailed' | 'LiquidityRestrictions' | 'MaxLocksExceeded' | 'KeepAlive' | 'ExistentialDeposit' | 'DeadAccount' | 'TooManyReserves';
    }
    /** @name ModuleCurrenciesModuleError (436) */
    interface ModuleCurrenciesModuleError extends Enum {
        readonly isAmountIntoBalanceFailed: boolean;
        readonly isBalanceTooLow: boolean;
        readonly isErc20InvalidOperation: boolean;
        readonly isEvmAccountNotFound: boolean;
        readonly isRealOriginNotFound: boolean;
        readonly isDepositFailed: boolean;
        readonly type: 'AmountIntoBalanceFailed' | 'BalanceTooLow' | 'Erc20InvalidOperation' | 'EvmAccountNotFound' | 'RealOriginNotFound' | 'DepositFailed';
    }
    /** @name FrameSupportPalletId (438) */
    interface FrameSupportPalletId extends U8aFixed {
    }
    /** @name ModuleTransactionPaymentModuleError (439) */
    interface ModuleTransactionPaymentModuleError extends Enum {
        readonly isInvalidSwapPath: boolean;
        readonly isInvalidBalance: boolean;
        readonly isInvalidRate: boolean;
        readonly isInvalidToken: boolean;
        readonly isDexNotAvailable: boolean;
        readonly isChargeFeePoolAlreadyExisted: boolean;
        readonly type: 'InvalidSwapPath' | 'InvalidBalance' | 'InvalidRate' | 'InvalidToken' | 'DexNotAvailable' | 'ChargeFeePoolAlreadyExisted';
    }
    /** @name PalletTreasuryProposal (440) */
    interface PalletTreasuryProposal extends Struct {
        readonly proposer: AccountId32;
        readonly value: u128;
        readonly beneficiary: AccountId32;
        readonly bond: u128;
    }
    /** @name PalletTreasuryError (444) */
    interface PalletTreasuryError extends Enum {
        readonly isInsufficientProposersBalance: boolean;
        readonly isInvalidIndex: boolean;
        readonly isTooManyApprovals: boolean;
        readonly isProposalNotApproved: boolean;
        readonly type: 'InsufficientProposersBalance' | 'InvalidIndex' | 'TooManyApprovals' | 'ProposalNotApproved';
    }
    /** @name PalletBountiesBounty (445) */
    interface PalletBountiesBounty extends Struct {
        readonly proposer: AccountId32;
        readonly value: u128;
        readonly fee: u128;
        readonly curatorDeposit: u128;
        readonly bond: u128;
        readonly status: PalletBountiesBountyStatus;
    }
    /** @name PalletBountiesBountyStatus (446) */
    interface PalletBountiesBountyStatus extends Enum {
        readonly isProposed: boolean;
        readonly isApproved: boolean;
        readonly isFunded: boolean;
        readonly isCuratorProposed: boolean;
        readonly asCuratorProposed: {
            readonly curator: AccountId32;
        } & Struct;
        readonly isActive: boolean;
        readonly asActive: {
            readonly curator: AccountId32;
            readonly updateDue: u32;
        } & Struct;
        readonly isPendingPayout: boolean;
        readonly asPendingPayout: {
            readonly curator: AccountId32;
            readonly beneficiary: AccountId32;
            readonly unlockAt: u32;
        } & Struct;
        readonly type: 'Proposed' | 'Approved' | 'Funded' | 'CuratorProposed' | 'Active' | 'PendingPayout';
    }
    /** @name PalletBountiesError (448) */
    interface PalletBountiesError extends Enum {
        readonly isInsufficientProposersBalance: boolean;
        readonly isInvalidIndex: boolean;
        readonly isReasonTooBig: boolean;
        readonly isUnexpectedStatus: boolean;
        readonly isRequireCurator: boolean;
        readonly isInvalidValue: boolean;
        readonly isInvalidFee: boolean;
        readonly isPendingPayout: boolean;
        readonly isPremature: boolean;
        readonly isHasActiveChildBounty: boolean;
        readonly isTooManyQueued: boolean;
        readonly type: 'InsufficientProposersBalance' | 'InvalidIndex' | 'ReasonTooBig' | 'UnexpectedStatus' | 'RequireCurator' | 'InvalidValue' | 'InvalidFee' | 'PendingPayout' | 'Premature' | 'HasActiveChildBounty' | 'TooManyQueued';
    }
    /** @name PalletTipsOpenTip (449) */
    interface PalletTipsOpenTip extends Struct {
        readonly reason: H256;
        readonly who: AccountId32;
        readonly finder: AccountId32;
        readonly deposit: u128;
        readonly closes: Option<u32>;
        readonly tips: Vec<ITuple<[AccountId32, u128]>>;
        readonly findersFee: bool;
    }
    /** @name PalletTipsError (450) */
    interface PalletTipsError extends Enum {
        readonly isReasonTooBig: boolean;
        readonly isAlreadyKnown: boolean;
        readonly isUnknownTip: boolean;
        readonly isNotFinder: boolean;
        readonly isStillOpen: boolean;
        readonly isPremature: boolean;
        readonly type: 'ReasonTooBig' | 'AlreadyKnown' | 'UnknownTip' | 'NotFinder' | 'StillOpen' | 'Premature';
    }
    /** @name PalletUtilityError (451) */
    interface PalletUtilityError extends Enum {
        readonly isTooManyCalls: boolean;
        readonly type: 'TooManyCalls';
    }
    /** @name PalletMultisigMultisig (453) */
    interface PalletMultisigMultisig extends Struct {
        readonly when: PalletMultisigTimepoint;
        readonly deposit: u128;
        readonly depositor: AccountId32;
        readonly approvals: Vec<AccountId32>;
    }
    /** @name PalletMultisigError (455) */
    interface PalletMultisigError extends Enum {
        readonly isMinimumThreshold: boolean;
        readonly isAlreadyApproved: boolean;
        readonly isNoApprovalsNeeded: boolean;
        readonly isTooFewSignatories: boolean;
        readonly isTooManySignatories: boolean;
        readonly isSignatoriesOutOfOrder: boolean;
        readonly isSenderInSignatories: boolean;
        readonly isNotFound: boolean;
        readonly isNotOwner: boolean;
        readonly isNoTimepoint: boolean;
        readonly isWrongTimepoint: boolean;
        readonly isUnexpectedTimepoint: boolean;
        readonly isMaxWeightTooLow: boolean;
        readonly isAlreadyStored: boolean;
        readonly type: 'MinimumThreshold' | 'AlreadyApproved' | 'NoApprovalsNeeded' | 'TooFewSignatories' | 'TooManySignatories' | 'SignatoriesOutOfOrder' | 'SenderInSignatories' | 'NotFound' | 'NotOwner' | 'NoTimepoint' | 'WrongTimepoint' | 'UnexpectedTimepoint' | 'MaxWeightTooLow' | 'AlreadyStored';
    }
    /** @name PalletRecoveryRecoveryConfig (456) */
    interface PalletRecoveryRecoveryConfig extends Struct {
        readonly delayPeriod: u32;
        readonly deposit: u128;
        readonly friends: Vec<AccountId32>;
        readonly threshold: u16;
    }
    /** @name PalletRecoveryActiveRecovery (459) */
    interface PalletRecoveryActiveRecovery extends Struct {
        readonly created: u32;
        readonly deposit: u128;
        readonly friends: Vec<AccountId32>;
    }
    /** @name PalletRecoveryError (460) */
    interface PalletRecoveryError extends Enum {
        readonly isNotAllowed: boolean;
        readonly isZeroThreshold: boolean;
        readonly isNotEnoughFriends: boolean;
        readonly isMaxFriends: boolean;
        readonly isNotSorted: boolean;
        readonly isNotRecoverable: boolean;
        readonly isAlreadyRecoverable: boolean;
        readonly isAlreadyStarted: boolean;
        readonly isNotStarted: boolean;
        readonly isNotFriend: boolean;
        readonly isDelayPeriod: boolean;
        readonly isAlreadyVouched: boolean;
        readonly isThreshold: boolean;
        readonly isStillActive: boolean;
        readonly isAlreadyProxy: boolean;
        readonly isBadState: boolean;
        readonly type: 'NotAllowed' | 'ZeroThreshold' | 'NotEnoughFriends' | 'MaxFriends' | 'NotSorted' | 'NotRecoverable' | 'AlreadyRecoverable' | 'AlreadyStarted' | 'NotStarted' | 'NotFriend' | 'DelayPeriod' | 'AlreadyVouched' | 'Threshold' | 'StillActive' | 'AlreadyProxy' | 'BadState';
    }
    /** @name PalletProxyProxyDefinition (463) */
    interface PalletProxyProxyDefinition extends Struct {
        readonly delegate: AccountId32;
        readonly proxyType: RuntimeCommonProxyType;
        readonly delay: u32;
    }
    /** @name PalletProxyAnnouncement (467) */
    interface PalletProxyAnnouncement extends Struct {
        readonly real: AccountId32;
        readonly callHash: H256;
        readonly height: u32;
    }
    /** @name PalletProxyError (469) */
    interface PalletProxyError extends Enum {
        readonly isTooMany: boolean;
        readonly isNotFound: boolean;
        readonly isNotProxy: boolean;
        readonly isUnproxyable: boolean;
        readonly isDuplicate: boolean;
        readonly isNoPermission: boolean;
        readonly isUnannounced: boolean;
        readonly isNoSelfProxy: boolean;
        readonly type: 'TooMany' | 'NotFound' | 'NotProxy' | 'Unproxyable' | 'Duplicate' | 'NoPermission' | 'Unannounced' | 'NoSelfProxy';
    }
    /** @name PalletIndicesError (471) */
    interface PalletIndicesError extends Enum {
        readonly isNotAssigned: boolean;
        readonly isNotOwner: boolean;
        readonly isInUse: boolean;
        readonly isNotTransfer: boolean;
        readonly isPermanent: boolean;
        readonly type: 'NotAssigned' | 'NotOwner' | 'InUse' | 'NotTransfer' | 'Permanent';
    }
    /** @name PalletIdentityRegistration (472) */
    interface PalletIdentityRegistration extends Struct {
        readonly judgements: Vec<ITuple<[u32, PalletIdentityJudgement]>>;
        readonly deposit: u128;
        readonly info: PalletIdentityIdentityInfo;
    }
    /** @name PalletIdentityRegistrarInfo (480) */
    interface PalletIdentityRegistrarInfo extends Struct {
        readonly account: AccountId32;
        readonly fee: u128;
        readonly fields: PalletIdentityBitFlags;
    }
    /** @name PalletIdentityError (482) */
    interface PalletIdentityError extends Enum {
        readonly isTooManySubAccounts: boolean;
        readonly isNotFound: boolean;
        readonly isNotNamed: boolean;
        readonly isEmptyIndex: boolean;
        readonly isFeeChanged: boolean;
        readonly isNoIdentity: boolean;
        readonly isStickyJudgement: boolean;
        readonly isJudgementGiven: boolean;
        readonly isInvalidJudgement: boolean;
        readonly isInvalidIndex: boolean;
        readonly isInvalidTarget: boolean;
        readonly isTooManyFields: boolean;
        readonly isTooManyRegistrars: boolean;
        readonly isAlreadyClaimed: boolean;
        readonly isNotSub: boolean;
        readonly isNotOwned: boolean;
        readonly type: 'TooManySubAccounts' | 'NotFound' | 'NotNamed' | 'EmptyIndex' | 'FeeChanged' | 'NoIdentity' | 'StickyJudgement' | 'JudgementGiven' | 'InvalidJudgement' | 'InvalidIndex' | 'InvalidTarget' | 'TooManyFields' | 'TooManyRegistrars' | 'AlreadyClaimed' | 'NotSub' | 'NotOwned';
    }
    /** @name PalletAuthorshipUncleEntryItem (484) */
    interface PalletAuthorshipUncleEntryItem extends Enum {
        readonly isInclusionHeight: boolean;
        readonly asInclusionHeight: u32;
        readonly isUncle: boolean;
        readonly asUncle: ITuple<[H256, Option<AccountId32>]>;
        readonly type: 'InclusionHeight' | 'Uncle';
    }
    /** @name PalletAuthorshipError (485) */
    interface PalletAuthorshipError extends Enum {
        readonly isInvalidUncleParent: boolean;
        readonly isUnclesAlreadySet: boolean;
        readonly isTooManyUncles: boolean;
        readonly isGenesisUncle: boolean;
        readonly isTooHighUncle: boolean;
        readonly isUncleAlreadyIncluded: boolean;
        readonly isOldUncle: boolean;
        readonly type: 'InvalidUncleParent' | 'UnclesAlreadySet' | 'TooManyUncles' | 'GenesisUncle' | 'TooHighUncle' | 'UncleAlreadyIncluded' | 'OldUncle';
    }
    /** @name SpConsensusBabeDigestsPreDigest (492) */
    interface SpConsensusBabeDigestsPreDigest extends Enum {
        readonly isPrimary: boolean;
        readonly asPrimary: SpConsensusBabeDigestsPrimaryPreDigest;
        readonly isSecondaryPlain: boolean;
        readonly asSecondaryPlain: SpConsensusBabeDigestsSecondaryPlainPreDigest;
        readonly isSecondaryVRF: boolean;
        readonly asSecondaryVRF: SpConsensusBabeDigestsSecondaryVRFPreDigest;
        readonly type: 'Primary' | 'SecondaryPlain' | 'SecondaryVRF';
    }
    /** @name SpConsensusBabeDigestsPrimaryPreDigest (493) */
    interface SpConsensusBabeDigestsPrimaryPreDigest extends Struct {
        readonly authorityIndex: u32;
        readonly slot: u64;
        readonly vrfOutput: U8aFixed;
        readonly vrfProof: U8aFixed;
    }
    /** @name SpConsensusBabeDigestsSecondaryPlainPreDigest (494) */
    interface SpConsensusBabeDigestsSecondaryPlainPreDigest extends Struct {
        readonly authorityIndex: u32;
        readonly slot: u64;
    }
    /** @name SpConsensusBabeDigestsSecondaryVRFPreDigest (495) */
    interface SpConsensusBabeDigestsSecondaryVRFPreDigest extends Struct {
        readonly authorityIndex: u32;
        readonly slot: u64;
        readonly vrfOutput: U8aFixed;
        readonly vrfProof: U8aFixed;
    }
    /** @name SpConsensusBabeBabeEpochConfiguration (497) */
    interface SpConsensusBabeBabeEpochConfiguration extends Struct {
        readonly c: ITuple<[u64, u64]>;
        readonly allowedSlots: SpConsensusBabeAllowedSlots;
    }
    /** @name PalletBabeError (498) */
    interface PalletBabeError extends Enum {
        readonly isInvalidEquivocationProof: boolean;
        readonly isInvalidKeyOwnershipProof: boolean;
        readonly isDuplicateOffenceReport: boolean;
        readonly isInvalidConfiguration: boolean;
        readonly type: 'InvalidEquivocationProof' | 'InvalidKeyOwnershipProof' | 'DuplicateOffenceReport' | 'InvalidConfiguration';
    }
    /** @name PalletStakingStakingLedger (499) */
    interface PalletStakingStakingLedger extends Struct {
        readonly stash: AccountId32;
        readonly total: Compact<u128>;
        readonly active: Compact<u128>;
        readonly unlocking: Vec<PalletStakingUnlockChunk>;
        readonly claimedRewards: Vec<u32>;
    }
    /** @name PalletStakingUnlockChunk (501) */
    interface PalletStakingUnlockChunk extends Struct {
        readonly value: Compact<u128>;
        readonly era: Compact<u32>;
    }
    /** @name PalletStakingNominations (503) */
    interface PalletStakingNominations extends Struct {
        readonly targets: Vec<AccountId32>;
        readonly submittedIn: u32;
        readonly suppressed: bool;
    }
    /** @name PalletStakingActiveEraInfo (505) */
    interface PalletStakingActiveEraInfo extends Struct {
        readonly index: u32;
        readonly start: Option<u64>;
    }
    /** @name PalletStakingEraRewardPoints (507) */
    interface PalletStakingEraRewardPoints extends Struct {
        readonly total: u32;
        readonly individual: BTreeMap<AccountId32, u32>;
    }
    /** @name PalletStakingForcing (511) */
    interface PalletStakingForcing extends Enum {
        readonly isNotForcing: boolean;
        readonly isForceNew: boolean;
        readonly isForceNone: boolean;
        readonly isForceAlways: boolean;
        readonly type: 'NotForcing' | 'ForceNew' | 'ForceNone' | 'ForceAlways';
    }
    /** @name PalletStakingUnappliedSlash (513) */
    interface PalletStakingUnappliedSlash extends Struct {
        readonly validator: AccountId32;
        readonly own: u128;
        readonly others: Vec<ITuple<[AccountId32, u128]>>;
        readonly reporters: Vec<AccountId32>;
        readonly payout: u128;
    }
    /** @name PalletStakingSlashingSlashingSpans (515) */
    interface PalletStakingSlashingSlashingSpans extends Struct {
        readonly spanIndex: u32;
        readonly lastStart: u32;
        readonly lastNonzeroSlash: u32;
        readonly prior: Vec<u32>;
    }
    /** @name PalletStakingSlashingSpanRecord (516) */
    interface PalletStakingSlashingSpanRecord extends Struct {
        readonly slashed: u128;
        readonly paidOut: u128;
    }
    /** @name PalletStakingReleases (519) */
    interface PalletStakingReleases extends Enum {
        readonly isV100Ancient: boolean;
        readonly isV200: boolean;
        readonly isV300: boolean;
        readonly isV400: boolean;
        readonly isV500: boolean;
        readonly isV600: boolean;
        readonly isV700: boolean;
        readonly isV800: boolean;
        readonly isV900: boolean;
        readonly type: 'V100Ancient' | 'V200' | 'V300' | 'V400' | 'V500' | 'V600' | 'V700' | 'V800' | 'V900';
    }
    /** @name PalletStakingPalletError (520) */
    interface PalletStakingPalletError extends Enum {
        readonly isNotController: boolean;
        readonly isNotStash: boolean;
        readonly isAlreadyBonded: boolean;
        readonly isAlreadyPaired: boolean;
        readonly isEmptyTargets: boolean;
        readonly isDuplicateIndex: boolean;
        readonly isInvalidSlashIndex: boolean;
        readonly isInsufficientBond: boolean;
        readonly isNoMoreChunks: boolean;
        readonly isNoUnlockChunk: boolean;
        readonly isFundedTarget: boolean;
        readonly isInvalidEraToReward: boolean;
        readonly isInvalidNumberOfNominations: boolean;
        readonly isNotSortedAndUnique: boolean;
        readonly isAlreadyClaimed: boolean;
        readonly isIncorrectHistoryDepth: boolean;
        readonly isIncorrectSlashingSpans: boolean;
        readonly isBadState: boolean;
        readonly isTooManyTargets: boolean;
        readonly isBadTarget: boolean;
        readonly isCannotChillOther: boolean;
        readonly isTooManyNominators: boolean;
        readonly isTooManyValidators: boolean;
        readonly isCommissionTooLow: boolean;
        readonly type: 'NotController' | 'NotStash' | 'AlreadyBonded' | 'AlreadyPaired' | 'EmptyTargets' | 'DuplicateIndex' | 'InvalidSlashIndex' | 'InsufficientBond' | 'NoMoreChunks' | 'NoUnlockChunk' | 'FundedTarget' | 'InvalidEraToReward' | 'InvalidNumberOfNominations' | 'NotSortedAndUnique' | 'AlreadyClaimed' | 'IncorrectHistoryDepth' | 'IncorrectSlashingSpans' | 'BadState' | 'TooManyTargets' | 'BadTarget' | 'CannotChillOther' | 'TooManyNominators' | 'TooManyValidators' | 'CommissionTooLow';
    }
    /** @name SpStakingOffenceOffenceDetails (521) */
    interface SpStakingOffenceOffenceDetails extends Struct {
        readonly offender: ITuple<[AccountId32, PalletStakingExposure]>;
        readonly reporters: Vec<AccountId32>;
    }
    /** @name SpCoreCryptoKeyTypeId (526) */
    interface SpCoreCryptoKeyTypeId extends U8aFixed {
    }
    /** @name PalletSessionError (527) */
    interface PalletSessionError extends Enum {
        readonly isInvalidProof: boolean;
        readonly isNoAssociatedValidatorId: boolean;
        readonly isDuplicatedKey: boolean;
        readonly isNoKeys: boolean;
        readonly isNoAccount: boolean;
        readonly type: 'InvalidProof' | 'NoAssociatedValidatorId' | 'DuplicatedKey' | 'NoKeys' | 'NoAccount';
    }
    /** @name PalletGrandpaStoredState (528) */
    interface PalletGrandpaStoredState extends Enum {
        readonly isLive: boolean;
        readonly isPendingPause: boolean;
        readonly asPendingPause: {
            readonly scheduledAt: u32;
            readonly delay: u32;
        } & Struct;
        readonly isPaused: boolean;
        readonly isPendingResume: boolean;
        readonly asPendingResume: {
            readonly scheduledAt: u32;
            readonly delay: u32;
        } & Struct;
        readonly type: 'Live' | 'PendingPause' | 'Paused' | 'PendingResume';
    }
    /** @name PalletGrandpaStoredPendingChange (529) */
    interface PalletGrandpaStoredPendingChange extends Struct {
        readonly scheduledAt: u32;
        readonly delay: u32;
        readonly nextAuthorities: Vec<ITuple<[SpFinalityGrandpaAppPublic, u64]>>;
        readonly forced: Option<u32>;
    }
    /** @name PalletGrandpaError (531) */
    interface PalletGrandpaError extends Enum {
        readonly isPauseFailed: boolean;
        readonly isResumeFailed: boolean;
        readonly isChangePending: boolean;
        readonly isTooSoon: boolean;
        readonly isInvalidKeyOwnershipProof: boolean;
        readonly isInvalidEquivocationProof: boolean;
        readonly isDuplicateOffenceReport: boolean;
        readonly type: 'PauseFailed' | 'ResumeFailed' | 'ChangePending' | 'TooSoon' | 'InvalidKeyOwnershipProof' | 'InvalidEquivocationProof' | 'DuplicateOffenceReport';
    }
    /** @name PalletImOnlineBoundedOpaqueNetworkState (535) */
    interface PalletImOnlineBoundedOpaqueNetworkState extends Struct {
        readonly peerId: Bytes;
        readonly externalAddresses: Vec<Bytes>;
    }
    /** @name PalletImOnlineError (539) */
    interface PalletImOnlineError extends Enum {
        readonly isInvalidKey: boolean;
        readonly isDuplicatedHeartbeat: boolean;
        readonly type: 'InvalidKey' | 'DuplicatedHeartbeat';
    }
    /** @name PalletElectionProviderMultiPhasePhase (542) */
    interface PalletElectionProviderMultiPhasePhase extends Enum {
        readonly isOff: boolean;
        readonly isSigned: boolean;
        readonly isUnsigned: boolean;
        readonly asUnsigned: ITuple<[bool, u32]>;
        readonly isEmergency: boolean;
        readonly type: 'Off' | 'Signed' | 'Unsigned' | 'Emergency';
    }
    /** @name PalletElectionProviderMultiPhaseReadySolution (544) */
    interface PalletElectionProviderMultiPhaseReadySolution extends Struct {
        readonly supports: Vec<ITuple<[AccountId32, SpNposElectionsSupport]>>;
        readonly score: SpNposElectionsElectionScore;
        readonly compute: PalletElectionProviderMultiPhaseElectionCompute;
    }
    /** @name PalletElectionProviderMultiPhaseRoundSnapshot (545) */
    interface PalletElectionProviderMultiPhaseRoundSnapshot extends Struct {
        readonly voters: Vec<ITuple<[AccountId32, u64, Vec<AccountId32>]>>;
        readonly targets: Vec<AccountId32>;
    }
    /** @name PalletElectionProviderMultiPhaseSignedSignedSubmission (552) */
    interface PalletElectionProviderMultiPhaseSignedSignedSubmission extends Struct {
        readonly who: AccountId32;
        readonly deposit: u128;
        readonly rawSolution: PalletElectionProviderMultiPhaseRawSolution;
        readonly callFee: u128;
    }
    /** @name PalletElectionProviderMultiPhaseError (553) */
    interface PalletElectionProviderMultiPhaseError extends Enum {
        readonly isPreDispatchEarlySubmission: boolean;
        readonly isPreDispatchWrongWinnerCount: boolean;
        readonly isPreDispatchWeakSubmission: boolean;
        readonly isSignedQueueFull: boolean;
        readonly isSignedCannotPayDeposit: boolean;
        readonly isSignedInvalidWitness: boolean;
        readonly isSignedTooMuchWeight: boolean;
        readonly isOcwCallWrongEra: boolean;
        readonly isMissingSnapshotMetadata: boolean;
        readonly isInvalidSubmissionIndex: boolean;
        readonly isCallNotAllowed: boolean;
        readonly isFallbackFailed: boolean;
        readonly type: 'PreDispatchEarlySubmission' | 'PreDispatchWrongWinnerCount' | 'PreDispatchWeakSubmission' | 'SignedQueueFull' | 'SignedCannotPayDeposit' | 'SignedInvalidWitness' | 'SignedTooMuchWeight' | 'OcwCallWrongEra' | 'MissingSnapshotMetadata' | 'InvalidSubmissionIndex' | 'CallNotAllowed' | 'FallbackFailed';
    }
    /** @name PalletBagsListListNode (554) */
    interface PalletBagsListListNode extends Struct {
        readonly id: AccountId32;
        readonly prev: Option<AccountId32>;
        readonly next: Option<AccountId32>;
        readonly bagUpper: u64;
        readonly score: u64;
    }
    /** @name PalletBagsListListBag (555) */
    interface PalletBagsListListBag extends Struct {
        readonly head: Option<AccountId32>;
        readonly tail: Option<AccountId32>;
    }
    /** @name PalletBagsListError (557) */
    interface PalletBagsListError extends Enum {
        readonly isList: boolean;
        readonly asList: PalletBagsListListListError;
        readonly type: 'List';
    }
    /** @name PalletBagsListListListError (558) */
    interface PalletBagsListListListError extends Enum {
        readonly isDuplicate: boolean;
        readonly isNotHeavier: boolean;
        readonly isNotInSameBag: boolean;
        readonly isNodeNotFound: boolean;
        readonly type: 'Duplicate' | 'NotHeavier' | 'NotInSameBag' | 'NodeNotFound';
    }
    /** @name PalletNominationPoolsPoolMember (559) */
    interface PalletNominationPoolsPoolMember extends Struct {
        readonly poolId: u32;
        readonly points: u128;
        readonly rewardPoolTotalEarnings: u128;
        readonly unbondingEras: BTreeMap<u32, u128>;
    }
    /** @name PalletNominationPoolsBondedPoolInner (564) */
    interface PalletNominationPoolsBondedPoolInner extends Struct {
        readonly points: u128;
        readonly state: PalletNominationPoolsPoolState;
        readonly memberCounter: u32;
        readonly roles: PalletNominationPoolsPoolRoles;
    }
    /** @name PalletNominationPoolsPoolRoles (565) */
    interface PalletNominationPoolsPoolRoles extends Struct {
        readonly depositor: AccountId32;
        readonly root: Option<AccountId32>;
        readonly nominator: Option<AccountId32>;
        readonly stateToggler: Option<AccountId32>;
    }
    /** @name PalletNominationPoolsRewardPool (566) */
    interface PalletNominationPoolsRewardPool extends Struct {
        readonly balance: u128;
        readonly totalEarnings: u128;
        readonly points: U256;
    }
    /** @name PalletNominationPoolsSubPools (569) */
    interface PalletNominationPoolsSubPools extends Struct {
        readonly noEra: PalletNominationPoolsUnbondPool;
        readonly withEra: BTreeMap<u32, PalletNominationPoolsUnbondPool>;
    }
    /** @name PalletNominationPoolsUnbondPool (570) */
    interface PalletNominationPoolsUnbondPool extends Struct {
        readonly points: u128;
        readonly balance: u128;
    }
    /** @name PalletNominationPoolsError (576) */
    interface PalletNominationPoolsError extends Enum {
        readonly isPoolNotFound: boolean;
        readonly isPoolMemberNotFound: boolean;
        readonly isRewardPoolNotFound: boolean;
        readonly isSubPoolsNotFound: boolean;
        readonly isAccountBelongsToOtherPool: boolean;
        readonly isInsufficientBond: boolean;
        readonly isAlreadyUnbonding: boolean;
        readonly isFullyUnbonding: boolean;
        readonly isMaxUnbondingLimit: boolean;
        readonly isCannotWithdrawAny: boolean;
        readonly isMinimumBondNotMet: boolean;
        readonly isOverflowRisk: boolean;
        readonly isNotDestroying: boolean;
        readonly isNotOnlyPoolMember: boolean;
        readonly isNotNominator: boolean;
        readonly isNotKickerOrDestroying: boolean;
        readonly isNotOpen: boolean;
        readonly isMaxPools: boolean;
        readonly isMaxPoolMembers: boolean;
        readonly isCanNotChangeState: boolean;
        readonly isDoesNotHavePermission: boolean;
        readonly isMetadataExceedsMaxLen: boolean;
        readonly isDefensiveError: boolean;
        readonly isNotEnoughPointsToUnbond: boolean;
        readonly isPartialUnbondNotAllowedPermissionlessly: boolean;
        readonly type: 'PoolNotFound' | 'PoolMemberNotFound' | 'RewardPoolNotFound' | 'SubPoolsNotFound' | 'AccountBelongsToOtherPool' | 'InsufficientBond' | 'AlreadyUnbonding' | 'FullyUnbonding' | 'MaxUnbondingLimit' | 'CannotWithdrawAny' | 'MinimumBondNotMet' | 'OverflowRisk' | 'NotDestroying' | 'NotOnlyPoolMember' | 'NotNominator' | 'NotKickerOrDestroying' | 'NotOpen' | 'MaxPools' | 'MaxPoolMembers' | 'CanNotChangeState' | 'DoesNotHavePermission' | 'MetadataExceedsMaxLen' | 'DefensiveError' | 'NotEnoughPointsToUnbond' | 'PartialUnbondNotAllowedPermissionlessly';
    }
    /** @name OrmlAuthorityModuleError (578) */
    interface OrmlAuthorityModuleError extends Enum {
        readonly isFailedToSchedule: boolean;
        readonly isFailedToCancel: boolean;
        readonly isFailedToFastTrack: boolean;
        readonly isFailedToDelay: boolean;
        readonly isCallNotAuthorized: boolean;
        readonly isTriggerCallNotPermitted: boolean;
        readonly isWrongCallWeightBound: boolean;
        readonly type: 'FailedToSchedule' | 'FailedToCancel' | 'FailedToFastTrack' | 'FailedToDelay' | 'CallNotAuthorized' | 'TriggerCallNotPermitted' | 'WrongCallWeightBound';
    }
    /** @name PalletCollectiveVotes (580) */
    interface PalletCollectiveVotes extends Struct {
        readonly index: u32;
        readonly threshold: u32;
        readonly ayes: Vec<AccountId32>;
        readonly nays: Vec<AccountId32>;
        readonly end: u32;
    }
    /** @name PalletCollectiveError (581) */
    interface PalletCollectiveError extends Enum {
        readonly isNotMember: boolean;
        readonly isDuplicateProposal: boolean;
        readonly isProposalMissing: boolean;
        readonly isWrongIndex: boolean;
        readonly isDuplicateVote: boolean;
        readonly isAlreadyInitialized: boolean;
        readonly isTooEarly: boolean;
        readonly isTooManyProposals: boolean;
        readonly isWrongProposalWeight: boolean;
        readonly isWrongProposalLength: boolean;
        readonly type: 'NotMember' | 'DuplicateProposal' | 'ProposalMissing' | 'WrongIndex' | 'DuplicateVote' | 'AlreadyInitialized' | 'TooEarly' | 'TooManyProposals' | 'WrongProposalWeight' | 'WrongProposalLength';
    }
    /** @name PalletMembershipError (582) */
    interface PalletMembershipError extends Enum {
        readonly isAlreadyMember: boolean;
        readonly isNotMember: boolean;
        readonly type: 'AlreadyMember' | 'NotMember';
    }
    /** @name PalletElectionsPhragmenSeatHolder (588) */
    interface PalletElectionsPhragmenSeatHolder extends Struct {
        readonly who: AccountId32;
        readonly stake: u128;
        readonly deposit: u128;
    }
    /** @name PalletElectionsPhragmenVoter (589) */
    interface PalletElectionsPhragmenVoter extends Struct {
        readonly votes: Vec<AccountId32>;
        readonly stake: u128;
        readonly deposit: u128;
    }
    /** @name PalletElectionsPhragmenError (590) */
    interface PalletElectionsPhragmenError extends Enum {
        readonly isUnableToVote: boolean;
        readonly isNoVotes: boolean;
        readonly isTooManyVotes: boolean;
        readonly isMaximumVotesExceeded: boolean;
        readonly isLowBalance: boolean;
        readonly isUnableToPayBond: boolean;
        readonly isMustBeVoter: boolean;
        readonly isReportSelf: boolean;
        readonly isDuplicatedCandidate: boolean;
        readonly isMemberSubmit: boolean;
        readonly isRunnerUpSubmit: boolean;
        readonly isInsufficientCandidateFunds: boolean;
        readonly isNotMember: boolean;
        readonly isInvalidWitnessData: boolean;
        readonly isInvalidVoteCount: boolean;
        readonly isInvalidRenouncing: boolean;
        readonly isInvalidReplacement: boolean;
        readonly type: 'UnableToVote' | 'NoVotes' | 'TooManyVotes' | 'MaximumVotesExceeded' | 'LowBalance' | 'UnableToPayBond' | 'MustBeVoter' | 'ReportSelf' | 'DuplicatedCandidate' | 'MemberSubmit' | 'RunnerUpSubmit' | 'InsufficientCandidateFunds' | 'NotMember' | 'InvalidWitnessData' | 'InvalidVoteCount' | 'InvalidRenouncing' | 'InvalidReplacement';
    }
    /** @name PalletDemocracyPreimageStatus (594) */
    interface PalletDemocracyPreimageStatus extends Enum {
        readonly isMissing: boolean;
        readonly asMissing: u32;
        readonly isAvailable: boolean;
        readonly asAvailable: {
            readonly data: Bytes;
            readonly provider: AccountId32;
            readonly deposit: u128;
            readonly since: u32;
            readonly expiry: Option<u32>;
        } & Struct;
        readonly type: 'Missing' | 'Available';
    }
    /** @name PalletDemocracyReferendumInfo (595) */
    interface PalletDemocracyReferendumInfo extends Enum {
        readonly isOngoing: boolean;
        readonly asOngoing: PalletDemocracyReferendumStatus;
        readonly isFinished: boolean;
        readonly asFinished: {
            readonly approved: bool;
            readonly end: u32;
        } & Struct;
        readonly type: 'Ongoing' | 'Finished';
    }
    /** @name PalletDemocracyReferendumStatus (596) */
    interface PalletDemocracyReferendumStatus extends Struct {
        readonly end: u32;
        readonly proposalHash: H256;
        readonly threshold: PalletDemocracyVoteThreshold;
        readonly delay: u32;
        readonly tally: PalletDemocracyTally;
    }
    /** @name PalletDemocracyTally (597) */
    interface PalletDemocracyTally extends Struct {
        readonly ayes: u128;
        readonly nays: u128;
        readonly turnout: u128;
    }
    /** @name PalletDemocracyVoteVoting (598) */
    interface PalletDemocracyVoteVoting extends Enum {
        readonly isDirect: boolean;
        readonly asDirect: {
            readonly votes: Vec<ITuple<[u32, PalletDemocracyVoteAccountVote]>>;
            readonly delegations: PalletDemocracyDelegations;
            readonly prior: PalletDemocracyVotePriorLock;
        } & Struct;
        readonly isDelegating: boolean;
        readonly asDelegating: {
            readonly balance: u128;
            readonly target: AccountId32;
            readonly conviction: PalletDemocracyConviction;
            readonly delegations: PalletDemocracyDelegations;
            readonly prior: PalletDemocracyVotePriorLock;
        } & Struct;
        readonly type: 'Direct' | 'Delegating';
    }
    /** @name PalletDemocracyDelegations (601) */
    interface PalletDemocracyDelegations extends Struct {
        readonly votes: u128;
        readonly capital: u128;
    }
    /** @name PalletDemocracyVotePriorLock (602) */
    interface PalletDemocracyVotePriorLock extends ITuple<[u32, u128]> {
    }
    /** @name PalletDemocracyReleases (605) */
    interface PalletDemocracyReleases extends Enum {
        readonly isV1: boolean;
        readonly type: 'V1';
    }
    /** @name PalletDemocracyError (606) */
    interface PalletDemocracyError extends Enum {
        readonly isValueLow: boolean;
        readonly isProposalMissing: boolean;
        readonly isAlreadyCanceled: boolean;
        readonly isDuplicateProposal: boolean;
        readonly isProposalBlacklisted: boolean;
        readonly isNotSimpleMajority: boolean;
        readonly isInvalidHash: boolean;
        readonly isNoProposal: boolean;
        readonly isAlreadyVetoed: boolean;
        readonly isDuplicatePreimage: boolean;
        readonly isNotImminent: boolean;
        readonly isTooEarly: boolean;
        readonly isImminent: boolean;
        readonly isPreimageMissing: boolean;
        readonly isReferendumInvalid: boolean;
        readonly isPreimageInvalid: boolean;
        readonly isNoneWaiting: boolean;
        readonly isNotVoter: boolean;
        readonly isNoPermission: boolean;
        readonly isAlreadyDelegating: boolean;
        readonly isInsufficientFunds: boolean;
        readonly isNotDelegating: boolean;
        readonly isVotesExist: boolean;
        readonly isInstantNotAllowed: boolean;
        readonly isNonsense: boolean;
        readonly isWrongUpperBound: boolean;
        readonly isMaxVotesReached: boolean;
        readonly isTooManyProposals: boolean;
        readonly type: 'ValueLow' | 'ProposalMissing' | 'AlreadyCanceled' | 'DuplicateProposal' | 'ProposalBlacklisted' | 'NotSimpleMajority' | 'InvalidHash' | 'NoProposal' | 'AlreadyVetoed' | 'DuplicatePreimage' | 'NotImminent' | 'TooEarly' | 'Imminent' | 'PreimageMissing' | 'ReferendumInvalid' | 'PreimageInvalid' | 'NoneWaiting' | 'NotVoter' | 'NoPermission' | 'AlreadyDelegating' | 'InsufficientFunds' | 'NotDelegating' | 'VotesExist' | 'InstantNotAllowed' | 'Nonsense' | 'WrongUpperBound' | 'MaxVotesReached' | 'TooManyProposals';
    }
    /** @name OrmlOracleModuleTimestampedValue (607) */
    interface OrmlOracleModuleTimestampedValue extends Struct {
        readonly value: u128;
        readonly timestamp: u64;
    }
    /** @name OrmlUtilitiesOrderedSet (608) */
    interface OrmlUtilitiesOrderedSet extends Vec<AccountId32> {
    }
    /** @name OrmlOracleModuleError (610) */
    interface OrmlOracleModuleError extends Enum {
        readonly isNoPermission: boolean;
        readonly isAlreadyFeeded: boolean;
        readonly type: 'NoPermission' | 'AlreadyFeeded';
    }
    /** @name OrmlTraitsAuctionAuctionInfo (612) */
    interface OrmlTraitsAuctionAuctionInfo extends Struct {
        readonly bid: Option<ITuple<[AccountId32, u128]>>;
        readonly start: u32;
        readonly end: Option<u32>;
    }
    /** @name OrmlAuctionModuleError (613) */
    interface OrmlAuctionModuleError extends Enum {
        readonly isAuctionNotExist: boolean;
        readonly isAuctionNotStarted: boolean;
        readonly isBidNotAccepted: boolean;
        readonly isInvalidBidPrice: boolean;
        readonly isNoAvailableAuctionId: boolean;
        readonly type: 'AuctionNotExist' | 'AuctionNotStarted' | 'BidNotAccepted' | 'InvalidBidPrice' | 'NoAvailableAuctionId';
    }
    /** @name OrmlRewardsPoolInfo (614) */
    interface OrmlRewardsPoolInfo extends Struct {
        readonly totalShares: u128;
        readonly rewards: BTreeMap<SelendraPrimitivesCurrencyCurrencyId, ITuple<[u128, u128]>>;
    }
    /** @name OrmlRewardsModuleError (622) */
    interface OrmlRewardsModuleError extends Enum {
        readonly isPoolDoesNotExist: boolean;
        readonly isShareDoesNotExist: boolean;
        readonly isCanSplitOnlyLessThanShare: boolean;
        readonly type: 'PoolDoesNotExist' | 'ShareDoesNotExist' | 'CanSplitOnlyLessThanShare';
    }
    /** @name OrmlNftClassInfo (623) */
    interface OrmlNftClassInfo extends Struct {
        readonly metadata: Bytes;
        readonly totalIssuance: u64;
        readonly owner: AccountId32;
        readonly data: ModuleNftClassData;
    }
    /** @name ModuleNftClassData (624) */
    interface ModuleNftClassData extends Struct {
        readonly deposit: u128;
        readonly properties: u8;
        readonly attributes: BTreeMap<Bytes, Bytes>;
    }
    /** @name OrmlNftTokenInfo (626) */
    interface OrmlNftTokenInfo extends Struct {
        readonly metadata: Bytes;
        readonly owner: AccountId32;
        readonly data: ModuleNftTokenData;
    }
    /** @name ModuleNftTokenData (627) */
    interface ModuleNftTokenData extends Struct {
        readonly deposit: u128;
        readonly attributes: BTreeMap<Bytes, Bytes>;
    }
    /** @name OrmlNftModuleError (629) */
    interface OrmlNftModuleError extends Enum {
        readonly isNoAvailableClassId: boolean;
        readonly isNoAvailableTokenId: boolean;
        readonly isTokenNotFound: boolean;
        readonly isClassNotFound: boolean;
        readonly isNoPermission: boolean;
        readonly isCannotDestroyClass: boolean;
        readonly isMaxMetadataExceeded: boolean;
        readonly type: 'NoAvailableClassId' | 'NoAvailableTokenId' | 'TokenNotFound' | 'ClassNotFound' | 'NoPermission' | 'CannotDestroyClass' | 'MaxMetadataExceeded';
    }
    /** @name ModulePricesModuleError (630) */
    interface ModulePricesModuleError extends Enum {
        readonly isAccessPriceFailed: boolean;
        readonly isNoLockedPrice: boolean;
        readonly type: 'AccessPriceFailed' | 'NoLockedPrice';
    }
    /** @name ModuleDexTradingPairStatus (631) */
    interface ModuleDexTradingPairStatus extends Enum {
        readonly isDisabled: boolean;
        readonly isProvisioning: boolean;
        readonly asProvisioning: ModuleDexProvisioningParameters;
        readonly isEnabled: boolean;
        readonly type: 'Disabled' | 'Provisioning' | 'Enabled';
    }
    /** @name ModuleDexProvisioningParameters (632) */
    interface ModuleDexProvisioningParameters extends Struct {
        readonly minContribution: ITuple<[u128, u128]>;
        readonly targetProvision: ITuple<[u128, u128]>;
        readonly accumulatedProvision: ITuple<[u128, u128]>;
        readonly notBefore: u32;
    }
    /** @name ModuleDexModuleError (635) */
    interface ModuleDexModuleError extends Enum {
        readonly isAlreadyEnabled: boolean;
        readonly isMustBeEnabled: boolean;
        readonly isMustBeProvisioning: boolean;
        readonly isMustBeDisabled: boolean;
        readonly isNotAllowedList: boolean;
        readonly isInvalidContributionIncrement: boolean;
        readonly isInvalidLiquidityIncrement: boolean;
        readonly isInvalidCurrencyId: boolean;
        readonly isInvalidTradingPathLength: boolean;
        readonly isInsufficientTargetAmount: boolean;
        readonly isExcessiveSupplyAmount: boolean;
        readonly isInsufficientLiquidity: boolean;
        readonly isZeroSupplyAmount: boolean;
        readonly isZeroTargetAmount: boolean;
        readonly isUnacceptableShareIncrement: boolean;
        readonly isUnacceptableLiquidityWithdrawn: boolean;
        readonly isInvariantCheckFailed: boolean;
        readonly isUnqualifiedProvision: boolean;
        readonly isStillProvisioning: boolean;
        readonly isAssetUnregistered: boolean;
        readonly isInvalidTradingPath: boolean;
        readonly isNotAllowedRefund: boolean;
        readonly isCannotSwap: boolean;
        readonly type: 'AlreadyEnabled' | 'MustBeEnabled' | 'MustBeProvisioning' | 'MustBeDisabled' | 'NotAllowedList' | 'InvalidContributionIncrement' | 'InvalidLiquidityIncrement' | 'InvalidCurrencyId' | 'InvalidTradingPathLength' | 'InsufficientTargetAmount' | 'ExcessiveSupplyAmount' | 'InsufficientLiquidity' | 'ZeroSupplyAmount' | 'ZeroTargetAmount' | 'UnacceptableShareIncrement' | 'UnacceptableLiquidityWithdrawn' | 'InvariantCheckFailed' | 'UnqualifiedProvision' | 'StillProvisioning' | 'AssetUnregistered' | 'InvalidTradingPath' | 'NotAllowedRefund' | 'CannotSwap';
    }
    /** @name ModuleDexOracleModuleError (638) */
    interface ModuleDexOracleModuleError extends Enum {
        readonly isAveragePriceAlreadyEnabled: boolean;
        readonly isAveragePriceMustBeEnabled: boolean;
        readonly isInvalidPool: boolean;
        readonly isInvalidCurrencyId: boolean;
        readonly isIntervalIsZero: boolean;
        readonly type: 'AveragePriceAlreadyEnabled' | 'AveragePriceMustBeEnabled' | 'InvalidPool' | 'InvalidCurrencyId' | 'IntervalIsZero';
    }
    /** @name ModuleAggregatedDexModuleError (641) */
    interface ModuleAggregatedDexModuleError extends Enum {
        readonly isCannotSwap: boolean;
        readonly isInvalidPoolId: boolean;
        readonly isInvalidTokenIndex: boolean;
        readonly isInvalidSwapPath: boolean;
        readonly type: 'CannotSwap' | 'InvalidPoolId' | 'InvalidTokenIndex' | 'InvalidSwapPath';
    }
    /** @name ModuleAuctionManagerCollateralAuctionItem (642) */
    interface ModuleAuctionManagerCollateralAuctionItem extends Struct {
        readonly refundRecipient: AccountId32;
        readonly currencyId: SelendraPrimitivesCurrencyCurrencyId;
        readonly initialAmount: Compact<u128>;
        readonly amount: Compact<u128>;
        readonly target: Compact<u128>;
        readonly startTime: u32;
    }
    /** @name ModuleAuctionManagerModuleError (643) */
    interface ModuleAuctionManagerModuleError extends Enum {
        readonly isAuctionNotExists: boolean;
        readonly isInReverseStage: boolean;
        readonly isInvalidFeedPrice: boolean;
        readonly isMustAfterShutdown: boolean;
        readonly isInvalidBidPrice: boolean;
        readonly isInvalidAmount: boolean;
        readonly type: 'AuctionNotExists' | 'InReverseStage' | 'InvalidFeedPrice' | 'MustAfterShutdown' | 'InvalidBidPrice' | 'InvalidAmount';
    }
    /** @name SelendraPrimitivesPosition (645) */
    interface SelendraPrimitivesPosition extends Struct {
        readonly collateral: u128;
        readonly debit: u128;
    }
    /** @name ModuleLoansModuleError (646) */
    interface ModuleLoansModuleError extends Enum {
        readonly isAmountConvertFailed: boolean;
        readonly type: 'AmountConvertFailed';
    }
    /** @name ModuleFunanModuleError (648) */
    interface ModuleFunanModuleError extends Enum {
        readonly isNoPermission: boolean;
        readonly isAlreadyShutdown: boolean;
        readonly isAuthorizationNotExists: boolean;
        readonly isAlreadyAuthorized: boolean;
        readonly type: 'NoPermission' | 'AlreadyShutdown' | 'AuthorizationNotExists' | 'AlreadyAuthorized';
    }
    /** @name ModuleCdpTreasuryModuleError (649) */
    interface ModuleCdpTreasuryModuleError extends Enum {
        readonly isCollateralNotEnough: boolean;
        readonly isSurplusPoolNotEnough: boolean;
        readonly isDebitPoolNotEnough: boolean;
        readonly isCannotSwap: boolean;
        readonly isNotDexShare: boolean;
        readonly type: 'CollateralNotEnough' | 'SurplusPoolNotEnough' | 'DebitPoolNotEnough' | 'CannotSwap' | 'NotDexShare';
    }
    /** @name ModuleCdpEngineRiskManagementParams (650) */
    interface ModuleCdpEngineRiskManagementParams extends Struct {
        readonly maximumTotalDebitValue: u128;
        readonly interestRatePerSec: Option<u128>;
        readonly liquidationRatio: Option<u128>;
        readonly liquidationPenalty: Option<u128>;
        readonly requiredCollateralRatio: Option<u128>;
    }
    /** @name ModuleCdpEngineModuleError (651) */
    interface ModuleCdpEngineModuleError extends Enum {
        readonly isExceedDebitValueHardCap: boolean;
        readonly isBelowRequiredCollateralRatio: boolean;
        readonly isBelowLiquidationRatio: boolean;
        readonly isMustBeUnsafe: boolean;
        readonly isMustBeSafe: boolean;
        readonly isInvalidCollateralType: boolean;
        readonly isRemainDebitValueTooSmall: boolean;
        readonly isCollateralAmountBelowMinimum: boolean;
        readonly isInvalidFeedPrice: boolean;
        readonly isNoDebitValue: boolean;
        readonly isAlreadyShutdown: boolean;
        readonly isMustAfterShutdown: boolean;
        readonly isCollateralNotEnough: boolean;
        readonly isNotEnoughDebitDecrement: boolean;
        readonly isConvertDebitBalanceFailed: boolean;
        readonly type: 'ExceedDebitValueHardCap' | 'BelowRequiredCollateralRatio' | 'BelowLiquidationRatio' | 'MustBeUnsafe' | 'MustBeSafe' | 'InvalidCollateralType' | 'RemainDebitValueTooSmall' | 'CollateralAmountBelowMinimum' | 'InvalidFeedPrice' | 'NoDebitValue' | 'AlreadyShutdown' | 'MustAfterShutdown' | 'CollateralNotEnough' | 'NotEnoughDebitDecrement' | 'ConvertDebitBalanceFailed';
    }
    /** @name ModuleEmergencyShutdownModuleError (652) */
    interface ModuleEmergencyShutdownModuleError extends Enum {
        readonly isAlreadyShutdown: boolean;
        readonly isMustAfterShutdown: boolean;
        readonly isCanNotRefund: boolean;
        readonly isExistPotentialSurplus: boolean;
        readonly isExistUnhandledDebit: boolean;
        readonly type: 'AlreadyShutdown' | 'MustAfterShutdown' | 'CanNotRefund' | 'ExistPotentialSurplus' | 'ExistUnhandledDebit';
    }
    /** @name ModuleIncentivesModuleError (654) */
    interface ModuleIncentivesModuleError extends Enum {
        readonly isNotEnough: boolean;
        readonly isInvalidCurrencyId: boolean;
        readonly isInvalidPoolId: boolean;
        readonly isInvalidRate: boolean;
        readonly type: 'NotEnough' | 'InvalidCurrencyId' | 'InvalidPoolId' | 'InvalidRate';
    }
    /** @name ModuleNftModuleError (655) */
    interface ModuleNftModuleError extends Enum {
        readonly isClassIdNotFound: boolean;
        readonly isTokenIdNotFound: boolean;
        readonly isNoPermission: boolean;
        readonly isInvalidQuantity: boolean;
        readonly isNonTransferable: boolean;
        readonly isNonBurnable: boolean;
        readonly isNonMintable: boolean;
        readonly isCannotDestroyClass: boolean;
        readonly isImmutable: boolean;
        readonly isAttributesTooLarge: boolean;
        readonly isIncorrectTokenId: boolean;
        readonly type: 'ClassIdNotFound' | 'TokenIdNotFound' | 'NoPermission' | 'InvalidQuantity' | 'NonTransferable' | 'NonBurnable' | 'NonMintable' | 'CannotDestroyClass' | 'Immutable' | 'AttributesTooLarge' | 'IncorrectTokenId';
    }
    /** @name ModuleAssetRegistryModuleError (656) */
    interface ModuleAssetRegistryModuleError extends Enum {
        readonly isBadLocation: boolean;
        readonly isAssetIdNotExists: boolean;
        readonly isAssetIdExisted: boolean;
        readonly type: 'BadLocation' | 'AssetIdNotExists' | 'AssetIdExisted';
    }
    /** @name ModuleEvmModuleAccountInfo (657) */
    interface ModuleEvmModuleAccountInfo extends Struct {
        readonly nonce: u32;
        readonly contractInfo: Option<ModuleEvmModuleContractInfo>;
    }
    /** @name ModuleEvmModuleContractInfo (659) */
    interface ModuleEvmModuleContractInfo extends Struct {
        readonly codeHash: H256;
        readonly maintainer: H160;
        readonly published: bool;
    }
    /** @name ModuleEvmModuleCodeInfo (662) */
    interface ModuleEvmModuleCodeInfo extends Struct {
        readonly codeSize: u32;
        readonly refCount: u32;
    }
    /** @name ModuleEvmModuleError (663) */
    interface ModuleEvmModuleError extends Enum {
        readonly isAddressNotMapped: boolean;
        readonly isContractNotFound: boolean;
        readonly isNoPermission: boolean;
        readonly isContractDevelopmentNotEnabled: boolean;
        readonly isContractDevelopmentAlreadyEnabled: boolean;
        readonly isContractAlreadyPublished: boolean;
        readonly isContractExceedsMaxCodeSize: boolean;
        readonly isContractAlreadyExisted: boolean;
        readonly isOutOfStorage: boolean;
        readonly isChargeFeeFailed: boolean;
        readonly isCannotKillContract: boolean;
        readonly isReserveStorageFailed: boolean;
        readonly isUnreserveStorageFailed: boolean;
        readonly isChargeStorageFailed: boolean;
        readonly isInvalidDecimals: boolean;
        readonly type: 'AddressNotMapped' | 'ContractNotFound' | 'NoPermission' | 'ContractDevelopmentNotEnabled' | 'ContractDevelopmentAlreadyEnabled' | 'ContractAlreadyPublished' | 'ContractExceedsMaxCodeSize' | 'ContractAlreadyExisted' | 'OutOfStorage' | 'ChargeFeeFailed' | 'CannotKillContract' | 'ReserveStorageFailed' | 'UnreserveStorageFailed' | 'ChargeStorageFailed' | 'InvalidDecimals';
    }
    /** @name ModuleEvmBridgeModuleError (664) */
    interface ModuleEvmBridgeModuleError extends Enum {
        readonly isExecutionFail: boolean;
        readonly isExecutionRevert: boolean;
        readonly isExecutionFatal: boolean;
        readonly isExecutionError: boolean;
        readonly isInvalidReturnValue: boolean;
        readonly type: 'ExecutionFail' | 'ExecutionRevert' | 'ExecutionFatal' | 'ExecutionError' | 'InvalidReturnValue';
    }
    /** @name ModuleEvmAccountsModuleError (665) */
    interface ModuleEvmAccountsModuleError extends Enum {
        readonly isAccountIdHasMapped: boolean;
        readonly isEthAddressHasMapped: boolean;
        readonly isBadSignature: boolean;
        readonly isInvalidSignature: boolean;
        readonly isNonZeroRefCount: boolean;
        readonly type: 'AccountIdHasMapped' | 'EthAddressHasMapped' | 'BadSignature' | 'InvalidSignature' | 'NonZeroRefCount';
    }
    /** @name ModuleStableAssetStableAssetPoolInfo (666) */
    interface ModuleStableAssetStableAssetPoolInfo extends Struct {
        readonly poolAsset: SelendraPrimitivesCurrencyCurrencyId;
        readonly assets: Vec<SelendraPrimitivesCurrencyCurrencyId>;
        readonly precisions: Vec<u128>;
        readonly mintFee: u128;
        readonly swapFee: u128;
        readonly redeemFee: u128;
        readonly totalSupply: u128;
        readonly a: u128;
        readonly aBlock: u32;
        readonly futureA: u128;
        readonly futureABlock: u32;
        readonly balances: Vec<u128>;
        readonly feeRecipient: AccountId32;
        readonly accountId: AccountId32;
        readonly yieldRecipient: AccountId32;
        readonly precision: u128;
    }
    /** @name ModuleStableAssetError (667) */
    interface ModuleStableAssetError extends Enum {
        readonly isInconsistentStorage: boolean;
        readonly isInvalidPoolAsset: boolean;
        readonly isArgumentsMismatch: boolean;
        readonly isArgumentsError: boolean;
        readonly isPoolNotFound: boolean;
        readonly isMath: boolean;
        readonly isInvalidPoolValue: boolean;
        readonly isMintUnderMin: boolean;
        readonly isSwapUnderMin: boolean;
        readonly isRedeemUnderMin: boolean;
        readonly isRedeemOverMax: boolean;
        readonly type: 'InconsistentStorage' | 'InvalidPoolAsset' | 'ArgumentsMismatch' | 'ArgumentsError' | 'PoolNotFound' | 'Math' | 'InvalidPoolValue' | 'MintUnderMin' | 'SwapUnderMin' | 'RedeemUnderMin' | 'RedeemOverMax';
    }
    /** @name PalletSudoError (668) */
    interface PalletSudoError extends Enum {
        readonly isRequireSudo: boolean;
        readonly type: 'RequireSudo';
    }
    /** @name FrameSystemExtensionsCheckNonZeroSender (671) */
    type FrameSystemExtensionsCheckNonZeroSender = Null;
    /** @name FrameSystemExtensionsCheckSpecVersion (672) */
    type FrameSystemExtensionsCheckSpecVersion = Null;
    /** @name FrameSystemExtensionsCheckTxVersion (673) */
    type FrameSystemExtensionsCheckTxVersion = Null;
    /** @name FrameSystemExtensionsCheckGenesis (674) */
    type FrameSystemExtensionsCheckGenesis = Null;
    /** @name RuntimeCommonCheckNonce (677) */
    interface RuntimeCommonCheckNonce extends Struct {
        readonly nonce: Compact<u32>;
    }
    /** @name FrameSystemExtensionsCheckWeight (678) */
    type FrameSystemExtensionsCheckWeight = Null;
    /** @name ModuleTransactionPaymentChargeTransactionPayment (679) */
    interface ModuleTransactionPaymentChargeTransactionPayment extends Compact<u128> {
    }
    /** @name ModuleEvmSetEvmOrigin (680) */
    type ModuleEvmSetEvmOrigin = Null;
    /** @name SelendraRuntimeConfigEvmConfigStorageDepositPerByte (681) */
    type SelendraRuntimeConfigEvmConfigStorageDepositPerByte = Null;
    /** @name SelendraRuntimeConfigEvmConfigTxFeePerGas (682) */
    type SelendraRuntimeConfigEvmConfigTxFeePerGas = Null;
    /** @name SelendraPrimitivesSignatureSelendraMultiSignature (684) */
    interface SelendraPrimitivesSignatureSelendraMultiSignature extends Enum {
        readonly isEd25519: boolean;
        readonly asEd25519: SpCoreEd25519Signature;
        readonly isSr25519: boolean;
        readonly asSr25519: SpCoreSr25519Signature;
        readonly isEcdsa: boolean;
        readonly asEcdsa: SpCoreEcdsaSignature;
        readonly isEthereum: boolean;
        readonly asEthereum: U8aFixed;
        readonly isEip1559: boolean;
        readonly asEip1559: U8aFixed;
        readonly isSelendraEip712: boolean;
        readonly asSelendraEip712: U8aFixed;
        readonly type: 'Ed25519' | 'Sr25519' | 'Ecdsa' | 'Ethereum' | 'Eip1559' | 'SelendraEip712';
    }
}
